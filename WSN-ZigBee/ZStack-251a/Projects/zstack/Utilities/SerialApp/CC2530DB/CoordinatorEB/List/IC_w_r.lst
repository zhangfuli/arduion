###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         03/Jun/2018  11:39:46 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Pr #
#                          ojects\zstack\Utilities\SerialApp\Source\IC_w_r.c  #
#    Command line       =  -f "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251 #
#                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251 #
#                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO   #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1688                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "D:\安连德\第6章            #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\Source\IC_w_r.c" -D              #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D              #
#                          LCD_SUPPORTED -lC "D:\安连德\第6章                 #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\"    #
#                          -lA "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-25 #
#                          1a\Projects\zstack\Utilities\SerialApp\CC2530DB\Co #
#                          ordinatorEB\List\" --diag_suppress Pe001,Pa010 -o  #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\Coordi #
#                          natorEB\Obj\" -e --no_code_motion --debug          #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\安连德\第6章           #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\" -I "D:\安连德\第6章   #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\Source\" -I          #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\ZMain\TI2530DB\" -I "D:\安连德\第6章            #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\" -I "D:\安连德\第6章               #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\target\CC2530EB\" -I "D:\安连德\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\include\" -I "D:\安连德\第6章               #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\high_level\" -I "D:\安连德\第6章            #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\" -I "D:\安连德\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\single_chip\" -I            #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mt\" -I "D:\安连德\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\osal\include\" -I "D:\安连德\第6章              #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\" -I "D:\安连德\第6章            #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\sdata\" -I "D:\安连德\第6章            #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\af\" -I "D:\安连德\第6章                  #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\nwk\" -I "D:\安连德\第6章                 #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sapi\" -I "D:\安连德\第6章                #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sec\" -I "D:\安连德\第6章                 #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sys\" -I "D:\安连德\第6章                 #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\zdo\" -I "D:\安连德\第6章                 #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\" -I "D:\安连德\第6章                      #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\f8w\" -Ohz                                 #
#    List file          =  D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\Coordin #
#                          atorEB\List\IC_w_r.lst                             #
#    Object file        =  D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\Coordin #
#                          atorEB\Obj\IC_w_r.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\IC_w_r.c
      1          #include "variable.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1
      2          #include "rc522.h"
      3          #include "UART.h"
      4          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      5          void Delay_I_1us(unsigned int k)
   \                     Delay_I_1us:
      6          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
      7            uint i,j;
      8            for(i=0;i<k;i++)
   \   000000   7800         MOV     R0,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   8008         SJMP    ??Delay_I_1us_0
      9              for(j=0;j<32;j++);
   \                     ??Delay_I_1us_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \                     ??Delay_I_1us_0:
   \   00000E   C3           CLR     C
   \   00000F   E8           MOV     A,R0
   \   000010   9A           SUBB    A,R2
   \   000011   E9           MOV     A,R1
   \   000012   9B           SUBB    A,R3
   \   000013   40F1         JC      ??Delay_I_1us_1
     10          }
   \   000015   02....       LJMP    ?BRET
     11          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     12          void SPIWriteByte(uchar infor)
   \                     SPIWriteByte:
     13          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
     14              unsigned int counter;
     15              for(counter=0;counter<8;counter++)
   \   000007   7E08         MOV     R6,#0x8
     16              {
     17                
     18                if(infor&0x80)
   \                     ??SPIWriteByte_0:
   \   000009   EF           MOV     A,R7
   \   00000A   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000C   5004         JNC     ??SPIWriteByte_1
     19                  IC_MOSI = 1;
   \   00000E   D286         SETB    0x80.6
   \   000010   8002         SJMP    ??SPIWriteByte_2
     20                else 
     21                  IC_MOSI = 0;
   \                     ??SPIWriteByte_1:
   \   000012   C286         CLR     0x80.6
     22                Delay_I_1us(3);
   \                     ??SPIWriteByte_2:
   \   000014                ; Setup parameters for call to function Delay_I_1us
   \   000014   7A03         MOV     R2,#0x3
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   ??Delay_I_1us?relay
     23                
     24                      IC_SCK = 0;
   \   00001B   C287         CLR     0x80.7
     25                Delay_I_1us(1);
   \   00001D                ; Setup parameters for call to function Delay_I_1us
   \   00001D   7A01         MOV     R2,#0x1
   \   00001F   12....       LCALL   ?Subroutine9 & 0xFFFF
     26                
     27                
     28                 IC_SCK = 1; 
     29                 Delay_I_1us(3);
     30                 
     31                
     32                 infor <<= 1; 
   \                     ??CrossCallReturnLabel_4:
   \   000022   EF           MOV     A,R7
   \   000023   C3           CLR     C
   \   000024   33           RLC     A
   \   000025   FF           MOV     R7,A
     33              } 
   \   000026   1E           DEC     R6
   \   000027   EE           MOV     A,R6
   \   000028   70DF         JNZ     ??SPIWriteByte_0
     34          }
   \   00002A   80..         SJMP    ??Subroutine21_0
   \   00002C                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??Delay_I_1us?relay
   \   000005   D287         SETB    0x80.7
   \   000007                ; Setup parameters for call to function Delay_I_1us
   \   000007                ; Setup parameters for call to function Delay_I_1us
   \   000007   7A03         MOV     R2,#0x3
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??Delay_I_1us?relay
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
     35          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     36          unsigned char SPIReadByte()
   \                     SPIReadByte:
     37          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     38            unsigned int counter;
     39            unsigned char SPI_Data;
     40            for(counter=0;counter<8;counter++)
   \   000005   7F08         MOV     R7,#0x8
     41            {
     42               SPI_Data<<=1;
   \                     ??SPIReadByte_0:
   \   000007   EE           MOV     A,R6
   \   000008   C3           CLR     C
   \   000009   33           RLC     A
   \   00000A   FE           MOV     R6,A
     43               
     44              IC_SCK = 0;
   \   00000B   C287         CLR     0x80.7
     45              Delay_I_1us(3);  
   \   00000D                ; Setup parameters for call to function Delay_I_1us
   \   00000D   7A03         MOV     R2,#0x3
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??Delay_I_1us?relay
     46                 
     47              
     48              if(IC_MISO == 1)
   \   000014   A285         MOV     C,0x80.5
   \   000016   5004         JNC     ??SPIReadByte_1
     49                SPI_Data |= 0x01;
   \   000018   EE           MOV     A,R6
   \   000019   D2E0         SETB    0xE0 /* A   */.0
   \   00001B   FE           MOV     R6,A
     50               Delay_I_1us(2);
   \                     ??SPIReadByte_1:
   \   00001C                ; Setup parameters for call to function Delay_I_1us
   \   00001C   7A02         MOV     R2,#0x2
   \   00001E   12....       LCALL   ?Subroutine9 & 0xFFFF
     51          
     52                  IC_SCK = 1;
     53              Delay_I_1us(3);  
     54              
     55            }
   \                     ??CrossCallReturnLabel_5:
   \   000021   1F           DEC     R7
   \   000022   EF           MOV     A,R7
   \   000023   70E2         JNZ     ??SPIReadByte_0
     56            return SPI_Data;
   \   000025   EE           MOV     A,R6
   \   000026   F9           MOV     R1,A
   \   000027   80..         SJMP    ??Subroutine21_0
   \   000029                REQUIRE _A_P0
     57          }
     58          
     59          /////////////////////////////////////////////////////////////////////
     60          //功    能：读RC632寄存器
     61          //参数说明：Address[IN]:寄存器地址
     62          //返    回：读出的值
     63          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     64          unsigned char ReadRawRC(unsigned char Address)
   \                     ReadRawRC:
     65          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
     66              unsigned char ucAddr;
     67              unsigned char ucResult=0;
     68          	IC_SDA = 0;
   \   000006   C2A0         CLR     0xa0.0
     69              ucAddr = ((Address<<1)&0x7E)|0x80;//地址变换，SPI的读写地址有要求
     70          	SPIWriteByte(ucAddr);
   \   000008                ; Setup parameters for call to function SPIWriteByte
   \   000008   C3           CLR     C
   \   000009   33           RLC     A
   \   00000A   4480         ORL     A,#0x80
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??SPIWriteByte?relay
     71          	ucResult=SPIReadByte();
   \   000010                ; Setup parameters for call to function SPIReadByte
   \   000010   12....       LCALL   ??SPIReadByte?relay
     72          	IC_SDA = 1;
   \   000013                REQUIRE ?Subroutine5
   \   000013                REQUIRE _A_P2
   \   000013                ; // Fall through to label ?Subroutine5
     73             return ucResult;
     74          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D2A0         SETB    0xa0.0
   \   000002   80..         SJMP    ??Subroutine21_0
     75          /////////////////////////////////////////////////////////////////////
     76          //功    能：写RC632寄存器
     77          //参数说明：Address[IN]:寄存器地址
     78          //          value[IN]:写入的值
     79          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     80          void WriteRawRC(unsigned char Address, unsigned char value)
   \                     WriteRawRC:
     81          {  
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
     82              unsigned char ucAddr;
     83                   Address <<= 1;
     84              ucAddr = (Address&0x7e);
     85               IC_SDA = 0;
   \   000009   C2A0         CLR     0xa0.0
     86          
     87          	SPIWriteByte(ucAddr);
   \   00000B                ; Setup parameters for call to function SPIWriteByte
   \   00000B   EF           MOV     A,R7
   \   00000C   C3           CLR     C
   \   00000D   33           RLC     A
   \   00000E   547E         ANL     A,#0x7e
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??SPIWriteByte?relay
     88          	SPIWriteByte(value);
   \   000014                ; Setup parameters for call to function SPIWriteByte
   \   000014   EE           MOV     A,R6
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   ??SPIWriteByte?relay
     89             IC_SDA = 1;
   \   000019   80..         SJMP    ?Subroutine5
   \   00001B                REQUIRE _A_P2
     90          }
     91          
     92          /////////////////////////////////////////////////////////////////////
     93          //功    能：置RC522寄存器位
     94          //参数说明：reg[IN]:寄存器地址
     95          //          mask[IN]:置位值
     96          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   FA           MOV     R2,A
   \   000001   EE           MOV     A,R6
   \   000002   F9           MOV     R1,A
   \   000003   12....       LCALL   ??WriteRawRC?relay
   \   000006                REQUIRE ??Subroutine21_0
   \   000006                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     97          void SetBitMask(unsigned char reg,unsigned char mask)  
   \                     SetBitMask:
     98          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   12....       LCALL   ?Subroutine11 & 0xFFFF
     99              char tmp = 0x0;
    100              tmp = ReadRawRC(reg);
    101              WriteRawRC(reg,tmp | mask);  // set bit mask
   \                     ??CrossCallReturnLabel_22:
   \   00000B   4F           ORL     A,R7
   \   00000C   80..         SJMP    ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   FF           MOV     R7,A
   \   000001                ; Setup parameters for call to function WriteRawRC
   \   000001                ; Setup parameters for call to function ReadRawRC
   \   000001                ; Setup parameters for call to function ReadRawRC
   \   000001                REQUIRE ??Subroutine22_0
   \   000001                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   12....       LCALL   ??ReadRawRC?relay
   \   000003   E9           MOV     A,R1
   \   000004   22           RET
    102          }
    103          
    104          /////////////////////////////////////////////////////////////////////
    105          //功    能：清RC522寄存器位
    106          //参数说明：reg[IN]:寄存器地址
    107          //          mask[IN]:清位值
    108          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    109          void ClearBitMask(unsigned char reg,unsigned char mask)  
   \                     ClearBitMask:
    110          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    111              char tmp = 0x0;
    112              tmp = ReadRawRC(reg);
    113              WriteRawRC(reg, tmp & ~mask);  // clear bit mask
   \   000007                ; Setup parameters for call to function WriteRawRC
   \   000007   EA           MOV     A,R2
   \   000008   F4           CPL     A
   \   000009   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000C   5F           ANL     A,R7
   \   00000D   80..         SJMP    ?Subroutine1
    114          } 
    115          
    116          
    117          
    118          
    119          /////////////////////////////////////////////////////////////////////
    120          //开启天线  
    121          //每次启动或关闭天险发射之间应至少有1ms的间隔
    122          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          void PcdAntennaOn(void)
   \                     PcdAntennaOn:
    124          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    125              unsigned char i;
    126              i = ReadRawRC(TxControlReg);
    127              if (!(i & 0x03))
   \   000004                ; Setup parameters for call to function ReadRawRC
   \   000004   7914         MOV     R1,#0x14
   \   000006   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000009   5403         ANL     A,#0x3
   \   00000B   7007         JNZ     ??PcdAntennaOn_0
    128              {
    129                  SetBitMask(TxControlReg, 0x03);
   \   00000D                ; Setup parameters for call to function SetBitMask
   \   00000D   7A03         MOV     R2,#0x3
   \   00000F   7914         MOV     R1,#0x14
   \   000011   12....       LCALL   ??SetBitMask?relay
    130              }
    131          }
   \                     ??PcdAntennaOn_0:
   \   000014                REQUIRE ?Subroutine0
   \   000014                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    132          
    133          /////////////////////////////////////////////////////////////////////
    134          //关闭天线
    135          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    136          void PcdAntennaOff(void)
   \                     PcdAntennaOff:
    137          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    138            ClearBitMask(TxControlReg, 0x03);
   \   000004                ; Setup parameters for call to function ClearBitMask
   \   000004   7A03         MOV     R2,#0x3
   \   000006   7914         MOV     R1,#0x14
   \   000008   12....       LCALL   ??ClearBitMask?relay
    139          }
   \   00000B   80..         SJMP    ?Subroutine0
    140          
    141          
    142          /////////////////////////////////////////////////////////////////////
    143          //功    能：复位RC522
    144          //返    回: 成功返回MI_OK
    145          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          void PcdReset(void)
   \                     PcdReset:
    147          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    148            //PORTD|=(1<<RC522RST);
    149            IC_RST = 1;
   \   000004   D284         SETB    0x80.4
    150            Delay_I_1us(1);
   \   000006                ; Setup parameters for call to function Delay_I_1us
   \   000006   7A01         MOV     R2,#0x1
   \   000008   7B00         MOV     R3,#0x0
   \   00000A   12....       LCALL   ??Delay_I_1us?relay
    151            //PORTD&=~(1<<RC522RST);
    152            IC_RST = 0;
   \   00000D   C284         CLR     0x80.4
    153            Delay_I_1us(1);
   \   00000F                ; Setup parameters for call to function Delay_I_1us
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??Delay_I_1us?relay
    154            //PORTD|=(1<<RC522RST);
    155            IC_RST = 1;
   \   000016   D284         SETB    0x80.4
    156            Delay_I_1us(1);
   \   000018                ; Setup parameters for call to function Delay_I_1us
   \   000018   7A01         MOV     R2,#0x1
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??Delay_I_1us?relay
    157            WriteRawRC(0x01,0x0f);
   \   00001F                ; Setup parameters for call to function WriteRawRC
   \   00001F   7A0F         MOV     R2,#0xf
   \   000021   7901         MOV     R1,#0x1
   \   000023   12....       LCALL   ??WriteRawRC?relay
    158            while(ReadRawRC(0x01)&0x10);
   \                     ??PcdReset_0:
   \   000026                ; Setup parameters for call to function ReadRawRC
   \   000026   7901         MOV     R1,#0x1
   \   000028   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00002B   A2E4         MOV     C,0xE0 /* A   */.4
   \   00002D   40F7         JC      ??PcdReset_0
    159            Delay_I_1us(10);
   \   00002F                ; Setup parameters for call to function Delay_I_1us
   \   00002F   7A0A         MOV     R2,#0xa
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   ??Delay_I_1us?relay
    160            
    161            WriteRawRC(ModeReg,0x3D);            //定义发送和接收常用模式 和Mifare卡通讯，CRC初始值0x6363
   \   000036                ; Setup parameters for call to function WriteRawRC
   \   000036   7A3D         MOV     R2,#0x3d
   \   000038   7911         MOV     R1,#0x11
   \   00003A   12....       LCALL   ?Subroutine6 & 0xFFFF
    162            WriteRawRC(TReloadRegL,30);           //16位定时器低位
    163            WriteRawRC(TReloadRegH,0);			 //16位定时器高位
    164            WriteRawRC(TModeReg,0x8D);				//定义内部定时器的设置
    165            WriteRawRC(TPrescalerReg,0x3E);			//设置定时器分频系数
    166            WriteRawRC(TxAutoReg,0x40);				//	调制发送信号为100%ASK
   \                     ??CrossCallReturnLabel_0:
   \   00003D                ; Setup parameters for call to function WriteRawRC
   \   00003D   7A40         MOV     R2,#0x40
   \   00003F   7915         MOV     R1,#0x15
   \   000041   12....       LCALL   ??WriteRawRC?relay
    167            
    168            
    169            //return MI_OK;
    170          }
   \   000044   80..         SJMP    ?Subroutine0
   \   000046                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ??WriteRawRC?relay
   \   000003                ; Setup parameters for call to function WriteRawRC
   \   000003                ; Setup parameters for call to function WriteRawRC
   \   000003   7A1E         MOV     R2,#0x1e
   \   000005   792D         MOV     R1,#0x2d
   \   000007   12....       LCALL   ??WriteRawRC?relay
   \   00000A                ; Setup parameters for call to function WriteRawRC
   \   00000A                ; Setup parameters for call to function WriteRawRC
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   792C         MOV     R1,#0x2c
   \   00000E   12....       LCALL   ??WriteRawRC?relay
   \   000011                ; Setup parameters for call to function WriteRawRC
   \   000011                ; Setup parameters for call to function WriteRawRC
   \   000011   7A8D         MOV     R2,#-0x73
   \   000013   792A         MOV     R1,#0x2a
   \   000015   12....       LCALL   ??WriteRawRC?relay
   \   000018                ; Setup parameters for call to function WriteRawRC
   \   000018                ; Setup parameters for call to function WriteRawRC
   \   000018   7A3E         MOV     R2,#0x3e
   \   00001A   792B         MOV     R1,#0x2b
   \   00001C   12....       LCALL   ??WriteRawRC?relay
   \   00001F   22           RET
    171          
    172          
    173          //////////////////////////////////////////////////////////////////////
    174          //设置RC632的工作方式 
    175          //////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void M500PcdConfigISOType(unsigned char type)
   \                     M500PcdConfigISOType:
    177          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    178             if (type == 'A')                     //ISO14443_A
   \   000007   7441         MOV     A,#0x41
   \   000009   6E           XRL     A,R6
   \   00000A   7026         JNZ     ??M500PcdConfigISOType_0
    179             { 
    180                 ClearBitMask(Status2Reg,0x08);
   \   00000C                ; Setup parameters for call to function ClearBitMask
   \   00000C   7A08         MOV     R2,#0x8
   \   00000E   7908         MOV     R1,#0x8
   \   000010   12....       LCALL   ??ClearBitMask?relay
    181                 WriteRawRC(ModeReg,0x3D);//3F
   \   000013                ; Setup parameters for call to function WriteRawRC
   \   000013   7A3D         MOV     R2,#0x3d
   \   000015   7911         MOV     R1,#0x11
   \   000017   12....       LCALL   ??WriteRawRC?relay
    182                 WriteRawRC(RxSelReg,0x86);//84
   \   00001A                ; Setup parameters for call to function WriteRawRC
   \   00001A   7A86         MOV     R2,#-0x7a
   \   00001C   7917         MOV     R1,#0x17
   \   00001E   12....       LCALL   ??WriteRawRC?relay
    183                 WriteRawRC(RFCfgReg,0x7F);   //4F
   \   000021                ; Setup parameters for call to function WriteRawRC
   \   000021   7A7F         MOV     R2,#0x7f
   \   000023   7926         MOV     R1,#0x26
   \   000025   12....       LCALL   ?Subroutine6 & 0xFFFF
    184             	   WriteRawRC(TReloadRegL,30);//tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
    185          	   WriteRawRC(TReloadRegH,0);
    186                 WriteRawRC(TModeReg,0x8D);
    187          	   WriteRawRC(TPrescalerReg,0x3E);
    188          	   Delay_I_1us(2);
   \                     ??CrossCallReturnLabel_1:
   \   000028                ; Setup parameters for call to function Delay_I_1us
   \   000028   7A02         MOV     R2,#0x2
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ??Delay_I_1us?relay
    189                 PcdAntennaOn();//开天线
   \   00002F                ; Setup parameters for call to function PcdAntennaOn
   \   00002F   12....       LCALL   ??PcdAntennaOn?relay
    190             }
    191           //  else return (-1); 
    192             
    193             //return MI_OK;
    194          }
   \                     ??M500PcdConfigISOType_0:
   \   000032   02....       LJMP    ??Subroutine21_0 & 0xFFFF
    195          
    196          /////////////////////////////////////////////////////////////////////
    197          //功    能：通过RC522和ISO14443卡通讯
    198          //参数说明：Command[IN]:RC522命令字
    199          //          pInData[IN]:通过RC522发送到卡片的数据
    200          //          InLenByte[IN]:发送数据的字节长度
    201          //          pOutData[OUT]:接收到的卡片返回数据
    202          //          *pOutLenBit[OUT]:返回数据的位长度
    203          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          char PcdComMF522(unsigned char Command, 		//RC522命令字
   \                     PcdComMF522:
    205                           unsigned char *pInData, 		//通过RC522发送到卡片的数据
    206                           unsigned char InLenByte,		//发送数据的字节长度
    207                           unsigned char *pOutData, 		//接收到的卡片返回数据
    208                           unsigned int  *pOutLenBit)		//返回数据的位长度
    209          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 10,R2
   \   000009   8B..         MOV     ?V0 + 11,R3
   \   00000B   8C..         MOV     ?V0 + 4,R4
   \   00000D   7416         MOV     A,#0x16
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 12,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 13,A
   \   000019   7418         MOV     A,#0x18
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 1,A
    210              char status = MI_ERR;
   \   000025   75..BB       MOV     ?V0 + 3,#-0x45
    211              unsigned char irqEn   = 0x00;
   \   000028   75..00       MOV     ?V0 + 5,#0x0
    212              unsigned char waitFor = 0x00;
   \   00002B   75..00       MOV     ?V0 + 6,#0x0
    213              unsigned char lastBits;
    214              unsigned char n;
    215              unsigned int i;
    216              switch (Command)
   \   00002E   E9           MOV     A,R1
   \   00002F   24F4         ADD     A,#-0xc
   \   000031   600C         JZ      ??PcdComMF522_0
   \   000033   24FE         ADD     A,#-0x2
   \   000035   700E         JNZ     ??PcdComMF522_1
    217              {
    218                 case PCD_AUTHENT:		//Mifare认证
    219                    irqEn   = 0x12;		//允许错误中断请求ErrIEn  允许空闲中断IdleIEn
   \   000037   75..12       MOV     ?V0 + 5,#0x12
    220                    waitFor = 0x10;		//认证寻卡等待时候 查询空闲中断标志位
   \   00003A   75..10       MOV     ?V0 + 6,#0x10
    221                    break;
   \   00003D   8006         SJMP    ??PcdComMF522_1
    222                 case PCD_TRANSCEIVE:		//接收发送 发送接收
    223                    irqEn   = 0x77;		//允许TxIEn RxIEn IdleIEn LoAlertIEn ErrIEn TimerIEn
   \                     ??PcdComMF522_0:
   \   00003F   75..77       MOV     ?V0 + 5,#0x77
    224                    waitFor = 0x30;		//寻卡等待时候 查询接收中断标志位与 空闲中断标志位
   \   000042   75..30       MOV     ?V0 + 6,#0x30
    225                    break;
    226                 default:
    227                   break;
    228              }
    229             
    230              WriteRawRC(ComIEnReg,irqEn|0x80);		//IRqInv置位管脚IRQ与Status1Reg的IRq位的值相反 
   \                     ??PcdComMF522_1:
   \   000045                ; Setup parameters for call to function WriteRawRC
   \   000045   7480         MOV     A,#-0x80
   \   000047   45..         ORL     A,?V0 + 5
   \   000049   FA           MOV     R2,A
   \   00004A   7902         MOV     R1,#0x2
   \   00004C   12....       LCALL   ??WriteRawRC?relay
    231              ClearBitMask(ComIrqReg,0x80);			//Set1该位清零时，CommIRqReg的屏蔽位清零
   \   00004F                ; Setup parameters for call to function ClearBitMask
   \   00004F   7A80         MOV     R2,#-0x80
   \   000051   7904         MOV     R1,#0x4
   \   000053   12....       LCALL   ?Subroutine7 & 0xFFFF
    232              WriteRawRC(CommandReg,PCD_IDLE);		//写空闲命令
    233              SetBitMask(FIFOLevelReg,0x80);			//置位FlushBuffer清除内部FIFO的读和写指针以及ErrReg的BufferOvfl标志位被清除
    234              
    235              for (i=0; i<InLenByte; i++)
   \                     ??CrossCallReturnLabel_2:
   \   000056   7E00         MOV     R6,#0x0
   \   000058   7F00         MOV     R7,#0x0
   \   00005A   8019         SJMP    ??PcdComMF522_2
    236              {   WriteRawRC(FIFODataReg, pInData[i]);    }		//写数据进FIFOdata
   \                     ??PcdComMF522_3:
   \   00005C                ; Setup parameters for call to function WriteRawRC
   \   00005C   E5..         MOV     A,?V0 + 10
   \   00005E   2E           ADD     A,R6
   \   00005F   F582         MOV     DPL,A
   \   000061   E5..         MOV     A,?V0 + 11
   \   000063   3F           ADDC    A,R7
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   7909         MOV     R1,#0x9
   \   00006A   12....       LCALL   ??WriteRawRC?relay
   \   00006D   EE           MOV     A,R6
   \   00006E   2401         ADD     A,#0x1
   \   000070   0E           INC     R6
   \   000071   EF           MOV     A,R7
   \   000072   3400         ADDC    A,#0x0
   \   000074   FF           MOV     R7,A
   \                     ??PcdComMF522_2:
   \   000075   85....       MOV     ?V0 + 8,?V0 + 4
   \   000078   C3           CLR     C
   \   000079   EE           MOV     A,R6
   \   00007A   95..         SUBB    A,?V0 + 8
   \   00007C   EF           MOV     A,R7
   \   00007D   9400         SUBB    A,#0x0
   \   00007F   40DB         JC      ??PcdComMF522_3
    237              WriteRawRC(CommandReg, Command);					//写命令
   \   000081                ; Setup parameters for call to function WriteRawRC
   \   000081   AA..         MOV     R2,?V0 + 2
   \   000083   7901         MOV     R1,#0x1
   \   000085   12....       LCALL   ??WriteRawRC?relay
    238             
    239              
    240              if (Command == PCD_TRANSCEIVE)
   \   000088   740C         MOV     A,#0xc
   \   00008A   65..         XRL     A,?V0 + 2
   \   00008C   7007         JNZ     ??PcdComMF522_4
    241              {    SetBitMask(BitFramingReg,0x80);  }				//StartSend置位启动数据发送 该位与收发命令使用时才有效
   \   00008E                ; Setup parameters for call to function SetBitMask
   \   00008E   7A80         MOV     R2,#-0x80
   \   000090   790D         MOV     R1,#0xd
   \   000092   12....       LCALL   ??SetBitMask?relay
    242              
    243              i = 1000;//根据时钟频率调整，操作M1卡最大等待时间25ms
   \                     ??PcdComMF522_4:
   \   000095   7EE8         MOV     R6,#-0x18
   \   000097   7F03         MOV     R7,#0x3
    244              do 														//认证 与寻卡等待时间	
    245              {
    246                   n = ReadRawRC(ComIrqReg);							//查询事件中断
   \                     ??PcdComMF522_5:
   \   000099                ; Setup parameters for call to function ReadRawRC
   \   000099   7904         MOV     R1,#0x4
   \   00009B   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00009E   F5..         MOV     ?V0 + 8,A
    247                   i--;
    248              }
    249              while ((i!=0) && !(n&0x01) && !(n&waitFor));		//退出条件i=0,定时器中断，与写空闲命令
   \   0000A0   EE           MOV     A,R6
   \   0000A1   24FF         ADD     A,#-0x1
   \   0000A3   1E           DEC     R6
   \   0000A4   EF           MOV     A,R7
   \   0000A5   34FF         ADDC    A,#-0x1
   \   0000A7   FF           MOV     R7,A
   \   0000A8   EE           MOV     A,R6
   \   0000A9   4F           ORL     A,R7
   \   0000AA   6009         JZ      ??PcdComMF522_6
   \   0000AC   E9           MOV     A,R1
   \   0000AD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000AF   4004         JC      ??PcdComMF522_6
   \   0000B1   55..         ANL     A,?V0 + 6
   \   0000B3   60E4         JZ      ??PcdComMF522_5
    250              ClearBitMask(BitFramingReg,0x80);					//清理允许StartSend位
   \                     ??PcdComMF522_6:
   \   0000B5                ; Setup parameters for call to function ClearBitMask
   \   0000B5   7A80         MOV     R2,#-0x80
   \   0000B7   790D         MOV     R1,#0xd
   \   0000B9   12....       LCALL   ??ClearBitMask?relay
    251              if (i!=0)
   \   0000BC   EE           MOV     A,R6
   \   0000BD   4F           ORL     A,R7
   \   0000BE   7003         JNZ     $+5
   \   0000C0   02....       LJMP    ??PcdComMF522_7 & 0xFFFF
    252              {    
    253                   if(!(ReadRawRC(ErrorReg)&0x1B))			//读错误标志寄存器BufferOfI CollErr ParityErr ProtocolErr
   \   0000C3                ; Setup parameters for call to function ReadRawRC
   \   0000C3   7906         MOV     R1,#0x6
   \   0000C5   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000C8   541B         ANL     A,#0x1b
   \   0000CA   6003         JZ      $+5
   \   0000CC   02....       LJMP    ??PcdComMF522_7 & 0xFFFF
    254                   {
    255                       status = MI_OK;
   \   0000CF   75..26       MOV     ?V0 + 3,#0x26
    256                       if (n & irqEn & 0x01)					//是否发生定时器中断
   \   0000D2   E5..         MOV     A,?V0 + 5
   \   0000D4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D6   C0D0         PUSH    PSW
   \   0000D8   E5..         MOV     A,?V0 + 8
   \   0000DA   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000DC   92F0         MOV     B.0,C
   \   0000DE   12....       LCALL   ?POP_BIT_ISP
   \   0000E1   1581         DEC     SP
   \   0000E3   82F0         ANL     C,B.0
   \   0000E5   5003         JNC     ??PcdComMF522_8
    257                       {   status = MI_NOTAGERR;   }
   \   0000E7   75..CC       MOV     ?V0 + 3,#-0x34
    258                       if (Command == PCD_TRANSCEIVE)
   \                     ??PcdComMF522_8:
   \   0000EA   740C         MOV     A,#0xc
   \   0000EC   65..         XRL     A,?V0 + 2
   \   0000EE   6003         JZ      $+5
   \   0000F0   02....       LJMP    ??PcdComMF522_7 & 0xFFFF
    259                       {
    260                         	n = ReadRawRC(FIFOLevelReg);			//读FIFO中保存的字节数
   \   0000F3                ; Setup parameters for call to function ReadRawRC
   \   0000F3   790A         MOV     R1,#0xa
   \   0000F5   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000F8   F5..         MOV     ?V0 + 8,A
    261                        	lastBits = ReadRawRC(ControlReg) & 0x07;	//最后接收到得字节的有效位数
   \   0000FA                ; Setup parameters for call to function ReadRawRC
   \   0000FA   790C         MOV     R1,#0xc
   \   0000FC   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000FF   5407         ANL     A,#0x7
   \   000101   F5..         MOV     ?V0 + 10,A
    262                          if (lastBits)
   \   000103   85....       MOV     ?V0 + 6,?V0 + 8
   \   000106   6028         JZ      ??PcdComMF522_9
    263                          {   *pOutLenBit = (n-1)*8 + lastBits;   }	//N个字节数减去1（最后一个字节）+最后一位的位数 读取到的数据总位数
   \   000108   E5..         MOV     A,?V0 + 6
   \   00010A   24FF         ADD     A,#-0x1
   \   00010C   F5..         MOV     ?V0 + 6,A
   \   00010E   E4           CLR     A
   \   00010F   34FF         ADDC    A,#-0x1
   \   000111   F5..         MOV     ?V0 + 7,A
   \   000113   7403         MOV     A,#0x3
   \   000115   78..         MOV     R0,#?V0 + 6
   \   000117   12....       LCALL   ?S_SHL
   \   00011A   E5..         MOV     A,?V0 + 6
   \   00011C   25..         ADD     A,?V0 + 10
   \   00011E   F8           MOV     R0,A
   \   00011F   E5..         MOV     A,?V0 + 7
   \   000121   3400         ADDC    A,#0x0
   \   000123   F9           MOV     R1,A
   \   000124   85..82       MOV     DPL,?V0 + 0
   \   000127   85..83       MOV     DPH,?V0 + 1
   \   00012A   E8           MOV     A,R0
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   A3           INC     DPTR
   \   00012D   E9           MOV     A,R1
   \   00012E   8016         SJMP    ??PcdComMF522_10
    264                          else
    265                          {   *pOutLenBit = n*8;   }					//最后接收到的字节整个字节有效
   \                     ??PcdComMF522_9:
   \   000130   75..00       MOV     ?V0 + 7,#0x0
   \   000133   7403         MOV     A,#0x3
   \   000135   78..         MOV     R0,#?V0 + 6
   \   000137   12....       LCALL   ?S_SHL
   \   00013A   85..82       MOV     DPL,?V0 + 0
   \   00013D   85..83       MOV     DPH,?V0 + 1
   \   000140   E5..         MOV     A,?V0 + 6
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   E5..         MOV     A,?V0 + 7
   \                     ??PcdComMF522_10:
   \   000146   F0           MOVX    @DPTR,A
    266                          if (n == 0)									
   \   000147   E5..         MOV     A,?V0 + 8
   \   000149   7005         JNZ     ??PcdComMF522_11
    267                          {   n = 1;    }
   \   00014B   75..01       MOV     ?V0 + 8,#0x1
   \   00014E   8008         SJMP    ??PcdComMF522_12
    268                          if (n > MAXRLEN)
   \                     ??PcdComMF522_11:
   \   000150   C3           CLR     C
   \   000151   9413         SUBB    A,#0x13
   \   000153   4003         JC      ??PcdComMF522_12
    269                          {   n = MAXRLEN;   }
   \   000155   75..12       MOV     ?V0 + 8,#0x12
    270                          for (i=0; i<n; i++)
   \                     ??PcdComMF522_12:
   \   000158   7E00         MOV     R6,#0x0
   \   00015A   7F00         MOV     R7,#0x0
   \   00015C   8019         SJMP    ??PcdComMF522_13
    271                          {   pOutData[i] = ReadRawRC(FIFODataReg);    }
   \                     ??PcdComMF522_14:
   \   00015E                ; Setup parameters for call to function ReadRawRC
   \   00015E   7909         MOV     R1,#0x9
   \   000160   12....       LCALL   ??ReadRawRC?relay
   \   000163   E5..         MOV     A,?V0 + 12
   \   000165   2E           ADD     A,R6
   \   000166   F582         MOV     DPL,A
   \   000168   E5..         MOV     A,?V0 + 13
   \   00016A   3F           ADDC    A,R7
   \   00016B   F583         MOV     DPH,A
   \   00016D   E9           MOV     A,R1
   \   00016E   F0           MOVX    @DPTR,A
   \   00016F   EE           MOV     A,R6
   \   000170   2401         ADD     A,#0x1
   \   000172   0E           INC     R6
   \   000173   EF           MOV     A,R7
   \   000174   3400         ADDC    A,#0x0
   \   000176   FF           MOV     R7,A
   \                     ??PcdComMF522_13:
   \   000177   85....       MOV     ?V0 + 0,?V0 + 8
   \   00017A   C3           CLR     C
   \   00017B   EE           MOV     A,R6
   \   00017C   95..         SUBB    A,?V0 + 0
   \   00017E   EF           MOV     A,R7
   \   00017F   9400         SUBB    A,#0x0
   \   000181   40DB         JC      ??PcdComMF522_14
    272                      }
    273                   }
    274                   else
    275                   {   status = MI_ERR;   }
    276             }
    277             
    278             SetBitMask(ControlReg,0x80);           // stop timer now
   \                     ??PcdComMF522_7:
   \   000183                ; Setup parameters for call to function SetBitMask
   \   000183   7A80         MOV     R2,#-0x80
   \   000185   790C         MOV     R1,#0xc
   \   000187   12....       LCALL   ??SetBitMask?relay
    279             WriteRawRC(CommandReg,PCD_IDLE); 
   \   00018A                ; Setup parameters for call to function WriteRawRC
   \   00018A   7A00         MOV     R2,#0x0
   \   00018C   7901         MOV     R1,#0x1
   \   00018E   12....       LCALL   ??WriteRawRC?relay
    280             return status;
   \   000191   A9..         MOV     R1,?V0 + 3
   \   000193   7F0E         MOV     R7,#0xe
   \   000195   02....       LJMP    ?BANKED_LEAVE_XDATA
    281          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ??ClearBitMask?relay
   \   000003                ; Setup parameters for call to function WriteRawRC
   \   000003                ; Setup parameters for call to function WriteRawRC
   \   000003   7A00         MOV     R2,#0x0
   \   000005   7901         MOV     R1,#0x1
   \   000007   12....       LCALL   ??WriteRawRC?relay
   \   00000A                ; Setup parameters for call to function SetBitMask
   \   00000A                ; Setup parameters for call to function SetBitMask
   \   00000A   7A80         MOV     R2,#-0x80
   \   00000C   790A         MOV     R1,#0xa
   \   00000E   12....       LCALL   ??SetBitMask?relay
   \   000011   22           RET
    282          
    283          /////////////////////////////////////////////////////////////////////
    284          //功    能：寻卡
    285          //参数说明: req_code[IN]:寻卡方式
    286          //                0x52 = 寻感应区内所有符合14443A标准的卡
    287          //                0x26 = 寻未进入休眠状态的卡
    288          //          pTagType[OUT]：卡片类型代码
    289          //                0x4400 = Mifare_UltraLight
    290          //                0x0400 = Mifare_One(S50)
    291          //                0x0200 = Mifare_One(S70)
    292          //                0x0800 = Mifare_Pro(X)
    293          //                0x4403 = Mifare_DESFire
    294          //返    回: 成功返回MI_OK
    295          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    296          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
   \                     PcdRequest:
    297          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
    298             char status;  
    299             uint i;
                         ^
Warning[Pe177]: variable "i" was declared but never referenced
    300             unsigned int  unLen;
    301             unsigned char ucComMF522Buf[MAXRLEN]; 
    302          
    303             ClearBitMask(Status2Reg,0x08);	//清理指示MIFARECyptol单元接通以及所有卡的数据通信被加密的情况
   \   000010                ; Setup parameters for call to function ClearBitMask
   \   000010   7A08         MOV     R2,#0x8
   \   000012   7908         MOV     R1,#0x8
   \   000014   12....       LCALL   ??ClearBitMask?relay
    304             WriteRawRC(BitFramingReg,0x07);	//	发送的最后一个字节的 七位
   \   000017                ; Setup parameters for call to function WriteRawRC
   \   000017   7A07         MOV     R2,#0x7
   \   000019   790D         MOV     R1,#0xd
   \   00001B   12....       LCALL   ??WriteRawRC?relay
    305             SetBitMask(TxControlReg,0x03);	//TX1,TX2管脚的输出信号传递经发送调制的13.56的能量载波信号
   \   00001E                ; Setup parameters for call to function SetBitMask
   \   00001E   7A03         MOV     R2,#0x3
   \   000020   7914         MOV     R1,#0x14
   \   000022   12....       LCALL   ??SetBitMask?relay
    306          
    307             ucComMF522Buf[0] = req_code;		//存入 卡片命令字
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E5..         MOV     A,?V0 + 2
   \   00002C   12....       LCALL   ?Subroutine15 & 0xFFFF
    308          
    309             status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);	//寻卡    
   \                     ??CrossCallReturnLabel_10:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C01         MOV     R4,#0x1
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
    310             if ((status == MI_OK) && (unLen == 0x10))	//寻卡成功返回卡类型 
   \   00004F   7426         MOV     A,#0x26
   \   000051   69           XRL     A,R1
   \   000052   7028         JNZ     ??PcdRequest_0
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6410         XRL     A,#0x10
   \   00005D   7002         JNZ     ??PcdRequest_1
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \                     ??PcdRequest_1:
   \   000061   7019         JNZ     ??PcdRequest_0
    311             {    
    312                 *pTagType     = ucComMF522Buf[0];
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   F0           MOVX    @DPTR,A
    313                 *(pTagType+1) = ucComMF522Buf[1];
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   E0           MOVX    A,@DPTR
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   A3           INC     DPTR
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   8002         SJMP    ??PcdRequest_2
    314             }
    315             else
    316             {   
    317          		status = MI_ERR;
   \                     ??PcdRequest_0:
   \   00007C   79BB         MOV     R1,#-0x45
    318          	}
    319             
    320             return status;
   \                     ??PcdRequest_2:
   \   00007E                REQUIRE ?Subroutine2
   \   00007E                ; // Fall through to label ?Subroutine2
    321          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7414         MOV     A,#0x14
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F03         MOV     R7,#0x3
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function PcdComMF522
   \   000001                ; Setup parameters for call to function PcdComMF522
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   8582..       MOV     ?V0 + 0,DPL
   \   00000A   8583..       MOV     ?V0 + 1,DPH
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   790C         MOV     R1,#0xc
   \   000006                REQUIRE ??Subroutine23_0
   \   000006                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   12....       LCALL   ??PcdComMF522?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET
    322          
    323          /////////////////////////////////////////////////////////////////////
    324          //功    能：防冲撞
    325          //参数说明: pSnr[OUT]:卡片序列号，4字节
    326          //返    回: 成功返回MI_OK
    327          /////////////////////////////////////////////////////////////////////  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    328          char PcdAnticoll(unsigned char *pSnr)
   \                     PcdAnticoll:
    329          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    330              char status;
    331              unsigned char i,snr_check=0;
   \   00000E   75..00       MOV     ?V0 + 2,#0x0
    332              unsigned int  unLen;
    333              unsigned char ucComMF522Buf[MAXRLEN]; 
    334              
    335          
    336              ClearBitMask(Status2Reg,0x08);		//清MFCryptol On位 只有成功执行MFAuthent命令后，该位才能置位
   \   000011                ; Setup parameters for call to function ClearBitMask
   \   000011   7A08         MOV     R2,#0x8
   \   000013   7908         MOV     R1,#0x8
   \   000015   12....       LCALL   ??ClearBitMask?relay
    337              WriteRawRC(BitFramingReg,0x00);		//清理寄存器 停止收发
   \   000018                ; Setup parameters for call to function WriteRawRC
   \   000018   7A00         MOV     R2,#0x0
   \   00001A   790D         MOV     R1,#0xd
   \   00001C   12....       LCALL   ??WriteRawRC?relay
    338              ClearBitMask(CollReg,0x80);			//清ValuesAfterColl所有接收的位在冲突后被清除
   \   00001F                ; Setup parameters for call to function ClearBitMask
   \   00001F   7A80         MOV     R2,#-0x80
   \   000021   790E         MOV     R1,#0xe
   \   000023   12....       LCALL   ??ClearBitMask?relay
    339              
    340            // WriteRawRC(BitFramingReg,0x07);	//	发送的最后一个字节的 七位
    341            // SetBitMask(TxControlReg,0x03);	//TX1,TX2管脚的输出信号传递经发送调制的13.56的能量载波信号
    342             
    343              ucComMF522Buf[0] = 0x93;	//卡片防冲突命令
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   7493         MOV     A,#-0x6d
   \   00002D   F0           MOVX    @DPTR,A
    344              ucComMF522Buf[1] = 0x20;
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7420         MOV     A,#0x20
   \   000035   12....       LCALL   ?Subroutine15 & 0xFFFF
    345             
    346              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);//与卡片通信
   \                     ??CrossCallReturnLabel_11:
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   8582..       MOV     ?V0 + 0,DPL
   \   000043   8583..       MOV     ?V0 + 1,DPH
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7C02         MOV     R4,#0x2
   \   00004D   7406         MOV     A,#0x6
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   E9           MOV     A,R1
   \   000059   F5..         MOV     ?V0 + 0,A
    347              if (status == MI_OK)		//通信成功
   \   00005B   7426         MOV     A,#0x26
   \   00005D   65..         XRL     A,?V0 + 0
   \   00005F   7041         JNZ     ??PcdAnticoll_0
    348              {
    349              	for (i=0; i<4; i++)
   \   000061   75..00       MOV     ?V0 + 4,#0x0
    350                   {   
    351                       *(pSnr+i)  = ucComMF522Buf[i];			//读出UID
   \                     ??PcdAnticoll_1:
   \   000064   85..82       MOV     DPL,?V0 + 4
   \   000067   AA82         MOV     R2,DPL
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E582         MOV     A,DPL
   \   000070   2A           ADD     A,R2
   \   000071   F8           MOV     R0,A
   \   000072   E583         MOV     A,DPH
   \   000074   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000077   C0E0         PUSH    A
   \   000079   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00007C   D0E0         POP     A
   \   00007E   F0           MOVX    @DPTR,A
    352                       snr_check ^= ucComMF522Buf[i];
   \   00007F   8882         MOV     DPL,R0
   \   000081   8983         MOV     DPH,R1
   \   000083   E0           MOVX    A,@DPTR
   \   000084   62..         XRL     ?V0 + 2,A
    353          
    354                   }
   \   000086   05..         INC     ?V0 + 4
   \   000088   E5..         MOV     A,?V0 + 4
   \   00008A   C3           CLR     C
   \   00008B   9404         SUBB    A,#0x4
   \   00008D   40D5         JC      ??PcdAnticoll_1
    355                   if (snr_check != ucComMF522Buf[i])
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   E582         MOV     A,DPL
   \   000096   25..         ADD     A,?V0 + 4
   \   000098   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00009B   65..         XRL     A,?V0 + 2
   \   00009D   6003         JZ      ??PcdAnticoll_0
    356                   {   status = MI_ERR;    }
   \   00009F   75..BB       MOV     ?V0 + 0,#-0x45
    357              }
    358              
    359              SetBitMask(CollReg,0x80);
   \                     ??PcdAnticoll_0:
   \   0000A2                ; Setup parameters for call to function SetBitMask
   \   0000A2   7A80         MOV     R2,#-0x80
   \   0000A4   790E         MOV     R1,#0xe
   \   0000A6   12....       LCALL   ??SetBitMask?relay
    360              return status;
   \   0000A9   A9..         MOV     R1,?V0 + 0
   \   0000AB   7414         MOV     A,#0x14
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0                REQUIRE ?Subroutine3
   \   0000B0                ; // Fall through to label ?Subroutine3
    361          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004                REQUIRE ??Subroutine25_0
   \   000004                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EE           MOV     A,R6
   \   000001   2A           ADD     A,R2
   \   000002   F582         MOV     DPL,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
    362          /////////////////////////////////////////////////////////////////////
    363          //用MF522计算CRC16函数
    364          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    365          void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
   \                     CalulateCRC:
    366          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 5,R1
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
    367              unsigned char i,n;
    368              ClearBitMask(DivIrqReg,0x04);
   \   00000F                ; Setup parameters for call to function ClearBitMask
   \   00000F   7A04         MOV     R2,#0x4
   \   000011   7905         MOV     R1,#0x5
   \   000013   12....       LCALL   ?Subroutine7 & 0xFFFF
    369              WriteRawRC(CommandReg,PCD_IDLE);
    370              SetBitMask(FIFOLevelReg,0x80);
    371              for (i=0; i<len; i++)
   \                     ??CrossCallReturnLabel_3:
   \   000016   75..00       MOV     ?V0 + 4,#0x0
   \   000019   8014         SJMP    ??CalulateCRC_0
    372              {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
   \                     ??CalulateCRC_1:
   \   00001B                ; Setup parameters for call to function WriteRawRC
   \   00001B   85....       MOV     ?V0 + 2,?V0 + 4
   \   00001E   EE           MOV     A,R6
   \   00001F   25..         ADD     A,?V0 + 2
   \   000021   F582         MOV     DPL,A
   \   000023   EF           MOV     A,R7
   \   000024   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000027   FA           MOV     R2,A
   \   000028   7909         MOV     R1,#0x9
   \   00002A   12....       LCALL   ??WriteRawRC?relay
   \   00002D   05..         INC     ?V0 + 4
   \                     ??CalulateCRC_0:
   \   00002F   E5..         MOV     A,?V0 + 4
   \   000031   C3           CLR     C
   \   000032   95..         SUBB    A,?V0 + 5
   \   000034   40E5         JC      ??CalulateCRC_1
    373              WriteRawRC(CommandReg, PCD_CALCCRC);
   \   000036                ; Setup parameters for call to function WriteRawRC
   \   000036   7A03         MOV     R2,#0x3
   \   000038   7901         MOV     R1,#0x1
   \   00003A   12....       LCALL   ??WriteRawRC?relay
    374              i = 0xFF;
   \   00003D   75..FF       MOV     ?V0 + 4,#-0x1
    375              do 
    376              {
    377                  n = ReadRawRC(DivIrqReg);
   \                     ??CalulateCRC_2:
   \   000040                ; Setup parameters for call to function ReadRawRC
   \   000040   7905         MOV     R1,#0x5
   \   000042   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000045   F8           MOV     R0,A
    378                  i--;
    379              }
    380              while ((i!=0) && !(n&0x04));
   \   000046   15..         DEC     ?V0 + 4
   \   000048   E5..         MOV     A,?V0 + 4
   \   00004A   6005         JZ      ??CalulateCRC_3
   \   00004C   E8           MOV     A,R0
   \   00004D   A2E2         MOV     C,0xE0 /* A   */.2
   \   00004F   50EF         JNC     ??CalulateCRC_2
    381              pOutData[0] = ReadRawRC(CRCResultRegL);
   \                     ??CalulateCRC_3:
   \   000051                ; Setup parameters for call to function ReadRawRC
   \   000051   7922         MOV     R1,#0x22
   \   000053   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000056   F0           MOVX    @DPTR,A
    382              pOutData[1] = ReadRawRC(CRCResultRegM);
   \   000057                ; Setup parameters for call to function ReadRawRC
   \   000057   7921         MOV     R1,#0x21
   \   000059   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
    383          }
   \   00005E   80..         SJMP    ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ??ReadRawRC?relay
   \   000003   E9           MOV     A,R1
   \   000004   85..82       MOV     DPL,?V0 + 0
   \   000007   85..83       MOV     DPH,?V0 + 1
   \   00000A   22           RET
    384          /////////////////////////////////////////////////////////////////////
    385          //功    能：选定卡片
    386          //参数说明: pSnr[IN]:卡片序列号，4字节
    387          //返    回: 成功返回MI_OK
    388          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          char PcdSelect(unsigned char *pSnr)
   \                     PcdSelect:
    390          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    391              char status;
    392              unsigned char i;
    393              unsigned int  unLen;
    394              unsigned char ucComMF522Buf[MAXRLEN]; 
    395              
    396              ucComMF522Buf[0] = PICC_ANTICOLL1;
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7493         MOV     A,#-0x6d
   \   000011   F0           MOVX    @DPTR,A
    397              ucComMF522Buf[1] = 0x70;
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7470         MOV     A,#0x70
   \   000019   F0           MOVX    @DPTR,A
    398              ucComMF522Buf[6] = 0;
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
    399              for (i=0; i<4; i++)
   \   000021   FE           MOV     R6,A
    400              {
    401              	ucComMF522Buf[i+2] = *(pSnr+i);
   \                     ??PcdSelect_0:
   \   000022   8E82         MOV     DPL,R6
   \   000024   AC82         MOV     R4,DPL
   \   000026   EA           MOV     A,R2
   \   000027   2C           ADD     A,R4
   \   000028   F8           MOV     R0,A
   \   000029   EB           MOV     A,R3
   \   00002A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00002D   C0E0         PUSH    A
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E582         MOV     A,DPL
   \   000036   2C           ADD     A,R4
   \   000037   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00003A   D0E0         POP     A
   \   00003C   F0           MOVX    @DPTR,A
    402              	ucComMF522Buf[6]  ^= *(pSnr+i);
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   7408         MOV     A,#0x8
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   68           XRL     A,R0
   \   00004A   F0           MOVX    @DPTR,A
    403              }
   \   00004B   0E           INC     R6
   \   00004C   EE           MOV     A,R6
   \   00004D   C3           CLR     C
   \   00004E   9404         SUBB    A,#0x4
   \   000050   40D0         JC      ??PcdSelect_0
    404              CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
   \   000052                ; Setup parameters for call to function CalulateCRC
   \   000052   7409         MOV     A,#0x9
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   AC82         MOV     R4,DPL
   \   000059   AD83         MOV     R5,DPH
   \   00005B   7907         MOV     R1,#0x7
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   AA82         MOV     R2,DPL
   \   000064   AB83         MOV     R3,DPH
   \   000066   12....       LCALL   ??CalulateCRC?relay
    405            
    406              ClearBitMask(Status2Reg,0x08);
   \   000069                ; Setup parameters for call to function ClearBitMask
   \   000069   7A08         MOV     R2,#0x8
   \   00006B   7908         MOV     R1,#0x8
   \   00006D   12....       LCALL   ??ClearBitMask?relay
    407          
    408              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
   \   000070                ; Setup parameters for call to function PcdComMF522
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   8582..       MOV     ?V0 + 0,DPL
   \   000079   8583..       MOV     ?V0 + 1,DPH
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   8582..       MOV     ?V0 + 0,DPL
   \   000089   8583..       MOV     ?V0 + 1,DPH
   \   00008C   78..         MOV     R0,#?V0 + 0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   7C09         MOV     R4,#0x9
   \   000093   7406         MOV     A,#0x6
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
    409              
    410              if ((status == MI_OK) && (unLen == 0x18))
   \   00009E   7426         MOV     A,#0x26
   \   0000A0   69           XRL     A,R1
   \   0000A1   700F         JNZ     ??PcdSelect_1
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   6418         XRL     A,#0x18
   \   0000AC   7002         JNZ     ??PcdSelect_2
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \                     ??PcdSelect_2:
   \   0000B0   6002         JZ      ??PcdSelect_3
    411              {   status = MI_OK;  }
    412              else
    413              {   status = MI_ERR;    }
   \                     ??PcdSelect_1:
   \   0000B2   79BB         MOV     R1,#-0x45
    414          
    415              return status;
   \                     ??PcdSelect_3:
   \   0000B4                REQUIRE ?Subroutine4
   \   0000B4                ; // Fall through to label ?Subroutine4
    416          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7414         MOV     A,#0x14
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F02         MOV     R7,#0x2
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET
    417          
    418          /////////////////////////////////////////////////////////////////////
    419          //功    能：验证卡片密码
    420          //参数说明: auth_mode[IN]: 密码验证模式
    421          //                 0x60 = 验证A密钥
    422          //                 0x61 = 验证B密钥 
    423          //          addr[IN]：块地址
    424          //          pKey[IN]：密码
    425          //          pSnr[IN]：卡片序列号，4字节
    426          //返    回: 成功返回MI_OK
    427          /////////////////////////////////////////////////////////////////////               

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    428          char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
   \                     PcdAuthState:
    429          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   741E         MOV     A,#0x1e
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
    430              char status;
    431              unsigned int  unLen;
    432              unsigned char i,ucComMF522Buf[MAXRLEN]; 
    433          
    434              ucComMF522Buf[0] = auth_mode;
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EE           MOV     A,R6
   \   00001C   F0           MOVX    @DPTR,A
    435              ucComMF522Buf[1] = addr;
   \   00001D   7403         MOV     A,#0x3
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   EA           MOV     A,R2
   \   000023   F0           MOVX    @DPTR,A
    436              for (i=0; i<6; i++)
   \   000024   75..00       MOV     ?V0 + 0,#0x0
    437              {    ucComMF522Buf[i+2] = *(pKey+i);   }
   \                     ??PcdAuthState_0:
   \   000027   85..82       MOV     DPL,?V0 + 0
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   EC           MOV     A,R4
   \   00002D   2A           ADD     A,R2
   \   00002E   F582         MOV     DPL,A
   \   000030   ED           MOV     A,R5
   \   000031   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000034   C0E0         PUSH    A
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00003E   D0E0         POP     A
   \   000040   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000043   40E2         JC      ??PcdAuthState_0
    438              for (i=0; i<6; i++)
   \   000045   75..00       MOV     ?V0 + 0,#0x0
    439              {    ucComMF522Buf[i+8] = *(pSnr+i);   }
   \                     ??PcdAuthState_1:
   \   000048   85..82       MOV     DPL,?V0 + 0
   \   00004B   AA82         MOV     R2,DPL
   \   00004D   E8           MOV     A,R0
   \   00004E   2A           ADD     A,R2
   \   00004F   F582         MOV     DPL,A
   \   000051   E9           MOV     A,R1
   \   000052   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000055   C0E0         PUSH    A
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00006A   40DC         JC      ??PcdAuthState_1
    440           //   memcpy(&ucComMF522Buf[2], pKey, 6); 
    441           //   memcpy(&ucComMF522Buf[8], pSnr, 4); 
    442              
    443              status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
   \   00006C                ; Setup parameters for call to function PcdComMF522
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   8582..       MOV     ?V0 + 0,DPL
   \   000075   8583..       MOV     ?V0 + 1,DPH
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   8582..       MOV     ?V0 + 0,DPL
   \   000085   8583..       MOV     ?V0 + 1,DPH
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   7C0C         MOV     R4,#0xc
   \   00008F   7406         MOV     A,#0x6
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   AA82         MOV     R2,DPL
   \   000096   AB83         MOV     R3,DPH
   \   000098   790E         MOV     R1,#0xe
   \   00009A   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV     A,R1
   \   0000A1   F5..         MOV     ?V0 + 0,A
    444              if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
   \   0000A3   7426         MOV     A,#0x26
   \   0000A5   65..         XRL     A,?V0 + 0
   \   0000A7   7009         JNZ     ??PcdAuthState_2
   \   0000A9                ; Setup parameters for call to function ReadRawRC
   \   0000A9   7908         MOV     R1,#0x8
   \   0000AB   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000AE   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000B0   4003         JC      ??PcdAuthState_3
    445              {   status = MI_ERR;   }
   \                     ??PcdAuthState_2:
   \   0000B2   75..BB       MOV     ?V0 + 0,#-0x45
    446              
    447              return status;
   \                     ??PcdAuthState_3:
   \   0000B5   A9..         MOV     R1,?V0 + 0
   \   0000B7   02....       LJMP    ?Subroutine4 & 0xFFFF
    448          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   05..         INC     ?V0 + 0
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   C3           CLR     C
   \   000006   9406         SUBB    A,#0x6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E582         MOV     A,DPL
   \   000002   2A           ADD     A,R2
   \   000003                REQUIRE ??Subroutine24_0
   \   000003                ; // Fall through to label ??Subroutine24_0
    449          
    450          /////////////////////////////////////////////////////////////////////
    451          //功    能：写数据到M1卡一块
    452          //参数说明: addr[IN]：块地址
    453          //          pData[IN]：写入的数据，16字节
    454          //返    回: 成功返回MI_OK
    455          /////////////////////////////////////////////////////////////////////                  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    456          char PcdWrite(unsigned char addr,unsigned char *pData)
   \                     PcdWrite:
    457          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    458              char status;
    459              unsigned int  unLen;
    460              unsigned char i,ucComMF522Buf[MAXRLEN]; 
    461              
    462              ucComMF522Buf[0] = PICC_WRITE;
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   74A0         MOV     A,#-0x60
   \   000015   F0           MOVX    @DPTR,A
    463              ucComMF522Buf[1] = addr;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    464              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
   \   00001D                ; Setup parameters for call to function CalulateCRC
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   AC82         MOV     R4,DPL
   \   000024   AD83         MOV     R5,DPH
   \   000026   7902         MOV     R1,#0x2
   \   000028   E9           MOV     A,R1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   12....       LCALL   ?Subroutine18 & 0xFFFF
    465           
    466              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
    467          
    468              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
   \                     ??CrossCallReturnLabel_16:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 2,DPL
   \   00003A   8583..       MOV     ?V0 + 3,DPH
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C04         MOV     R4,#0x4
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   E9           MOV     A,R1
   \   000050   6426         XRL     A,#0x26
   \   000052   701B         JNZ     ??PcdWrite_0
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6404         XRL     A,#0x4
   \   00005D   7002         JNZ     ??PcdWrite_1
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \                     ??PcdWrite_1:
   \   000061   700C         JNZ     ??PcdWrite_0
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   540F         ANL     A,#0xf
   \   00006B   640A         XRL     A,#0xa
   \   00006D   6005         JZ      ??PcdWrite_2
    469              {   status = MI_ERR;   }
   \                     ??PcdWrite_0:
   \   00006F   79BB         MOV     R1,#-0x45
   \   000071   02....       LJMP    ??PcdWrite_3 & 0xFFFF
    470                  
    471              if (status == MI_OK)
    472              {
    473                  //memcpy(ucComMF522Buf, pData, 16);
    474                  for (i=0; i<16; i++)
   \                     ??PcdWrite_2:
   \   000074   7A00         MOV     R2,#0x0
    475                  {    ucComMF522Buf[i] = *(pData+i);   }
   \                     ??PcdWrite_4:
   \   000076   8A82         MOV     DPL,R2
   \   000078   A882         MOV     R0,DPL
   \   00007A   EE           MOV     A,R6
   \   00007B   28           ADD     A,R0
   \   00007C   F582         MOV     DPL,A
   \   00007E   EF           MOV     A,R7
   \   00007F   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000082   C0E0         PUSH    A
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   E582         MOV     A,DPL
   \   00008B   28           ADD     A,R0
   \   00008C   F582         MOV     DPL,A
   \   00008E   E583         MOV     A,DPH
   \   000090   3400         ADDC    A,#0x0
   \   000092   F583         MOV     DPH,A
   \   000094   D0E0         POP     A
   \   000096   F0           MOVX    @DPTR,A
   \   000097   0A           INC     R2
   \   000098   EA           MOV     A,R2
   \   000099   C3           CLR     C
   \   00009A   9410         SUBB    A,#0x10
   \   00009C   40D8         JC      ??PcdWrite_4
    476                  CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
   \   00009E                ; Setup parameters for call to function CalulateCRC
   \   00009E   7412         MOV     A,#0x12
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   AC82         MOV     R4,DPL
   \   0000A5   AD83         MOV     R5,DPH
   \   0000A7   7910         MOV     R1,#0x10
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL   ?Subroutine18 & 0xFFFF
    477          
    478                  status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
   \                     ??CrossCallReturnLabel_17:
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   7404         MOV     A,#0x4
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   8582..       MOV     ?V0 + 2,DPL
   \   0000BC   8583..       MOV     ?V0 + 3,DPH
   \   0000BF   78..         MOV     R0,#?V0 + 2
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   7C12         MOV     R4,#0x12
   \   0000C6   7406         MOV     A,#0x6
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
    479                  if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
   \   0000D1   7426         MOV     A,#0x26
   \   0000D3   69           XRL     A,R1
   \   0000D4   7099         JNZ     ??PcdWrite_0
   \   0000D6   85..82       MOV     DPL,?XSP + 0
   \   0000D9   85..83       MOV     DPH,?XSP + 1
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   6404         XRL     A,#0x4
   \   0000DF   7002         JNZ     ??PcdWrite_5
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \                     ??PcdWrite_5:
   \   0000E3   708A         JNZ     ??PcdWrite_0
   \   0000E5   7402         MOV     A,#0x2
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   540F         ANL     A,#0xf
   \   0000ED   640A         XRL     A,#0xa
   \   0000EF   6003         JZ      $+5
   \   0000F1   02....       LJMP    ??PcdWrite_0 & 0xFFFF
    480                  {   status = MI_ERR;   }
    481              } 
    482              return status;
   \                     ??PcdWrite_3:
   \   0000F4   7414         MOV     A,#0x14
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F9   7F04         MOV     R7,#0x4
   \   0000FB   02....       LJMP    ?BANKED_LEAVE_XDATA
    483          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   78..         MOV     R0,#?V0 + 2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??CalulateCRC?relay
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007   85..82       MOV     DPL,?XSP + 0
   \   00000A   85..83       MOV     DPH,?XSP + 1
   \   00000D   22           RET
    484          /////////////////////////////////////////////////////////////////////
    485          //功    能：读取M1卡一块数据
    486          //参数说明: addr[IN]：块地址
    487          //          pData[OUT]：读出的数据，16字节
    488          //返    回: 成功返回MI_OK
    489          ///////////////////////////////////////////////////////////////////// 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    490          char PcdRead(unsigned char addr,unsigned char *pData)
   \                     PcdRead:
    491          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    492              char status;
    493              unsigned int  unLen;
    494              unsigned char i,ucComMF522Buf[MAXRLEN]; 
    495          
    496              ucComMF522Buf[0] = PICC_READ;
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7430         MOV     A,#0x30
   \   000015   F0           MOVX    @DPTR,A
    497              ucComMF522Buf[1] = addr;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    498              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
   \   00001D                ; Setup parameters for call to function CalulateCRC
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   AC82         MOV     R4,DPL
   \   000024   AD83         MOV     R5,DPH
   \   000026   7902         MOV     R1,#0x2
   \   000028   E9           MOV     A,R1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   12....       LCALL   ?Subroutine19 & 0xFFFF
    499             
    500              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
   \                     ??CrossCallReturnLabel_18:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C04         MOV     R4,#0x4
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
    501              if ((status == MI_OK) && (unLen == 0x90))
   \   00004F   7426         MOV     A,#0x26
   \   000051   69           XRL     A,R1
   \   000052   7031         JNZ     ??PcdRead_0
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6490         XRL     A,#0x90
   \   00005D   7002         JNZ     ??PcdRead_1
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \                     ??PcdRead_1:
   \   000061   7022         JNZ     ??PcdRead_0
    502           //   {   memcpy(pData, ucComMF522Buf, 16);   }
    503              {
    504                  for (i=0; i<16; i++)
   \   000063   7800         MOV     R0,#0x0
    505                  {    *(pData+i) = ucComMF522Buf[i];   }
   \                     ??PcdRead_2:
   \   000065   8882         MOV     DPL,R0
   \   000067   AA82         MOV     R2,DPL
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E582         MOV     A,DPL
   \   000070   2A           ADD     A,R2
   \   000071   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000074   C0E0         PUSH    A
   \   000076   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000079   D0E0         POP     A
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   08           INC     R0
   \   00007D   E8           MOV     A,R0
   \   00007E   C3           CLR     C
   \   00007F   9410         SUBB    A,#0x10
   \   000081   5004         JNC     ??PcdRead_3
   \   000083   80E0         SJMP    ??PcdRead_2
    506              }
    507              else
    508              {   status = MI_ERR;   }
   \                     ??PcdRead_0:
   \   000085   79BB         MOV     R1,#-0x45
    509              
    510              return status;
   \                     ??PcdRead_3:
   \   000087   02....       LJMP    ?Subroutine2 & 0xFFFF
    511          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   8582..       MOV     ?V0 + 0,DPL
   \   000006   8583..       MOV     ?V0 + 1,DPH
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET
    512          
    513          /////////////////////////////////////////////////////////////////////
    514          //功    能：命令卡片进入休眠状态
    515          //返    回: 成功返回MI_OK
    516          /////////////////////////////////////////////////////////////////////

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    517          char PcdHalt(void)
   \                     PcdHalt:
    518          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    519          //    char status;
    520              unsigned int  unLen;
    521              unsigned char ucComMF522Buf[MAXRLEN]; 
    522          
    523              ucComMF522Buf[0] = PICC_HALT;
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7450         MOV     A,#0x50
   \   000011   F0           MOVX    @DPTR,A
    524              ucComMF522Buf[1] = 0;
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    525              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
   \   000019                ; Setup parameters for call to function CalulateCRC
   \   000019   7404         MOV     A,#0x4
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7902         MOV     R1,#0x2
   \   000024   E9           MOV     A,R1
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine19 & 0xFFFF
    526           	PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
   \                     ??CrossCallReturnLabel_19:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   8582..       MOV     ?V0 + 0,DPL
   \   000036   8583..       MOV     ?V0 + 1,DPH
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7C04         MOV     R4,#0x4
   \   000040   7406         MOV     A,#0x6
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
    527             // status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
    528          
    529              return MI_OK;
   \   00004B   7926         MOV     R1,#0x26
   \   00004D   02....       LJMP    ?Subroutine4 & 0xFFFF
    530          }
    531          
    532          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          void IC_CMT(uchar *UID,uchar *KEY,uchar RW,char *Dat)
   \                     IC_CMT:
    534          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   89..         MOV     ?V0 + 4,R1
   \   000014   742D         MOV     A,#0x2d
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FF           MOV     R7,A
    535            uchar status = 0xab;
    536            uchar qq[16]=0;//IC卡的类型
                                ^
Warning[Pe520]: initialization with "{...}" expected for aggregate object
   \   00001E   7410         MOV     A,#0x10
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   AC82         MOV     R4,DPL
   \   000025   AD83         MOV     R5,DPH
   \   000027   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00002A   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00002D   7410         MOV     A,#0x10
   \   00002F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    537            uchar IC_uid[16]=0;//IC卡的UID
                                    ^
Warning[Pe520]: initialization with "{...}" expected for aggregate object
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   AC82         MOV     R4,DPL
   \   00003A   AD83         MOV     R5,DPH
   \   00003C   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00003F   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   000042   7410         MOV     A,#0x10
   \   000044   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    538            
    539            UartSend(PcdRequest(0x52,qq));//寻卡
   \   000047                ; Setup parameters for call to function UartSend
   \   000047                ; Setup parameters for call to function PcdRequest
   \   000047   7410         MOV     A,#0x10
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   7952         MOV     R1,#0x52
   \   000052   12....       LCALL   ??PcdRequest?relay
   \   000055   12....       LCALL   ??UartSend?relay
    540            UartSend(PcdAnticoll(IC_uid));//防冲撞
   \   000058                ; Setup parameters for call to function UartSend
   \   000058                ; Setup parameters for call to function PcdAnticoll
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   12....       LCALL   ??PcdAnticoll?relay
   \   000065   12....       LCALL   ??UartSend?relay
    541            
    542            UartSend(PcdSelect(UID));//选定卡
   \   000068                ; Setup parameters for call to function UartSend
   \   000068                ; Setup parameters for call to function PcdSelect
   \   000068   AA..         MOV     R2,?V0 + 2
   \   00006A   AB..         MOV     R3,?V0 + 3
   \   00006C   12....       LCALL   ??PcdSelect?relay
   \   00006F   12....       LCALL   ??UartSend?relay
    543            
    544            UartSend(PcdAuthState(0x60,0x10,KEY,UID));//校验
   \   000072                ; Setup parameters for call to function UartSend
   \   000072                ; Setup parameters for call to function PcdAuthState
   \   000072   78..         MOV     R0,#?V0 + 2
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   AC..         MOV     R4,?V0 + 0
   \   000079   AD..         MOV     R5,?V0 + 1
   \   00007B   7A10         MOV     R2,#0x10
   \   00007D   7960         MOV     R1,#0x60
   \   00007F   12....       LCALL   ??PcdAuthState?relay
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   \   000087   12....       LCALL   ??UartSend?relay
    545             if(RW)//读写选择，1是读，0是写
   \   00008A   E5..         MOV     A,?V0 + 4
   \   00008C   600B         JZ      ??IC_CMT_0
    546             {
    547               UartSend (PcdRead(0x10,Dat));
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00008E                ; Setup parameters for call to function UartSend
   \   00008E                ; Setup parameters for call to function PcdRead
   \   00008E   EE           MOV     A,R6
   \   00008F   FA           MOV     R2,A
   \   000090   EF           MOV     A,R7
   \   000091   FB           MOV     R3,A
   \   000092   7910         MOV     R1,#0x10
   \   000094   12....       LCALL   ??PcdRead?relay
   \   000097   8009         SJMP    ??IC_CMT_1
    548             }
    549             else 
    550             {
    551              UartSend(PcdWrite(0x10,Dat));
                                            ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

    uchar status = 0xab;
          ^
"D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\IC_w_r.c",535  Warning[Pe177]: 
          variable "status" was declared but never referenced
   \                     ??IC_CMT_0:
   \   000099                ; Setup parameters for call to function UartSend
   \   000099                ; Setup parameters for call to function PcdWrite
   \   000099   EE           MOV     A,R6
   \   00009A   FA           MOV     R2,A
   \   00009B   EF           MOV     A,R7
   \   00009C   FB           MOV     R3,A
   \   00009D   7910         MOV     R1,#0x10
   \   00009F   12....       LCALL   ??PcdWrite?relay
   \                     ??IC_CMT_1:
   \   0000A2   12....       LCALL   ??UartSend?relay
    552             } 
    553             UartSend(PcdHalt());
   \   0000A5                ; Setup parameters for call to function UartSend
   \   0000A5                ; Setup parameters for call to function PcdHalt
   \   0000A5   12....       LCALL   ??PcdHalt?relay
   \   0000A8   12....       LCALL   ??UartSend?relay
    554          }
   \   0000AB   7420         MOV     A,#0x20
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   7F05         MOV     R7,#0x5
   \   0000B2   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_I_1us?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_I_1us

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SPIWriteByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SPIWriteByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SPIReadByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SPIReadByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadRawRC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadRawRC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??WriteRawRC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WriteRawRC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetBitMask?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetBitMask

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ClearBitMask?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ClearBitMask

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAntennaOn?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAntennaOn

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAntennaOff?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAntennaOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??M500PcdConfigISOType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    M500PcdConfigISOType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdComMF522?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdComMF522

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAnticoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAnticoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CalulateCRC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CalulateCRC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdSelect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdSelect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAuthState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAuthState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdWrite?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdHalt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdHalt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IC_CMT?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IC_CMT

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   Maximum stack usage in bytes:

     Function             ISTACK PSTACK XSTACK
     --------             ------ ------ ------
     CalulateCRC              1      0     46
       -> ClearBitMask        0      0     28
       -> WriteRawRC          0      0     28
       -> SetBitMask          0      0     28
       -> WriteRawRC          0      0     28
       -> WriteRawRC          0      0     28
       -> ReadRawRC           0      0     28
       -> ReadRawRC           0      0     28
       -> ReadRawRC           0      0     28
     ClearBitMask             0      0     43
       -> ReadRawRC           0      0     18
       -> WriteRawRC          0      0     18
     Delay_I_1us              0      0      9
     IC_CMT                   2      0     49
       -> PcdRequest          0      0     90
       -> UartSend            0      0     90
       -> PcdAnticoll         0      0     90
       -> UartSend            0      0     90
       -> PcdSelect           0      0     90
       -> UartSend            0      0     90
       -> PcdAuthState        0      0     94
       -> UartSend            0      0     90
       -> PcdRead             0      0     90
       -> UartSend            0      0     90
       -> PcdWrite            0      0     90
       -> UartSend            0      0     90
       -> PcdHalt             0      0     90
       -> UartSend            0      0     90
     M500PcdConfigISOType     0      0      9
       -> ClearBitMask        0      0     18
       -> WriteRawRC          0      0     18
       -> WriteRawRC          0      0     18
       -> WriteRawRC          0      0     18
       -> WriteRawRC          0      0     18
       -> WriteRawRC          0      0     18
       -> WriteRawRC          0      0     18
       -> WriteRawRC          0      0     18
       -> Delay_I_1us         0      0     18
       -> PcdAntennaOn        0      0     18
     PcdAntennaOff            2      0      0
       -> ClearBitMask        4      0      0
     PcdAntennaOn             2      0      9
       -> ReadRawRC           4      0      0
       -> SetBitMask          4      0      0
     PcdAnticoll              1      0     83
       -> ClearBitMask        0      0     68
       -> WriteRawRC          0      0     68
       -> ClearBitMask        0      0     68
       -> PcdComMF522         0      0     76
       -> SetBitMask          0      0     68
     PcdAuthState             1      0     81
       -> PcdComMF522         0      0     68
       -> ReadRawRC           0      0     60
     PcdComMF522              1      0     60
       -> WriteRawRC          0      0     44
       -> ClearBitMask        0      0     44
       -> WriteRawRC          0      0     44
       -> SetBitMask          0      0     44
       -> WriteRawRC          0      0     44
       -> WriteRawRC          0      0     44
       -> SetBitMask          0      0     44
       -> ReadRawRC           0      0     44
       -> ClearBitMask        0      0     44
       -> ReadRawRC           0      0     44
       -> ReadRawRC           0      0     44
       -> ReadRawRC           0      0     44
       -> ReadRawRC           0      0     44
       -> SetBitMask          0      0     44
       -> WriteRawRC          0      0     44
     PcdHalt                  0      0     79
       -> CalulateCRC         0      0     60
       -> PcdComMF522         0      0     68
     PcdRead                  1      0     80
       -> CalulateCRC         0      0     62
       -> PcdComMF522         0      0     70
     PcdRequest               1      0     80
       -> ClearBitMask        0      0     62
       -> WriteRawRC          0      0     62
       -> SetBitMask          0      0     62
       -> PcdComMF522         0      0     70
     PcdReset                 2      0      0
       -> Delay_I_1us         4      0      0
       -> Delay_I_1us         4      0      0
       -> Delay_I_1us         4      0      0
       -> WriteRawRC          4      0      0
       -> ReadRawRC           4      0      0
       -> Delay_I_1us         4      0      0
       -> WriteRawRC          4      0      0
       -> WriteRawRC          4      0      0
       -> WriteRawRC          4      0      0
       -> WriteRawRC          4      0      0
       -> WriteRawRC          4      0      0
       -> WriteRawRC          4      0      0
     PcdSelect                1      0     79
       -> CalulateCRC         0      0     60
       -> ClearBitMask        0      0     60
       -> PcdComMF522         0      0     68
     PcdWrite                 1      0     81
       -> CalulateCRC         0      0     64
       -> PcdComMF522         0      0     72
       -> CalulateCRC         0      0     64
       -> PcdComMF522         0      0     72
     ReadRawRC                0      0     39
       -> SPIWriteByte        0      0     18
       -> SPIReadByte         0      0     18
     SPIReadByte              0      0     18
       -> Delay_I_1us         0      0     18
       -> Delay_I_1us         0      0     18
       -> Delay_I_1us         0      0     18
     SPIWriteByte             0      0     18
       -> Delay_I_1us         0      0     18
       -> Delay_I_1us         0      0     18
       -> Delay_I_1us         0      0     18
     SetBitMask               0      0     43
       -> ReadRawRC           0      0     18
       -> WriteRawRC          0      0     18
     WriteRawRC               0      0     43
       -> SPIWriteByte        0      0     18
       -> SPIWriteByte        0      0     18


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     _A_P0                           1
     _A_P2                           1
     Delay_I_1us                    24
     SPIWriteByte                   44
     ?Subroutine9                   15
     ??Subroutine21_0                5
     SPIReadByte                    41
     ReadRawRC                      19
     ?Subroutine5                    4
     WriteRawRC                     27
     ?Subroutine1                    6
     SetBitMask                     14
     ?Subroutine11                   1
     ??Subroutine22_0                5
     ClearBitMask                   15
     PcdAntennaOn                   20
     ?Subroutine0                    7
     PcdAntennaOff                  13
     PcdReset                       70
     ?Subroutine6                   32
     M500PcdConfigISOType           53
     PcdComMF522                   408
     ?Subroutine7                   18
     PcdRequest                    126
     ?Subroutine2                   10
     ?Subroutine15                  16
     ?Subroutine14                   6
     ??Subroutine23_0                6
     PcdAnticoll                   176
     ?Subroutine3                    5
     ?Subroutine13                   9
     ?Subroutine8                    4
     ??Subroutine25_0                6
     ?Subroutine17                  10
     CalulateCRC                    96
     ?Subroutine10                  11
     PcdSelect                     180
     ?Subroutine4                   10
     ??Subroutine24_0               11
     PcdAuthState                  186
     ?Subroutine16                   9
     ?Subroutine12                   3
     PcdWrite                      254
     ?Subroutine18                  12
     ?Subroutine20                  14
     PcdRead                       138
     ?Subroutine19                  12
     PcdHalt                        80
     IC_CMT                        181
     ??Delay_I_1us?relay             6
     ??SPIWriteByte?relay            6
     ??SPIReadByte?relay             6
     ??ReadRawRC?relay               6
     ??WriteRawRC?relay              6
     ??SetBitMask?relay              6
     ??ClearBitMask?relay            6
     ??PcdAntennaOn?relay            6
     ??PcdAntennaOff?relay           6
     ??PcdReset?relay                6
     ??M500PcdConfigISOType?relay    6
     ??PcdComMF522?relay             6
     ??PcdRequest?relay              6
     ??PcdAnticoll?relay             6
     ??CalulateCRC?relay             6
     ??PcdSelect?relay               6
     ??PcdAuthState?relay            6
     ??PcdWrite?relay                6
     ??PcdRead?relay                 6
     ??PcdHalt?relay                 6
     ??IC_CMT?relay                  6
     ?<Constant {0}>                16
     ?<Constant {0}>_1              16

 
 2 412 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
    32 bytes in segment XDATA_ROM_C
 
 2 538 bytes of CODE  memory
    32 bytes of CONST memory
     0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: 6
