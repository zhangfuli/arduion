///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Jun/2018  11:39:46 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P /
//                          rojects\zstack\Utilities\SerialApp\Source\IC_w_r. /
//                          c                                                 /
//    Command line       =  -f "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-25 /
//                          1a\Projects\zstack\Utilities\SerialApp\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ  /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-25 /
//                          1a\Projects\zstack\Utilities\SerialApp\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wConfig.cfg"             /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x02000000         /
//                          -DZDAPP_CONFIG_PAN_ID=0x1688                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\安连德\第6章           /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\Source\IC_w_r.c" -D            /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          LCD_SUPPORTED -lC "D:\安连德\第6章                /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\CoordinatorEB\List\"  /
//                          -lA "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-2 /
//                          51a\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          CoordinatorEB\List\" --diag_suppress Pe001,Pa010  /
//                          -o "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-25 /
//                          1a\Projects\zstack\Utilities\SerialApp\CC2530DB\C /
//                          oordinatorEB\Obj\" -e --no_code_motion --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\安连德\第6章          /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\" -I                  /
//                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\S /
//                          ource\" -I "D:\安连德\第6章                       /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\ZMain\TI2530 /
//                          DB\" -I "D:\安连德\第6章                          /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\include\" -I "D:\安连德\第6章            /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\target\CC2530EB\" -I "D:\安连德\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\include\" -I "D:\安连德\第6章            /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\high_level\" -I "D:\安连德\第6章         /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\" -I "D:\安连德\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\single_chip\" -I         /
//                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\Components\mt\" -I "D:\安连德\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\osal\include\" -I "D:\安连德\第6章           /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\saddr\" -I "D:\安连德\第6章         /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\sdata\" -I "D:\安连德\第6章         /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\af\" -I "D:\安连德\第6章               /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\nwk\" -I "D:\安连德\第6章              /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sapi\" -I "D:\安连德\第6章             /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sec\" -I "D:\安连德\第6章              /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sys\" -I "D:\安连德\第6章              /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\zdo\" -I "D:\安连德\第6章              /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\" -I "D:\安连德\第6章                   /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\f8w\" -Ohz                              /
//    List file          =  D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P /
//                          rojects\zstack\Utilities\SerialApp\CC2530DB\Coord /
//                          inatorEB\List\IC_w_r.s51                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME IC_w_r

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?POP_BIT_ISP
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??CalulateCRC?relay
        FUNCTION ??CalulateCRC?relay,0203H
        PUBLIC ??ClearBitMask?relay
        FUNCTION ??ClearBitMask?relay,0203H
        PUBLIC ??Delay_I_1us?relay
        FUNCTION ??Delay_I_1us?relay,0203H
        PUBLIC ??IC_CMT?relay
        FUNCTION ??IC_CMT?relay,0203H
        PUBLIC ??M500PcdConfigISOType?relay
        FUNCTION ??M500PcdConfigISOType?relay,0203H
        PUBLIC ??PcdAntennaOff?relay
        FUNCTION ??PcdAntennaOff?relay,0203H
        PUBLIC ??PcdAntennaOn?relay
        FUNCTION ??PcdAntennaOn?relay,0203H
        PUBLIC ??PcdAnticoll?relay
        FUNCTION ??PcdAnticoll?relay,0203H
        PUBLIC ??PcdAuthState?relay
        FUNCTION ??PcdAuthState?relay,0203H
        PUBLIC ??PcdComMF522?relay
        FUNCTION ??PcdComMF522?relay,0203H
        PUBLIC ??PcdHalt?relay
        FUNCTION ??PcdHalt?relay,0203H
        PUBLIC ??PcdRead?relay
        FUNCTION ??PcdRead?relay,0203H
        PUBLIC ??PcdRequest?relay
        FUNCTION ??PcdRequest?relay,0203H
        PUBLIC ??PcdReset?relay
        FUNCTION ??PcdReset?relay,0203H
        PUBLIC ??PcdSelect?relay
        FUNCTION ??PcdSelect?relay,0203H
        PUBLIC ??PcdWrite?relay
        FUNCTION ??PcdWrite?relay,0203H
        PUBLIC ??ReadRawRC?relay
        FUNCTION ??ReadRawRC?relay,0203H
        PUBLIC ??SPIReadByte?relay
        FUNCTION ??SPIReadByte?relay,0203H
        PUBLIC ??SPIWriteByte?relay
        FUNCTION ??SPIWriteByte?relay,0203H
        PUBLIC ??SetBitMask?relay
        FUNCTION ??SetBitMask?relay,0203H
        PUBLIC ??WriteRawRC?relay
        FUNCTION ??WriteRawRC?relay,0203H
        PUBLIC CalulateCRC
        FUNCTION CalulateCRC,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ClearBitMask
        FUNCTION ClearBitMask,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Delay_I_1us
        FUNCTION Delay_I_1us,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC IC_CMT
        FUNCTION IC_CMT,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC M500PcdConfigISOType
        FUNCTION M500PcdConfigISOType,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC PcdAntennaOff
        FUNCTION PcdAntennaOff,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC PcdAntennaOn
        FUNCTION PcdAntennaOn,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC PcdAnticoll
        FUNCTION PcdAnticoll,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC PcdAuthState
        FUNCTION PcdAuthState,021203H
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC PcdComMF522
        FUNCTION PcdComMF522,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC PcdHalt
        FUNCTION PcdHalt,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 34, STACK
        PUBLIC PcdRead
        FUNCTION PcdRead,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC PcdRequest
        FUNCTION PcdRequest,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC PcdReset
        FUNCTION PcdReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC PcdSelect
        FUNCTION PcdSelect,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC PcdWrite
        FUNCTION PcdWrite,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC ReadRawRC
        FUNCTION ReadRawRC,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SPIReadByte
        FUNCTION SPIReadByte,021201H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SPIWriteByte
        FUNCTION SPIWriteByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SetBitMask
        FUNCTION SetBitMask,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC WriteRawRC
        FUNCTION WriteRawRC,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_P0
        PUBWEAK _A_P2
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
UartSend            SYMBOL "UartSend"
??UartSend?relay    SYMBOL "?relay", UartSend
CalulateCRC         SYMBOL "CalulateCRC"
??CalulateCRC?relay SYMBOL "?relay", CalulateCRC
ClearBitMask        SYMBOL "ClearBitMask"
??ClearBitMask?relay SYMBOL "?relay", ClearBitMask
Delay_I_1us         SYMBOL "Delay_I_1us"
??Delay_I_1us?relay SYMBOL "?relay", Delay_I_1us
IC_CMT              SYMBOL "IC_CMT"
??IC_CMT?relay      SYMBOL "?relay", IC_CMT
M500PcdConfigISOType SYMBOL "M500PcdConfigISOType"
??M500PcdConfigISOType?relay SYMBOL "?relay", M500PcdConfigISOType
PcdAntennaOff       SYMBOL "PcdAntennaOff"
??PcdAntennaOff?relay SYMBOL "?relay", PcdAntennaOff
PcdAntennaOn        SYMBOL "PcdAntennaOn"
??PcdAntennaOn?relay SYMBOL "?relay", PcdAntennaOn
PcdAnticoll         SYMBOL "PcdAnticoll"
??PcdAnticoll?relay SYMBOL "?relay", PcdAnticoll
PcdAuthState        SYMBOL "PcdAuthState"
??PcdAuthState?relay SYMBOL "?relay", PcdAuthState
PcdComMF522         SYMBOL "PcdComMF522"
??PcdComMF522?relay SYMBOL "?relay", PcdComMF522
PcdHalt             SYMBOL "PcdHalt"
??PcdHalt?relay     SYMBOL "?relay", PcdHalt
PcdRead             SYMBOL "PcdRead"
??PcdRead?relay     SYMBOL "?relay", PcdRead
PcdRequest          SYMBOL "PcdRequest"
??PcdRequest?relay  SYMBOL "?relay", PcdRequest
PcdReset            SYMBOL "PcdReset"
??PcdReset?relay    SYMBOL "?relay", PcdReset
PcdSelect           SYMBOL "PcdSelect"
??PcdSelect?relay   SYMBOL "?relay", PcdSelect
PcdWrite            SYMBOL "PcdWrite"
??PcdWrite?relay    SYMBOL "?relay", PcdWrite
ReadRawRC           SYMBOL "ReadRawRC"
??ReadRawRC?relay   SYMBOL "?relay", ReadRawRC
SPIReadByte         SYMBOL "SPIReadByte"
??SPIReadByte?relay SYMBOL "?relay", SPIReadByte
SPIWriteByte        SYMBOL "SPIWriteByte"
??SPIWriteByte?relay SYMBOL "?relay", SPIWriteByte
SetBitMask          SYMBOL "SetBitMask"
??SetBitMask?relay  SYMBOL "?relay", SetBitMask
WriteRawRC          SYMBOL "WriteRawRC"
??WriteRawRC?relay  SYMBOL "?relay", WriteRawRC

        EXTERN UartSend
        FUNCTION UartSend,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??UartSend?relay
        FUNCTION ??UartSend?relay,00H

// D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\IC_w_r.c
//    1 #include "variable.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1
//    2 #include "rc522.h"
//    3 #include "UART.h"
//    4 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//    5 void Delay_I_1us(unsigned int k)
Delay_I_1us:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Delay_I_1us
        CODE
//    6 {
        ; Saved register size: 0
        ; Auto size: 0
//    7   uint i,j;
//    8   for(i=0;i<k;i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??Delay_I_1us_0
//    9     for(j=0;j<32;j++);
??Delay_I_1us_1:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??Delay_I_1us_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??Delay_I_1us_1
//   10 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   11 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   12 void SPIWriteByte(uchar infor)
SPIWriteByte:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SPIWriteByte
        CODE
//   13 {
        FUNCALL SPIWriteByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SPIWriteByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SPIWriteByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//   14     unsigned int counter;
//   15     for(counter=0;counter<8;counter++)
        MOV     R6,#0x8
//   16     {
//   17       
//   18       if(infor&0x80)
??SPIWriteByte_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        JNC     ??SPIWriteByte_1
//   19         IC_MOSI = 1;
        SETB    0x80.6
        SJMP    ??SPIWriteByte_2
//   20       else 
//   21         IC_MOSI = 0;
??SPIWriteByte_1:
        CLR     0x80.6
//   22       Delay_I_1us(3);
??SPIWriteByte_2:
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//   23       
//   24             IC_SCK = 0;
        CLR     0x80.7
//   25       Delay_I_1us(1);
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x1
        LCALL   ?Subroutine9 & 0xFFFF
//   26       
//   27       
//   28        IC_SCK = 1; 
//   29        Delay_I_1us(3);
//   30        
//   31       
//   32        infor <<= 1; 
??CrossCallReturnLabel_4:
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R7,A
//   33     } 
        DEC     R6
        MOV     A,R6
        JNZ     ??SPIWriteByte_0
//   34 }
        SJMP    ??Subroutine21_0
        CFI EndBlock cfiBlock1
        REQUIRE _A_P0
//   35 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   36 unsigned char SPIReadByte()
SPIReadByte:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SPIReadByte
        CODE
//   37 {
        FUNCALL SPIReadByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SPIReadByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SPIReadByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   38   unsigned int counter;
//   39   unsigned char SPI_Data;
//   40   for(counter=0;counter<8;counter++)
        MOV     R7,#0x8
//   41   {
//   42      SPI_Data<<=1;
??SPIReadByte_0:
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
//   43      
//   44     IC_SCK = 0;
        CLR     0x80.7
//   45     Delay_I_1us(3);  
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//   46        
//   47     
//   48     if(IC_MISO == 1)
        MOV     C,0x80.5
        JNC     ??SPIReadByte_1
//   49       SPI_Data |= 0x01;
        MOV     A,R6
        SETB    0xE0 /* A   */.0
        MOV     R6,A
//   50      Delay_I_1us(2);
??SPIReadByte_1:
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x2
        LCALL   ?Subroutine9 & 0xFFFF
//   51 
//   52         IC_SCK = 1;
//   53     Delay_I_1us(3);  
//   54     
//   55   }
??CrossCallReturnLabel_5:
        DEC     R7
        MOV     A,R7
        JNZ     ??SPIReadByte_0
//   56   return SPI_Data;
        MOV     A,R6
        MOV     R1,A
        SJMP    ??Subroutine21_0
        CFI EndBlock cfiBlock2
        REQUIRE _A_P0
//   57 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
        SETB    0x80.7
        ; Setup parameters for call to function Delay_I_1us
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R2,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??WriteRawRC?relay
        CFI EndBlock cfiBlock6
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//   58 
//   59 /////////////////////////////////////////////////////////////////////
//   60 //功    能：读RC632寄存器
//   61 //参数说明：Address[IN]:寄存器地址
//   62 //返    回：读出的值
//   63 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   64 unsigned char ReadRawRC(unsigned char Address)
ReadRawRC:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ReadRawRC
        CODE
//   65 {
        FUNCALL ReadRawRC, SPIWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadRawRC, SPIReadByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   66     unsigned char ucAddr;
//   67     unsigned char ucResult=0;
//   68 	IC_SDA = 0;
        CLR     0xa0.0
//   69     ucAddr = ((Address<<1)&0x7E)|0x80;//地址变换，SPI的读写地址有要求
//   70 	SPIWriteByte(ucAddr);
        ; Setup parameters for call to function SPIWriteByte
        CLR     C
        RLC     A
        ORL     A,#0x80
        MOV     R1,A
        LCALL   ??SPIWriteByte?relay
//   71 	ucResult=SPIReadByte();
        ; Setup parameters for call to function SPIReadByte
        LCALL   ??SPIReadByte?relay
        CFI EndBlock cfiBlock8
//   72 	IC_SDA = 1;
        REQUIRE ?Subroutine5
        REQUIRE _A_P2
        ; // Fall through to label ?Subroutine5
//   73    return ucResult;
//   74 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        SETB    0xa0.0
        SJMP    ??Subroutine21_0
        CFI EndBlock cfiBlock9
//   75 /////////////////////////////////////////////////////////////////////
//   76 //功    能：写RC632寄存器
//   77 //参数说明：Address[IN]:寄存器地址
//   78 //          value[IN]:写入的值
//   79 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   80 void WriteRawRC(unsigned char Address, unsigned char value)
WriteRawRC:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function WriteRawRC
        CODE
//   81 {  
        FUNCALL WriteRawRC, SPIWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WriteRawRC, SPIWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//   82     unsigned char ucAddr;
//   83          Address <<= 1;
//   84     ucAddr = (Address&0x7e);
//   85      IC_SDA = 0;
        CLR     0xa0.0
//   86 
//   87 	SPIWriteByte(ucAddr);
        ; Setup parameters for call to function SPIWriteByte
        MOV     A,R7
        CLR     C
        RLC     A
        ANL     A,#0x7e
        MOV     R1,A
        LCALL   ??SPIWriteByte?relay
//   88 	SPIWriteByte(value);
        ; Setup parameters for call to function SPIWriteByte
        MOV     A,R6
        MOV     R1,A
        LCALL   ??SPIWriteByte?relay
//   89    IC_SDA = 1;
        SJMP    ?Subroutine5
        CFI EndBlock cfiBlock10
        REQUIRE _A_P2
//   90 }
//   91 
//   92 /////////////////////////////////////////////////////////////////////
//   93 //功    能：置RC522寄存器位
//   94 //参数说明：reg[IN]:寄存器地址
//   95 //          mask[IN]:置位值
//   96 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   97 void SetBitMask(unsigned char reg,unsigned char mask)  
SetBitMask:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function SetBitMask
        CODE
//   98 {
        FUNCALL SetBitMask, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetBitMask, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        LCALL   ?Subroutine11 & 0xFFFF
//   99     char tmp = 0x0;
//  100     tmp = ReadRawRC(reg);
//  101     WriteRawRC(reg,tmp | mask);  // set bit mask
??CrossCallReturnLabel_22:
        ORL     A,R7
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock11
//  102 }
//  103 
//  104 /////////////////////////////////////////////////////////////////////
//  105 //功    能：清RC522寄存器位
//  106 //参数说明：reg[IN]:寄存器地址
//  107 //          mask[IN]:清位值
//  108 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  109 void ClearBitMask(unsigned char reg,unsigned char mask)  
ClearBitMask:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ClearBitMask
        CODE
//  110 {
        FUNCALL ClearBitMask, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearBitMask, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  111     char tmp = 0x0;
//  112     tmp = ReadRawRC(reg);
//  113     WriteRawRC(reg, tmp & ~mask);  // clear bit mask
        ; Setup parameters for call to function WriteRawRC
        MOV     A,R2
        CPL     A
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_23:
        ANL     A,R7
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock12
//  114 } 
//  115 
//  116 
//  117 
//  118 
//  119 /////////////////////////////////////////////////////////////////////
//  120 //开启天线  
//  121 //每次启动或关闭天险发射之间应至少有1ms的间隔
//  122 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  123 void PcdAntennaOn(void)
PcdAntennaOn:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function PcdAntennaOn
        CODE
//  124 {
        FUNCALL PcdAntennaOn, ReadRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAntennaOn, SetBitMask
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  125     unsigned char i;
//  126     i = ReadRawRC(TxControlReg);
//  127     if (!(i & 0x03))
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x14
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_24:
        ANL     A,#0x3
        JNZ     ??PcdAntennaOn_0
//  128     {
//  129         SetBitMask(TxControlReg, 0x03);
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#0x3
        MOV     R1,#0x14
        LCALL   ??SetBitMask?relay
        CFI EndBlock cfiBlock13
//  130     }
//  131 }
??PcdAntennaOn_0:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock14
//  132 
//  133 /////////////////////////////////////////////////////////////////////
//  134 //关闭天线
//  135 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  136 void PcdAntennaOff(void)
PcdAntennaOff:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function PcdAntennaOff
        CODE
//  137 {
        FUNCALL PcdAntennaOff, ClearBitMask
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  138   ClearBitMask(TxControlReg, 0x03);
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x3
        MOV     R1,#0x14
        LCALL   ??ClearBitMask?relay
//  139 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock15
//  140 
//  141 
//  142 /////////////////////////////////////////////////////////////////////
//  143 //功    能：复位RC522
//  144 //返    回: 成功返回MI_OK
//  145 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  146 void PcdReset(void)
PcdReset:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function PcdReset
        CODE
//  147 {
        FUNCALL PcdReset, Delay_I_1us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, Delay_I_1us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, Delay_I_1us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, ReadRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, Delay_I_1us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  148   //PORTD|=(1<<RC522RST);
//  149   IC_RST = 1;
        SETB    0x80.4
//  150   Delay_I_1us(1);
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//  151   //PORTD&=~(1<<RC522RST);
//  152   IC_RST = 0;
        CLR     0x80.4
//  153   Delay_I_1us(1);
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//  154   //PORTD|=(1<<RC522RST);
//  155   IC_RST = 1;
        SETB    0x80.4
//  156   Delay_I_1us(1);
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//  157   WriteRawRC(0x01,0x0f);
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0xf
        MOV     R1,#0x1
        LCALL   ??WriteRawRC?relay
//  158   while(ReadRawRC(0x01)&0x10);
??PcdReset_0:
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x1
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     C,0xE0 /* A   */.4
        JC      ??PcdReset_0
//  159   Delay_I_1us(10);
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//  160   
//  161   WriteRawRC(ModeReg,0x3D);            //定义发送和接收常用模式 和Mifare卡通讯，CRC初始值0x6363
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x3d
        MOV     R1,#0x11
        LCALL   ?Subroutine6 & 0xFFFF
//  162   WriteRawRC(TReloadRegL,30);           //16位定时器低位
//  163   WriteRawRC(TReloadRegH,0);			 //16位定时器高位
//  164   WriteRawRC(TModeReg,0x8D);				//定义内部定时器的设置
//  165   WriteRawRC(TPrescalerReg,0x3E);			//设置定时器分频系数
//  166   WriteRawRC(TxAutoReg,0x40);				//	调制发送信号为100%ASK
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x40
        MOV     R1,#0x15
        LCALL   ??WriteRawRC?relay
//  167   
//  168   
//  169   //return MI_OK;
//  170 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock16
        REQUIRE _A_P0
//  171 
//  172 
//  173 //////////////////////////////////////////////////////////////////////
//  174 //设置RC632的工作方式 
//  175 //////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  176 void M500PcdConfigISOType(unsigned char type)
M500PcdConfigISOType:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function M500PcdConfigISOType
        CODE
//  177 {
        FUNCALL M500PcdConfigISOType, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, PcdAntennaOn
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  178    if (type == 'A')                     //ISO14443_A
        MOV     A,#0x41
        XRL     A,R6
        JNZ     ??M500PcdConfigISOType_0
//  179    { 
//  180        ClearBitMask(Status2Reg,0x08);
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x8
        MOV     R1,#0x8
        LCALL   ??ClearBitMask?relay
//  181        WriteRawRC(ModeReg,0x3D);//3F
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x3d
        MOV     R1,#0x11
        LCALL   ??WriteRawRC?relay
//  182        WriteRawRC(RxSelReg,0x86);//84
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#-0x7a
        MOV     R1,#0x17
        LCALL   ??WriteRawRC?relay
//  183        WriteRawRC(RFCfgReg,0x7F);   //4F
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x7f
        MOV     R1,#0x26
        LCALL   ?Subroutine6 & 0xFFFF
//  184    	   WriteRawRC(TReloadRegL,30);//tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
//  185 	   WriteRawRC(TReloadRegH,0);
//  186        WriteRawRC(TModeReg,0x8D);
//  187 	   WriteRawRC(TPrescalerReg,0x3E);
//  188 	   Delay_I_1us(2);
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//  189        PcdAntennaOn();//开天线
        ; Setup parameters for call to function PcdAntennaOn
        LCALL   ??PcdAntennaOn?relay
//  190    }
//  191  //  else return (-1); 
//  192    
//  193    //return MI_OK;
//  194 }
??M500PcdConfigISOType_0:
        LJMP    ??Subroutine21_0 & 0xFFFF
        CFI EndBlock cfiBlock17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ??WriteRawRC?relay
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x1e
        MOV     R1,#0x2d
        LCALL   ??WriteRawRC?relay
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x0
        MOV     R1,#0x2c
        LCALL   ??WriteRawRC?relay
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#-0x73
        MOV     R1,#0x2a
        LCALL   ??WriteRawRC?relay
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x3e
        MOV     R1,#0x2b
        LCALL   ??WriteRawRC?relay
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
//  195 
//  196 /////////////////////////////////////////////////////////////////////
//  197 //功    能：通过RC522和ISO14443卡通讯
//  198 //参数说明：Command[IN]:RC522命令字
//  199 //          pInData[IN]:通过RC522发送到卡片的数据
//  200 //          InLenByte[IN]:发送数据的字节长度
//  201 //          pOutData[OUT]:接收到的卡片返回数据
//  202 //          *pOutLenBit[OUT]:返回数据的位长度
//  203 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  204 char PcdComMF522(unsigned char Command, 		//RC522命令字
PcdComMF522:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function PcdComMF522
        CODE
//  205                  unsigned char *pInData, 		//通过RC522发送到卡片的数据
//  206                  unsigned char InLenByte,		//发送数据的字节长度
//  207                  unsigned char *pOutData, 		//接收到的卡片返回数据
//  208                  unsigned int  *pOutLenBit)		//返回数据的位长度
//  209 {
        FUNCALL PcdComMF522, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     ?V0 + 4,R4
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  210     char status = MI_ERR;
        MOV     ?V0 + 3,#-0x45
//  211     unsigned char irqEn   = 0x00;
        MOV     ?V0 + 5,#0x0
//  212     unsigned char waitFor = 0x00;
        MOV     ?V0 + 6,#0x0
//  213     unsigned char lastBits;
//  214     unsigned char n;
//  215     unsigned int i;
//  216     switch (Command)
        MOV     A,R1
        ADD     A,#-0xc
        JZ      ??PcdComMF522_0
        ADD     A,#-0x2
        JNZ     ??PcdComMF522_1
//  217     {
//  218        case PCD_AUTHENT:		//Mifare认证
//  219           irqEn   = 0x12;		//允许错误中断请求ErrIEn  允许空闲中断IdleIEn
        MOV     ?V0 + 5,#0x12
//  220           waitFor = 0x10;		//认证寻卡等待时候 查询空闲中断标志位
        MOV     ?V0 + 6,#0x10
//  221           break;
        SJMP    ??PcdComMF522_1
//  222        case PCD_TRANSCEIVE:		//接收发送 发送接收
//  223           irqEn   = 0x77;		//允许TxIEn RxIEn IdleIEn LoAlertIEn ErrIEn TimerIEn
??PcdComMF522_0:
        MOV     ?V0 + 5,#0x77
//  224           waitFor = 0x30;		//寻卡等待时候 查询接收中断标志位与 空闲中断标志位
        MOV     ?V0 + 6,#0x30
//  225           break;
//  226        default:
//  227          break;
//  228     }
//  229    
//  230     WriteRawRC(ComIEnReg,irqEn|0x80);		//IRqInv置位管脚IRQ与Status1Reg的IRq位的值相反 
??PcdComMF522_1:
        ; Setup parameters for call to function WriteRawRC
        MOV     A,#-0x80
        ORL     A,?V0 + 5
        MOV     R2,A
        MOV     R1,#0x2
        LCALL   ??WriteRawRC?relay
//  231     ClearBitMask(ComIrqReg,0x80);			//Set1该位清零时，CommIRqReg的屏蔽位清零
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#-0x80
        MOV     R1,#0x4
        LCALL   ?Subroutine7 & 0xFFFF
//  232     WriteRawRC(CommandReg,PCD_IDLE);		//写空闲命令
//  233     SetBitMask(FIFOLevelReg,0x80);			//置位FlushBuffer清除内部FIFO的读和写指针以及ErrReg的BufferOvfl标志位被清除
//  234     
//  235     for (i=0; i<InLenByte; i++)
??CrossCallReturnLabel_2:
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??PcdComMF522_2
//  236     {   WriteRawRC(FIFODataReg, pInData[i]);    }		//写数据进FIFOdata
??PcdComMF522_3:
        ; Setup parameters for call to function WriteRawRC
        MOV     A,?V0 + 10
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 11
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x9
        LCALL   ??WriteRawRC?relay
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??PcdComMF522_2:
        MOV     ?V0 + 8,?V0 + 4
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 8
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??PcdComMF522_3
//  237     WriteRawRC(CommandReg, Command);					//写命令
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,?V0 + 2
        MOV     R1,#0x1
        LCALL   ??WriteRawRC?relay
//  238    
//  239     
//  240     if (Command == PCD_TRANSCEIVE)
        MOV     A,#0xc
        XRL     A,?V0 + 2
        JNZ     ??PcdComMF522_4
//  241     {    SetBitMask(BitFramingReg,0x80);  }				//StartSend置位启动数据发送 该位与收发命令使用时才有效
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xd
        LCALL   ??SetBitMask?relay
//  242     
//  243     i = 1000;//根据时钟频率调整，操作M1卡最大等待时间25ms
??PcdComMF522_4:
        MOV     R6,#-0x18
        MOV     R7,#0x3
//  244     do 														//认证 与寻卡等待时间	
//  245     {
//  246          n = ReadRawRC(ComIrqReg);							//查询事件中断
??PcdComMF522_5:
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x4
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     ?V0 + 8,A
//  247          i--;
//  248     }
//  249     while ((i!=0) && !(n&0x01) && !(n&waitFor));		//退出条件i=0,定时器中断，与写空闲命令
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      ??PcdComMF522_6
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        JC      ??PcdComMF522_6
        ANL     A,?V0 + 6
        JZ      ??PcdComMF522_5
//  250     ClearBitMask(BitFramingReg,0x80);					//清理允许StartSend位
??PcdComMF522_6:
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xd
        LCALL   ??ClearBitMask?relay
//  251     if (i!=0)
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??PcdComMF522_7 & 0xFFFF
//  252     {    
//  253          if(!(ReadRawRC(ErrorReg)&0x1B))			//读错误标志寄存器BufferOfI CollErr ParityErr ProtocolErr
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x6
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_27:
        ANL     A,#0x1b
        JZ      $+5
        LJMP    ??PcdComMF522_7 & 0xFFFF
//  254          {
//  255              status = MI_OK;
        MOV     ?V0 + 3,#0x26
//  256              if (n & irqEn & 0x01)					//是否发生定时器中断
        MOV     A,?V0 + 5
        MOV     C,0xE0 /* A   */.0
        PUSH    PSW
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 8
        MOV     C,0xE0 /* A   */.0
        MOV     B.0,C
        LCALL   ?POP_BIT_ISP
        DEC     SP
        CFI CFA_SP SP+0
        ANL     C,B.0
        JNC     ??PcdComMF522_8
//  257              {   status = MI_NOTAGERR;   }
        MOV     ?V0 + 3,#-0x34
//  258              if (Command == PCD_TRANSCEIVE)
??PcdComMF522_8:
        MOV     A,#0xc
        XRL     A,?V0 + 2
        JZ      $+5
        LJMP    ??PcdComMF522_7 & 0xFFFF
//  259              {
//  260                	n = ReadRawRC(FIFOLevelReg);			//读FIFO中保存的字节数
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0xa
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     ?V0 + 8,A
//  261               	lastBits = ReadRawRC(ControlReg) & 0x07;	//最后接收到得字节的有效位数
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0xc
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_29:
        ANL     A,#0x7
        MOV     ?V0 + 10,A
//  262                 if (lastBits)
        MOV     ?V0 + 6,?V0 + 8
        JZ      ??PcdComMF522_9
//  263                 {   *pOutLenBit = (n-1)*8 + lastBits;   }	//N个字节数减去1（最后一个字节）+最后一位的位数 读取到的数据总位数
        MOV     A,?V0 + 6
        ADD     A,#-0x1
        MOV     ?V0 + 6,A
        CLR     A
        ADDC    A,#-0x1
        MOV     ?V0 + 7,A
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     A,?V0 + 6
        ADD     A,?V0 + 10
        MOV     R0,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??PcdComMF522_10
//  264                 else
//  265                 {   *pOutLenBit = n*8;   }					//最后接收到的字节整个字节有效
??PcdComMF522_9:
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
??PcdComMF522_10:
        MOVX    @DPTR,A
//  266                 if (n == 0)									
        MOV     A,?V0 + 8
        JNZ     ??PcdComMF522_11
//  267                 {   n = 1;    }
        MOV     ?V0 + 8,#0x1
        SJMP    ??PcdComMF522_12
//  268                 if (n > MAXRLEN)
??PcdComMF522_11:
        CLR     C
        SUBB    A,#0x13
        JC      ??PcdComMF522_12
//  269                 {   n = MAXRLEN;   }
        MOV     ?V0 + 8,#0x12
//  270                 for (i=0; i<n; i++)
??PcdComMF522_12:
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??PcdComMF522_13
//  271                 {   pOutData[i] = ReadRawRC(FIFODataReg);    }
??PcdComMF522_14:
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x9
        LCALL   ??ReadRawRC?relay
        MOV     A,?V0 + 12
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 13
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??PcdComMF522_13:
        MOV     ?V0 + 0,?V0 + 8
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 0
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??PcdComMF522_14
//  272             }
//  273          }
//  274          else
//  275          {   status = MI_ERR;   }
//  276    }
//  277    
//  278    SetBitMask(ControlReg,0x80);           // stop timer now
??PcdComMF522_7:
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xc
        LCALL   ??SetBitMask?relay
//  279    WriteRawRC(CommandReg,PCD_IDLE); 
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??WriteRawRC?relay
//  280    return status;
        MOV     R1,?V0 + 3
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21
//  281 }
//  282 
//  283 /////////////////////////////////////////////////////////////////////
//  284 //功    能：寻卡
//  285 //参数说明: req_code[IN]:寻卡方式
//  286 //                0x52 = 寻感应区内所有符合14443A标准的卡
//  287 //                0x26 = 寻未进入休眠状态的卡
//  288 //          pTagType[OUT]：卡片类型代码
//  289 //                0x4400 = Mifare_UltraLight
//  290 //                0x0400 = Mifare_One(S50)
//  291 //                0x0200 = Mifare_One(S70)
//  292 //                0x0800 = Mifare_Pro(X)
//  293 //                0x4403 = Mifare_DESFire
//  294 //返    回: 成功返回MI_OK
//  295 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  296 char PcdRequest(unsigned char req_code,unsigned char *pTagType)
PcdRequest:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function PcdRequest
        CODE
//  297 {
        FUNCALL PcdRequest, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdRequest, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdRequest, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdRequest, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  298    char status;  
//  299    uint i;
//  300    unsigned int  unLen;
//  301    unsigned char ucComMF522Buf[MAXRLEN]; 
//  302 
//  303    ClearBitMask(Status2Reg,0x08);	//清理指示MIFARECyptol单元接通以及所有卡的数据通信被加密的情况
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x8
        MOV     R1,#0x8
        LCALL   ??ClearBitMask?relay
//  304    WriteRawRC(BitFramingReg,0x07);	//	发送的最后一个字节的 七位
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x7
        MOV     R1,#0xd
        LCALL   ??WriteRawRC?relay
//  305    SetBitMask(TxControlReg,0x03);	//TX1,TX2管脚的输出信号传递经发送调制的13.56的能量载波信号
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#0x3
        MOV     R1,#0x14
        LCALL   ??SetBitMask?relay
//  306 
//  307    ucComMF522Buf[0] = req_code;		//存入 卡片命令字
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        LCALL   ?Subroutine15 & 0xFFFF
//  308 
//  309    status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);	//寻卡    
??CrossCallReturnLabel_10:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  310    if ((status == MI_OK) && (unLen == 0x10))	//寻卡成功返回卡类型 
        MOV     A,#0x26
        XRL     A,R1
        JNZ     ??PcdRequest_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x10
        JNZ     ??PcdRequest_1
        INC     DPTR
        MOVX    A,@DPTR
??PcdRequest_1:
        JNZ     ??PcdRequest_0
//  311    {    
//  312        *pTagType     = ucComMF522Buf[0];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  313        *(pTagType+1) = ucComMF522Buf[1];
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    @DPTR,A
        SJMP    ??PcdRequest_2
//  314    }
//  315    else
//  316    {   
//  317 		status = MI_ERR;
??PcdRequest_0:
        MOV     R1,#-0x45
        CFI EndBlock cfiBlock22
//  318 	}
//  319    
//  320    return status;
??PcdRequest_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  321 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock23
//  322 
//  323 /////////////////////////////////////////////////////////////////////
//  324 //功    能：防冲撞
//  325 //参数说明: pSnr[OUT]:卡片序列号，4字节
//  326 //返    回: 成功返回MI_OK
//  327 /////////////////////////////////////////////////////////////////////  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  328 char PcdAnticoll(unsigned char *pSnr)
PcdAnticoll:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function PcdAnticoll
        CODE
//  329 {
        FUNCALL PcdAnticoll, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAnticoll, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAnticoll, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAnticoll, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAnticoll, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  330     char status;
//  331     unsigned char i,snr_check=0;
        MOV     ?V0 + 2,#0x0
//  332     unsigned int  unLen;
//  333     unsigned char ucComMF522Buf[MAXRLEN]; 
//  334     
//  335 
//  336     ClearBitMask(Status2Reg,0x08);		//清MFCryptol On位 只有成功执行MFAuthent命令后，该位才能置位
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x8
        MOV     R1,#0x8
        LCALL   ??ClearBitMask?relay
//  337     WriteRawRC(BitFramingReg,0x00);		//清理寄存器 停止收发
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x0
        MOV     R1,#0xd
        LCALL   ??WriteRawRC?relay
//  338     ClearBitMask(CollReg,0x80);			//清ValuesAfterColl所有接收的位在冲突后被清除
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xe
        LCALL   ??ClearBitMask?relay
//  339     
//  340   // WriteRawRC(BitFramingReg,0x07);	//	发送的最后一个字节的 七位
//  341   // SetBitMask(TxControlReg,0x03);	//TX1,TX2管脚的输出信号传递经发送调制的13.56的能量载波信号
//  342    
//  343     ucComMF522Buf[0] = 0x93;	//卡片防冲突命令
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x6d
        MOVX    @DPTR,A
//  344     ucComMF522Buf[1] = 0x20;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x20
        LCALL   ?Subroutine15 & 0xFFFF
//  345    
//  346     status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);//与卡片通信
??CrossCallReturnLabel_11:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x2
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R1
        MOV     ?V0 + 0,A
//  347     if (status == MI_OK)		//通信成功
        MOV     A,#0x26
        XRL     A,?V0 + 0
        JNZ     ??PcdAnticoll_0
//  348     {
//  349     	for (i=0; i<4; i++)
        MOV     ?V0 + 4,#0x0
//  350          {   
//  351              *(pSnr+i)  = ucComMF522Buf[i];			//读出UID
??PcdAnticoll_1:
        MOV     DPL,?V0 + 4
        MOV     R2,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R2
        MOV     R0,A
        MOV     A,DPH
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_8:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_14:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  352              snr_check ^= ucComMF522Buf[i];
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     ?V0 + 2,A
//  353 
//  354          }
        INC     ?V0 + 4
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,#0x4
        JC      ??PcdAnticoll_1
//  355          if (snr_check != ucComMF522Buf[i])
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,?V0 + 4
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_47:
        XRL     A,?V0 + 2
        JZ      ??PcdAnticoll_0
//  356          {   status = MI_ERR;    }
        MOV     ?V0 + 0,#-0x45
//  357     }
//  358     
//  359     SetBitMask(CollReg,0x80);
??PcdAnticoll_0:
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xe
        LCALL   ??SetBitMask?relay
//  360     return status;
        MOV     R1,?V0 + 0
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock24
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  361 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function PcdComMF522
        ; Setup parameters for call to function PcdComMF522
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
//  362 /////////////////////////////////////////////////////////////////////
//  363 //用MF522计算CRC16函数
//  364 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  365 void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
CalulateCRC:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function CalulateCRC
        CODE
//  366 {
        FUNCALL CalulateCRC, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 5,R1
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  367     unsigned char i,n;
//  368     ClearBitMask(DivIrqReg,0x04);
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x4
        MOV     R1,#0x5
        LCALL   ?Subroutine7 & 0xFFFF
//  369     WriteRawRC(CommandReg,PCD_IDLE);
//  370     SetBitMask(FIFOLevelReg,0x80);
//  371     for (i=0; i<len; i++)
??CrossCallReturnLabel_3:
        MOV     ?V0 + 4,#0x0
        SJMP    ??CalulateCRC_0
//  372     {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
??CalulateCRC_1:
        ; Setup parameters for call to function WriteRawRC
        MOV     ?V0 + 2,?V0 + 4
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     R2,A
        MOV     R1,#0x9
        LCALL   ??WriteRawRC?relay
        INC     ?V0 + 4
??CalulateCRC_0:
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,?V0 + 5
        JC      ??CalulateCRC_1
//  373     WriteRawRC(CommandReg, PCD_CALCCRC);
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x3
        MOV     R1,#0x1
        LCALL   ??WriteRawRC?relay
//  374     i = 0xFF;
        MOV     ?V0 + 4,#-0x1
//  375     do 
//  376     {
//  377         n = ReadRawRC(DivIrqReg);
??CalulateCRC_2:
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x5
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     R0,A
//  378         i--;
//  379     }
//  380     while ((i!=0) && !(n&0x04));
        DEC     ?V0 + 4
        MOV     A,?V0 + 4
        JZ      ??CalulateCRC_3
        MOV     A,R0
        MOV     C,0xE0 /* A   */.2
        JNC     ??CalulateCRC_2
//  381     pOutData[0] = ReadRawRC(CRCResultRegL);
??CalulateCRC_3:
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x22
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_6:
        MOVX    @DPTR,A
//  382     pOutData[1] = ReadRawRC(CRCResultRegM);
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x21
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_7:
        INC     DPTR
        MOVX    @DPTR,A
//  383 }
        SJMP    ?Subroutine3
        CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        MOV     R7,A
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function ReadRawRC
        ; Setup parameters for call to function ReadRawRC
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond34) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond34) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond34) CFA_SP SP+-5
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        LCALL   ??ReadRawRC?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        LCALL   ??ReadRawRC?relay
        MOV     A,R1
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        LCALL   ??ClearBitMask?relay
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??WriteRawRC?relay
        ; Setup parameters for call to function SetBitMask
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xa
        LCALL   ??SetBitMask?relay
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49
//  384 /////////////////////////////////////////////////////////////////////
//  385 //功    能：选定卡片
//  386 //参数说明: pSnr[IN]:卡片序列号，4字节
//  387 //返    回: 成功返回MI_OK
//  388 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  389 char PcdSelect(unsigned char *pSnr)
PcdSelect:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function PcdSelect
        CODE
//  390 {
        FUNCALL PcdSelect, CalulateCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdSelect, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdSelect, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  391     char status;
//  392     unsigned char i;
//  393     unsigned int  unLen;
//  394     unsigned char ucComMF522Buf[MAXRLEN]; 
//  395     
//  396     ucComMF522Buf[0] = PICC_ANTICOLL1;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x6d
        MOVX    @DPTR,A
//  397     ucComMF522Buf[1] = 0x70;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x70
        MOVX    @DPTR,A
//  398     ucComMF522Buf[6] = 0;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  399     for (i=0; i<4; i++)
        MOV     R6,A
//  400     {
//  401     	ucComMF522Buf[i+2] = *(pSnr+i);
??PcdSelect_0:
        MOV     DPL,R6
        MOV     R4,DPL
        MOV     A,R2
        ADD     A,R4
        MOV     R0,A
        MOV     A,R3
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_9:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R4
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_40:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  402     	ucComMF522Buf[6]  ^= *(pSnr+i);
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        MOVX    @DPTR,A
//  403     }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??PcdSelect_0
//  404     CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
        ; Setup parameters for call to function CalulateCRC
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x7
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??CalulateCRC?relay
//  405   
//  406     ClearBitMask(Status2Reg,0x08);
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x8
        MOV     R1,#0x8
        LCALL   ??ClearBitMask?relay
//  407 
//  408     status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
        ; Setup parameters for call to function PcdComMF522
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x9
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  409     
//  410     if ((status == MI_OK) && (unLen == 0x18))
        MOV     A,#0x26
        XRL     A,R1
        JNZ     ??PcdSelect_1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x18
        JNZ     ??PcdSelect_2
        INC     DPTR
        MOVX    A,@DPTR
??PcdSelect_2:
        JZ      ??PcdSelect_3
//  411     {   status = MI_OK;  }
//  412     else
//  413     {   status = MI_ERR;    }
??PcdSelect_1:
        MOV     R1,#-0x45
        CFI EndBlock cfiBlock50
//  414 
//  415     return status;
??PcdSelect_3:
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  416 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0xc
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        LCALL   ??PcdComMF522?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71
//  417 
//  418 /////////////////////////////////////////////////////////////////////
//  419 //功    能：验证卡片密码
//  420 //参数说明: auth_mode[IN]: 密码验证模式
//  421 //                 0x60 = 验证A密钥
//  422 //                 0x61 = 验证B密钥 
//  423 //          addr[IN]：块地址
//  424 //          pKey[IN]：密码
//  425 //          pSnr[IN]：卡片序列号，4字节
//  426 //返    回: 成功返回MI_OK
//  427 /////////////////////////////////////////////////////////////////////               

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  428 char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
PcdAuthState:
        CFI Block cfiBlock72 Using cfiCommon0
        CFI Function PcdAuthState
        CODE
//  429 {
        FUNCALL PcdAuthState, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAuthState, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        MOV     R6,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//  430     char status;
//  431     unsigned int  unLen;
//  432     unsigned char i,ucComMF522Buf[MAXRLEN]; 
//  433 
//  434     ucComMF522Buf[0] = auth_mode;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  435     ucComMF522Buf[1] = addr;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  436     for (i=0; i<6; i++)
        MOV     ?V0 + 0,#0x0
//  437     {    ucComMF522Buf[i+2] = *(pKey+i);   }
??PcdAuthState_0:
        MOV     DPL,?V0 + 0
        MOV     R2,DPL
        MOV     A,R4
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R5
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_44:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_41:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_12:
        JC      ??PcdAuthState_0
//  438     for (i=0; i<6; i++)
        MOV     ?V0 + 0,#0x0
//  439     {    ucComMF522Buf[i+8] = *(pSnr+i);   }
??PcdAuthState_1:
        MOV     DPL,?V0 + 0
        MOV     R2,DPL
        MOV     A,R0
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R1
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_45:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_42:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_13:
        JC      ??PcdAuthState_1
//  440  //   memcpy(&ucComMF522Buf[2], pKey, 6); 
//  441  //   memcpy(&ucComMF522Buf[8], pSnr, 4); 
//  442     
//  443     status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
        ; Setup parameters for call to function PcdComMF522
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0xc
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0xe
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        MOV     ?V0 + 0,A
//  444     if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
        MOV     A,#0x26
        XRL     A,?V0 + 0
        JNZ     ??PcdAuthState_2
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x8
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     C,0xE0 /* A   */.3
        JC      ??PcdAuthState_3
//  445     {   status = MI_ERR;   }
??PcdAuthState_2:
        MOV     ?V0 + 0,#-0x45
//  446     
//  447     return status;
??PcdAuthState_3:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock72
//  448 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOVX    @DPTR,A
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x6
        RET
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+-1
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOV     A,DPL
        ADD     A,R2
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiCond79 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+-1
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+-1
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82
//  449 
//  450 /////////////////////////////////////////////////////////////////////
//  451 //功    能：写数据到M1卡一块
//  452 //参数说明: addr[IN]：块地址
//  453 //          pData[IN]：写入的数据，16字节
//  454 //返    回: 成功返回MI_OK
//  455 /////////////////////////////////////////////////////////////////////                  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  456 char PcdWrite(unsigned char addr,unsigned char *pData)
PcdWrite:
        CFI Block cfiBlock83 Using cfiCommon0
        CFI Function PcdWrite
        CODE
//  457 {
        FUNCALL PcdWrite, CalulateCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdWrite, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdWrite, CalulateCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdWrite, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  458     char status;
//  459     unsigned int  unLen;
//  460     unsigned char i,ucComMF522Buf[MAXRLEN]; 
//  461     
//  462     ucComMF522Buf[0] = PICC_WRITE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x60
        MOVX    @DPTR,A
//  463     ucComMF522Buf[1] = addr;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  464     CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
        ; Setup parameters for call to function CalulateCRC
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x2
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
//  465  
//  466     status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
//  467 
//  468     if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
??CrossCallReturnLabel_16:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x4
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        XRL     A,#0x26
        JNZ     ??PcdWrite_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??PcdWrite_1
        INC     DPTR
        MOVX    A,@DPTR
??PcdWrite_1:
        JNZ     ??PcdWrite_0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0xf
        XRL     A,#0xa
        JZ      ??PcdWrite_2
//  469     {   status = MI_ERR;   }
??PcdWrite_0:
        MOV     R1,#-0x45
        LJMP    ??PcdWrite_3 & 0xFFFF
//  470         
//  471     if (status == MI_OK)
//  472     {
//  473         //memcpy(ucComMF522Buf, pData, 16);
//  474         for (i=0; i<16; i++)
??PcdWrite_2:
        MOV     R2,#0x0
//  475         {    ucComMF522Buf[i] = *(pData+i);   }
??PcdWrite_4:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_46:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x10
        JC      ??PcdWrite_4
//  476         CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
        ; Setup parameters for call to function CalulateCRC
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x10
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
//  477 
//  478         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
??CrossCallReturnLabel_17:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x12
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  479         if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
        MOV     A,#0x26
        XRL     A,R1
        JNZ     ??PcdWrite_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??PcdWrite_5
        INC     DPTR
        MOVX    A,@DPTR
??PcdWrite_5:
        JNZ     ??PcdWrite_0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0xf
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??PcdWrite_0 & 0xFFFF
//  480         {   status = MI_ERR;   }
//  481     } 
//  482     return status;
??PcdWrite_3:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock83
//  483 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker86 Using cfiCommon1
        CFI (cfiPicker86) NoFunction
        CFI (cfiPicker86) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiPicker86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        MOV     DPL,A
        MOV     A,DPH
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker96 Using cfiCommon1
        CFI (cfiPicker96) NoFunction
        CFI (cfiPicker96) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiPicker96
//  484 /////////////////////////////////////////////////////////////////////
//  485 //功    能：读取M1卡一块数据
//  486 //参数说明: addr[IN]：块地址
//  487 //          pData[OUT]：读出的数据，16字节
//  488 //返    回: 成功返回MI_OK
//  489 ///////////////////////////////////////////////////////////////////// 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  490 char PcdRead(unsigned char addr,unsigned char *pData)
PcdRead:
        CFI Block cfiBlock97 Using cfiCommon0
        CFI Function PcdRead
        CODE
//  491 {
        FUNCALL PcdRead, CalulateCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdRead, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  492     char status;
//  493     unsigned int  unLen;
//  494     unsigned char i,ucComMF522Buf[MAXRLEN]; 
//  495 
//  496     ucComMF522Buf[0] = PICC_READ;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        MOVX    @DPTR,A
//  497     ucComMF522Buf[1] = addr;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  498     CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
        ; Setup parameters for call to function CalulateCRC
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x2
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
//  499    
//  500     status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
??CrossCallReturnLabel_18:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x4
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  501     if ((status == MI_OK) && (unLen == 0x90))
        MOV     A,#0x26
        XRL     A,R1
        JNZ     ??PcdRead_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x90
        JNZ     ??PcdRead_1
        INC     DPTR
        MOVX    A,@DPTR
??PcdRead_1:
        JNZ     ??PcdRead_0
//  502  //   {   memcpy(pData, ucComMF522Buf, 16);   }
//  503     {
//  504         for (i=0; i<16; i++)
        MOV     R0,#0x0
//  505         {    *(pData+i) = ucComMF522Buf[i];   }
??PcdRead_2:
        MOV     DPL,R0
        MOV     R2,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R2
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_48:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_15:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x10
        JNC     ??PcdRead_3
        SJMP    ??PcdRead_2
//  506     }
//  507     else
//  508     {   status = MI_ERR;   }
??PcdRead_0:
        MOV     R1,#-0x45
//  509     
//  510     return status;
??PcdRead_3:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock97
//  511 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+-1
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOV     A,R6
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100
//  512 
//  513 /////////////////////////////////////////////////////////////////////
//  514 //功    能：命令卡片进入休眠状态
//  515 //返    回: 成功返回MI_OK
//  516 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  517 char PcdHalt(void)
PcdHalt:
        CFI Block cfiBlock101 Using cfiCommon0
        CFI Function PcdHalt
        CODE
//  518 {
        FUNCALL PcdHalt, CalulateCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdHalt, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  519 //    char status;
//  520     unsigned int  unLen;
//  521     unsigned char ucComMF522Buf[MAXRLEN]; 
//  522 
//  523     ucComMF522Buf[0] = PICC_HALT;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x50
        MOVX    @DPTR,A
//  524     ucComMF522Buf[1] = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  525     CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
        ; Setup parameters for call to function CalulateCRC
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x2
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
//  526  	PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
??CrossCallReturnLabel_19:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x4
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  527    // status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
//  528 
//  529     return MI_OK;
        MOV     R1,#0x26
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock101
//  530 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond102 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker104 Using cfiCommon1
        CFI (cfiPicker104) NoFunction
        CFI (cfiPicker104) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiPicker104

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond105 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_17
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_18
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_19
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??CalulateCRC?relay
        ; Setup parameters for call to function PcdComMF522
        ; Setup parameters for call to function PcdComMF522
        ; Setup parameters for call to function PcdComMF522
        ; Setup parameters for call to function PcdComMF522
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109
//  531 
//  532 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  533 void IC_CMT(uchar *UID,uchar *KEY,uchar RW,char *Dat)
IC_CMT:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI Function IC_CMT
        CODE
//  534 {
        FUNCALL IC_CMT, PcdRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdAnticoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdSelect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdAuthState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdHalt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     ?V0 + 4,R1
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  535   uchar status = 0xab;
//  536   uchar qq[16]=0;//IC卡的类型
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  537   uchar IC_uid[16]=0;//IC卡的UID
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  538   
//  539   UartSend(PcdRequest(0x52,qq));//寻卡
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdRequest
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x52
        LCALL   ??PcdRequest?relay
        LCALL   ??UartSend?relay
//  540   UartSend(PcdAnticoll(IC_uid));//防冲撞
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdAnticoll
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??PcdAnticoll?relay
        LCALL   ??UartSend?relay
//  541   
//  542   UartSend(PcdSelect(UID));//选定卡
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdSelect
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??PcdSelect?relay
        LCALL   ??UartSend?relay
//  543   
//  544   UartSend(PcdAuthState(0x60,0x10,KEY,UID));//校验
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdAuthState
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,#0x10
        MOV     R1,#0x60
        LCALL   ??PcdAuthState?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 45)
        LCALL   ??UartSend?relay
//  545    if(RW)//读写选择，1是读，0是写
        MOV     A,?V0 + 4
        JZ      ??IC_CMT_0
//  546    {
//  547      UartSend (PcdRead(0x10,Dat));
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdRead
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x10
        LCALL   ??PcdRead?relay
        SJMP    ??IC_CMT_1
//  548    }
//  549    else 
//  550    {
//  551     UartSend(PcdWrite(0x10,Dat));
??IC_CMT_0:
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdWrite
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x10
        LCALL   ??PcdWrite?relay
??IC_CMT_1:
        LCALL   ??UartSend?relay
//  552    } 
//  553    UartSend(PcdHalt());
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdHalt
        LCALL   ??PcdHalt?relay
        LCALL   ??UartSend?relay
//  554 }
        MOV     A,#0x20
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock110

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_I_1us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_I_1us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SPIWriteByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SPIWriteByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SPIReadByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SPIReadByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadRawRC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReadRawRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteRawRC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteRawRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SetBitMask?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SetBitMask

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ClearBitMask?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ClearBitMask

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdAntennaOn?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdAntennaOn

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdAntennaOff?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdAntennaOff

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M500PcdConfigISOType?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M500PcdConfigISOType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdComMF522?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdComMF522

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdAnticoll?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdAnticoll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CalulateCRC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CalulateCRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdSelect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdSelect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdAuthState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdAuthState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdWrite?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdHalt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdHalt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IC_CMT?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IC_CMT

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0

        END
// 
// 2 412 bytes in segment BANKED_CODE
//   126 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//    32 bytes in segment XDATA_ROM_C
// 
// 2 538 bytes of CODE  memory
//    32 bytes of CONST memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: 6
