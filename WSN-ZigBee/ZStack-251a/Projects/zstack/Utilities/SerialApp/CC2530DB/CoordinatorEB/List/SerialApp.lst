###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         03/Jun/2018  22:08:51 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Pr #
#                          ojects\zstack\Utilities\SerialApp\Source\SerialApp #
#                          .c                                                 #
#    Command line       =  -f "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251 #
#                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251 #
#                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO   #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1688                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "D:\安连德\第6章            #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\Source\SerialApp.c" -D           #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D              #
#                          LCD_SUPPORTED -D Hal_UART_ISR=2 -D HAL_UART_DMA=1  #
#                          -lC "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-25 #
#                          1a\Projects\zstack\Utilities\SerialApp\CC2530DB\Co #
#                          ordinatorEB\List\" -lA "D:\安连德\第6章            #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\"    #
#                          --diag_suppress Pe001,Pa010 -o "D:\安连德\第6章    #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\CoordinatorEB\Obj\" -e  #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251 #
#                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\"   #
#                          -I "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251 #
#                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\..\ #
#                          Source\" -I "D:\安连德\第6章                       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\ZMain\TI2530DB #
#                          \" -I "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack- #
#                          251a\Projects\zstack\Utilities\SerialApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\include\" -I         #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\hal\target\CC2530EB\" -I       #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mac\include\" -I               #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mac\high_level\" -I            #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mac\low_level\srf04\" -I       #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mac\low_level\srf04\single_chi #
#                          p\" -I "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack #
#                          -251a\Projects\zstack\Utilities\SerialApp\CC2530DB #
#                          \..\..\..\..\..\Components\mt\" -I                 #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\osal\include\" -I              #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\services\saddr\" -I            #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\services\sdata\" -I            #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\af\" -I                  #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\nwk\" -I                 #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\sapi\" -I                #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\sec\" -I                 #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\sys\" -I                 #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\zdo\" -I                 #
#                          "D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\P #
#                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\zmac\" -I "D:\安连德\第6章     #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\f8w\" -Ohz                                 #
#    List file          =  D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\Coordin #
#                          atorEB\List\SerialApp.lst                          #
#    Object file        =  D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\Coordin #
#                          atorEB\Obj\SerialApp.r51                           #
#                                                                             #
#                                                                             #
###############################################################################

D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
      1          /*********************************************************************
      2          * INCLUDES
      3          */
      4          #include <stdio.h>
      5          #include <string.h>
      6          
      7          #include "AF.h"
      8          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xda
   \   unsigned char volatile __sfr T1CC0L
   \                     T1CC0L:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xdb
   \   unsigned char volatile __sfr T1CC0H
   \                     T1CC0H:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe4
   \   unsigned char volatile __sfr T1CTL
   \                     T1CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr P2INP
   \                     P2INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf8
   \   union <unnamed> volatile __sfr _A_U1CSR
   \                     _A_U1CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf9
   \   unsigned char volatile __sfr U1DBUF
   \                     U1DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfa
   \   unsigned char volatile __sfr U1BAUD
   \                     U1BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfc
   \   unsigned char volatile __sfr U1GCR
   \                     U1GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
      9          #include "OSAL_Tasks.h"
     10          #include "SerialApp.h"
     11          #include "ZDApp.h"
     12          #include "ZDObject.h"
     13          #include "ZDProfile.h"
     14          
     15          #include "hal_drivers.h"
     16          #include "hal_key.h"
     17          #if defined ( LCD_SUPPORTED )
     18          #include "hal_lcd.h"
     19          #endif
     20          #include "hal_led.h"
     21          #include "hal_uart.h"
     22          
     23          #include "DHT11.h"
     24          #include "nwk_globals.h"
     25          
     26          #include "IC_w_r.c"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void Delay_I_1us(unsigned int)
   \                     Delay_I_1us:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   7800         MOV     R0,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   8008         SJMP    ??Delay_I_1us_0
   \                     ??Delay_I_1us_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \                     ??Delay_I_1us_0:
   \   00000E   C3           CLR     C
   \   00000F   E8           MOV     A,R0
   \   000010   9A           SUBB    A,R2
   \   000011   E9           MOV     A,R1
   \   000012   9B           SUBB    A,R3
   \   000013   40F1         JC      ??Delay_I_1us_1
   \   000015   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void SPIWriteByte(unsigned char)
   \                     SPIWriteByte:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   7E08         MOV     R6,#0x8
   \                     ??SPIWriteByte_0:
   \   000009   EF           MOV     A,R7
   \   00000A   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000C   5004         JNC     ??SPIWriteByte_1
   \   00000E   D286         SETB    0x80.6
   \   000010   8002         SJMP    ??SPIWriteByte_2
   \                     ??SPIWriteByte_1:
   \   000012   C286         CLR     0x80.6
   \                     ??SPIWriteByte_2:
   \   000014                ; Setup parameters for call to function Delay_I_1us
   \   000014   7A03         MOV     R2,#0x3
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   ??Delay_I_1us?relay
   \   00001B   C287         CLR     0x80.7
   \   00001D                ; Setup parameters for call to function Delay_I_1us
   \   00001D   7A01         MOV     R2,#0x1
   \   00001F   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000022   EF           MOV     A,R7
   \   000023   C3           CLR     C
   \   000024   33           RLC     A
   \   000025   FF           MOV     R7,A
   \   000026   1E           DEC     R6
   \   000027   EE           MOV     A,R6
   \   000028   70DF         JNZ     ??SPIWriteByte_0
   \   00002A   80..         SJMP    ??Subroutine29_0
   \   00002C                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??Delay_I_1us?relay
   \   000005   D287         SETB    0x80.7
   \   000007                ; Setup parameters for call to function Delay_I_1us
   \   000007                ; Setup parameters for call to function Delay_I_1us
   \   000007   7A03         MOV     R2,#0x3
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??Delay_I_1us?relay
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant unsigned char SPIReadByte()
   \                     SPIReadByte:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7F08         MOV     R7,#0x8
   \                     ??SPIReadByte_0:
   \   000007   EE           MOV     A,R6
   \   000008   C3           CLR     C
   \   000009   33           RLC     A
   \   00000A   FE           MOV     R6,A
   \   00000B   C287         CLR     0x80.7
   \   00000D                ; Setup parameters for call to function Delay_I_1us
   \   00000D   7A03         MOV     R2,#0x3
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??Delay_I_1us?relay
   \   000014   A285         MOV     C,0x80.5
   \   000016   5004         JNC     ??SPIReadByte_1
   \   000018   EE           MOV     A,R6
   \   000019   D2E0         SETB    0xE0 /* A   */.0
   \   00001B   FE           MOV     R6,A
   \                     ??SPIReadByte_1:
   \   00001C                ; Setup parameters for call to function Delay_I_1us
   \   00001C   7A02         MOV     R2,#0x2
   \   00001E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000021   1F           DEC     R7
   \   000022   EF           MOV     A,R7
   \   000023   70E2         JNZ     ??SPIReadByte_0
   \   000025   EE           MOV     A,R6
   \   000026   F9           MOV     R1,A
   \   000027   80..         SJMP    ??Subroutine29_0
   \   000029                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant unsigned char ReadRawRC(unsigned char)
   \                     ReadRawRC:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   C2A0         CLR     0xa0.0
   \   000008                ; Setup parameters for call to function SPIWriteByte
   \   000008   C3           CLR     C
   \   000009   33           RLC     A
   \   00000A   4480         ORL     A,#0x80
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??SPIWriteByte?relay
   \   000010                ; Setup parameters for call to function SPIReadByte
   \   000010   12....       LCALL   ??SPIReadByte?relay
   \   000013                REQUIRE ?Subroutine7
   \   000013                REQUIRE _A_P2
   \   000013                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   D2A0         SETB    0xa0.0
   \   000002   80..         SJMP    ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void WriteRawRC(unsigned char, unsigned char)
   \                     WriteRawRC:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   C2A0         CLR     0xa0.0
   \   00000B                ; Setup parameters for call to function SPIWriteByte
   \   00000B   EF           MOV     A,R7
   \   00000C   C3           CLR     C
   \   00000D   33           RLC     A
   \   00000E   547E         ANL     A,#0x7e
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??SPIWriteByte?relay
   \   000014                ; Setup parameters for call to function SPIWriteByte
   \   000014   EE           MOV     A,R6
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   ??SPIWriteByte?relay
   \   000019   80..         SJMP    ?Subroutine7
   \   00001B                REQUIRE _A_P2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   FA           MOV     R2,A
   \   000001   EE           MOV     A,R6
   \   000002   F9           MOV     R1,A
   \   000003   12....       LCALL   ??WriteRawRC?relay
   \   000006                REQUIRE ??Subroutine29_0
   \   000006                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void SetBitMask(unsigned char, unsigned char)
   \                     SetBitMask:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00000B   4F           ORL     A,R7
   \   00000C   80..         SJMP    ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   FF           MOV     R7,A
   \   000001                ; Setup parameters for call to function WriteRawRC
   \   000001                ; Setup parameters for call to function ReadRawRC
   \   000001                ; Setup parameters for call to function ReadRawRC
   \   000001                REQUIRE ??Subroutine31_0
   \   000001                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   12....       LCALL   ??ReadRawRC?relay
   \   000003   E9           MOV     A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void ClearBitMask(unsigned char, unsigned char)
   \                     ClearBitMask:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007                ; Setup parameters for call to function WriteRawRC
   \   000007   EA           MOV     A,R2
   \   000008   F4           CPL     A
   \   000009   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00000C   5F           ANL     A,R7
   \   00000D   80..         SJMP    ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void PcdAntennaOn(void)
   \                     PcdAntennaOn:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function ReadRawRC
   \   000004   7914         MOV     R1,#0x14
   \   000006   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000009   5403         ANL     A,#0x3
   \   00000B   7007         JNZ     ??PcdAntennaOn_0
   \   00000D                ; Setup parameters for call to function SetBitMask
   \   00000D   7A03         MOV     R2,#0x3
   \   00000F   7914         MOV     R1,#0x14
   \   000011   12....       LCALL   ??SetBitMask?relay
   \                     ??PcdAntennaOn_0:
   \   000014   80..         SJMP    ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void PcdAntennaOff(void)
   \                     PcdAntennaOff:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function ClearBitMask
   \   000004   7A03         MOV     R2,#0x3
   \   000006   7914         MOV     R1,#0x14
   \   000008   12....       LCALL   ??ClearBitMask?relay
   \   00000B   80..         SJMP    ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void PcdReset(void)
   \                     PcdReset:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   D284         SETB    0x80.4
   \   000006                ; Setup parameters for call to function Delay_I_1us
   \   000006   7A01         MOV     R2,#0x1
   \   000008   7B00         MOV     R3,#0x0
   \   00000A   12....       LCALL   ??Delay_I_1us?relay
   \   00000D   C284         CLR     0x80.4
   \   00000F                ; Setup parameters for call to function Delay_I_1us
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??Delay_I_1us?relay
   \   000016   D284         SETB    0x80.4
   \   000018                ; Setup parameters for call to function Delay_I_1us
   \   000018   7A01         MOV     R2,#0x1
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??Delay_I_1us?relay
   \   00001F                ; Setup parameters for call to function WriteRawRC
   \   00001F   7A0F         MOV     R2,#0xf
   \   000021   7901         MOV     R1,#0x1
   \   000023   12....       LCALL   ??WriteRawRC?relay
   \                     ??PcdReset_0:
   \   000026                ; Setup parameters for call to function ReadRawRC
   \   000026   7901         MOV     R1,#0x1
   \   000028   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00002B   A2E4         MOV     C,0xE0 /* A   */.4
   \   00002D   40F7         JC      ??PcdReset_0
   \   00002F                ; Setup parameters for call to function Delay_I_1us
   \   00002F   7A0A         MOV     R2,#0xa
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   ??Delay_I_1us?relay
   \   000036                ; Setup parameters for call to function WriteRawRC
   \   000036   7A3D         MOV     R2,#0x3d
   \   000038   7911         MOV     R1,#0x11
   \   00003A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00003D                ; Setup parameters for call to function WriteRawRC
   \   00003D   7A40         MOV     R2,#0x40
   \   00003F   7915         MOV     R1,#0x15
   \   000041   12....       LCALL   ??WriteRawRC?relay
   \   000044                REQUIRE ?Subroutine0
   \   000044                REQUIRE _A_P0
   \   000044                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ??WriteRawRC?relay
   \   000003                ; Setup parameters for call to function WriteRawRC
   \   000003                ; Setup parameters for call to function WriteRawRC
   \   000003   7A1E         MOV     R2,#0x1e
   \   000005   792D         MOV     R1,#0x2d
   \   000007   12....       LCALL   ??WriteRawRC?relay
   \   00000A                ; Setup parameters for call to function WriteRawRC
   \   00000A                ; Setup parameters for call to function WriteRawRC
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   792C         MOV     R1,#0x2c
   \   00000E   12....       LCALL   ??WriteRawRC?relay
   \   000011                ; Setup parameters for call to function WriteRawRC
   \   000011                ; Setup parameters for call to function WriteRawRC
   \   000011   7A8D         MOV     R2,#-0x73
   \   000013   792A         MOV     R1,#0x2a
   \   000015   12....       LCALL   ??WriteRawRC?relay
   \   000018                ; Setup parameters for call to function WriteRawRC
   \   000018                ; Setup parameters for call to function WriteRawRC
   \   000018   7A3E         MOV     R2,#0x3e
   \   00001A   792B         MOV     R1,#0x2b
   \   00001C   12....       LCALL   ??WriteRawRC?relay
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void M500PcdConfigISOType(unsigned char)
   \                     M500PcdConfigISOType:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   7441         MOV     A,#0x41
   \   000009   6E           XRL     A,R6
   \   00000A   7026         JNZ     ??M500PcdConfigISOType_0
   \   00000C                ; Setup parameters for call to function ClearBitMask
   \   00000C   7A08         MOV     R2,#0x8
   \   00000E   7908         MOV     R1,#0x8
   \   000010   12....       LCALL   ??ClearBitMask?relay
   \   000013                ; Setup parameters for call to function WriteRawRC
   \   000013   7A3D         MOV     R2,#0x3d
   \   000015   7911         MOV     R1,#0x11
   \   000017   12....       LCALL   ??WriteRawRC?relay
   \   00001A                ; Setup parameters for call to function WriteRawRC
   \   00001A   7A86         MOV     R2,#-0x7a
   \   00001C   7917         MOV     R1,#0x17
   \   00001E   12....       LCALL   ??WriteRawRC?relay
   \   000021                ; Setup parameters for call to function WriteRawRC
   \   000021   7A7F         MOV     R2,#0x7f
   \   000023   7926         MOV     R1,#0x26
   \   000025   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000028                ; Setup parameters for call to function Delay_I_1us
   \   000028   7A02         MOV     R2,#0x2
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ??Delay_I_1us?relay
   \   00002F                ; Setup parameters for call to function PcdAntennaOn
   \   00002F   12....       LCALL   ??PcdAntennaOn?relay
   \                     ??M500PcdConfigISOType_0:
   \   000032   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant char PcdComMF522(unsigned char, unsigned char *, unsigned char, unsigned char *, unsigned int *)
   \                     PcdComMF522:
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 10,R2
   \   000009   8B..         MOV     ?V0 + 11,R3
   \   00000B   8C..         MOV     ?V0 + 4,R4
   \   00000D   7416         MOV     A,#0x16
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 12,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 13,A
   \   000019   7418         MOV     A,#0x18
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 1,A
   \   000025   75..BB       MOV     ?V0 + 3,#-0x45
   \   000028   75..00       MOV     ?V0 + 5,#0x0
   \   00002B   75..00       MOV     ?V0 + 6,#0x0
   \   00002E   E9           MOV     A,R1
   \   00002F   24F4         ADD     A,#-0xc
   \   000031   600C         JZ      ??PcdComMF522_0
   \   000033   24FE         ADD     A,#-0x2
   \   000035   700E         JNZ     ??PcdComMF522_1
   \   000037   75..12       MOV     ?V0 + 5,#0x12
   \   00003A   75..10       MOV     ?V0 + 6,#0x10
   \   00003D   8006         SJMP    ??PcdComMF522_1
   \                     ??PcdComMF522_0:
   \   00003F   75..77       MOV     ?V0 + 5,#0x77
   \   000042   75..30       MOV     ?V0 + 6,#0x30
   \                     ??PcdComMF522_1:
   \   000045                ; Setup parameters for call to function WriteRawRC
   \   000045   7480         MOV     A,#-0x80
   \   000047   45..         ORL     A,?V0 + 5
   \   000049   FA           MOV     R2,A
   \   00004A   7902         MOV     R1,#0x2
   \   00004C   12....       LCALL   ??WriteRawRC?relay
   \   00004F                ; Setup parameters for call to function ClearBitMask
   \   00004F   7A80         MOV     R2,#-0x80
   \   000051   7904         MOV     R1,#0x4
   \   000053   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000056   7E00         MOV     R6,#0x0
   \   000058   7F00         MOV     R7,#0x0
   \   00005A   8019         SJMP    ??PcdComMF522_2
   \                     ??PcdComMF522_3:
   \   00005C                ; Setup parameters for call to function WriteRawRC
   \   00005C   E5..         MOV     A,?V0 + 10
   \   00005E   2E           ADD     A,R6
   \   00005F   F582         MOV     DPL,A
   \   000061   E5..         MOV     A,?V0 + 11
   \   000063   3F           ADDC    A,R7
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   7909         MOV     R1,#0x9
   \   00006A   12....       LCALL   ??WriteRawRC?relay
   \   00006D   EE           MOV     A,R6
   \   00006E   2401         ADD     A,#0x1
   \   000070   0E           INC     R6
   \   000071   EF           MOV     A,R7
   \   000072   3400         ADDC    A,#0x0
   \   000074   FF           MOV     R7,A
   \                     ??PcdComMF522_2:
   \   000075   85....       MOV     ?V0 + 8,?V0 + 4
   \   000078   C3           CLR     C
   \   000079   EE           MOV     A,R6
   \   00007A   95..         SUBB    A,?V0 + 8
   \   00007C   EF           MOV     A,R7
   \   00007D   9400         SUBB    A,#0x0
   \   00007F   40DB         JC      ??PcdComMF522_3
   \   000081                ; Setup parameters for call to function WriteRawRC
   \   000081   AA..         MOV     R2,?V0 + 2
   \   000083   7901         MOV     R1,#0x1
   \   000085   12....       LCALL   ??WriteRawRC?relay
   \   000088   740C         MOV     A,#0xc
   \   00008A   65..         XRL     A,?V0 + 2
   \   00008C   7007         JNZ     ??PcdComMF522_4
   \   00008E                ; Setup parameters for call to function SetBitMask
   \   00008E   7A80         MOV     R2,#-0x80
   \   000090   790D         MOV     R1,#0xd
   \   000092   12....       LCALL   ??SetBitMask?relay
   \                     ??PcdComMF522_4:
   \   000095   7EE8         MOV     R6,#-0x18
   \   000097   7F03         MOV     R7,#0x3
   \                     ??PcdComMF522_5:
   \   000099                ; Setup parameters for call to function ReadRawRC
   \   000099   7904         MOV     R1,#0x4
   \   00009B   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00009E   F5..         MOV     ?V0 + 8,A
   \   0000A0   EE           MOV     A,R6
   \   0000A1   24FF         ADD     A,#-0x1
   \   0000A3   1E           DEC     R6
   \   0000A4   EF           MOV     A,R7
   \   0000A5   34FF         ADDC    A,#-0x1
   \   0000A7   FF           MOV     R7,A
   \   0000A8   EE           MOV     A,R6
   \   0000A9   4F           ORL     A,R7
   \   0000AA   6009         JZ      ??PcdComMF522_6
   \   0000AC   E9           MOV     A,R1
   \   0000AD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000AF   4004         JC      ??PcdComMF522_6
   \   0000B1   55..         ANL     A,?V0 + 6
   \   0000B3   60E4         JZ      ??PcdComMF522_5
   \                     ??PcdComMF522_6:
   \   0000B5                ; Setup parameters for call to function ClearBitMask
   \   0000B5   7A80         MOV     R2,#-0x80
   \   0000B7   790D         MOV     R1,#0xd
   \   0000B9   12....       LCALL   ??ClearBitMask?relay
   \   0000BC   EE           MOV     A,R6
   \   0000BD   4F           ORL     A,R7
   \   0000BE   7003         JNZ     $+5
   \   0000C0   02....       LJMP    ??PcdComMF522_7 & 0xFFFF
   \   0000C3                ; Setup parameters for call to function ReadRawRC
   \   0000C3   7906         MOV     R1,#0x6
   \   0000C5   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000C8   541B         ANL     A,#0x1b
   \   0000CA   6003         JZ      $+5
   \   0000CC   02....       LJMP    ??PcdComMF522_7 & 0xFFFF
   \   0000CF   75..26       MOV     ?V0 + 3,#0x26
   \   0000D2   E5..         MOV     A,?V0 + 5
   \   0000D4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D6   C0D0         PUSH    PSW
   \   0000D8   E5..         MOV     A,?V0 + 8
   \   0000DA   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000DC   92F0         MOV     B.0,C
   \   0000DE   12....       LCALL   ?POP_BIT_ISP
   \   0000E1   1581         DEC     SP
   \   0000E3   82F0         ANL     C,B.0
   \   0000E5   5003         JNC     ??PcdComMF522_8
   \   0000E7   75..CC       MOV     ?V0 + 3,#-0x34
   \                     ??PcdComMF522_8:
   \   0000EA   740C         MOV     A,#0xc
   \   0000EC   65..         XRL     A,?V0 + 2
   \   0000EE   6003         JZ      $+5
   \   0000F0   02....       LJMP    ??PcdComMF522_7 & 0xFFFF
   \   0000F3                ; Setup parameters for call to function ReadRawRC
   \   0000F3   790A         MOV     R1,#0xa
   \   0000F5   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000F8   F5..         MOV     ?V0 + 8,A
   \   0000FA                ; Setup parameters for call to function ReadRawRC
   \   0000FA   790C         MOV     R1,#0xc
   \   0000FC   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000FF   5407         ANL     A,#0x7
   \   000101   F5..         MOV     ?V0 + 10,A
   \   000103   85....       MOV     ?V0 + 6,?V0 + 8
   \   000106   6028         JZ      ??PcdComMF522_9
   \   000108   E5..         MOV     A,?V0 + 6
   \   00010A   24FF         ADD     A,#-0x1
   \   00010C   F5..         MOV     ?V0 + 6,A
   \   00010E   E4           CLR     A
   \   00010F   34FF         ADDC    A,#-0x1
   \   000111   F5..         MOV     ?V0 + 7,A
   \   000113   7403         MOV     A,#0x3
   \   000115   78..         MOV     R0,#?V0 + 6
   \   000117   12....       LCALL   ?S_SHL
   \   00011A   E5..         MOV     A,?V0 + 6
   \   00011C   25..         ADD     A,?V0 + 10
   \   00011E   F8           MOV     R0,A
   \   00011F   E5..         MOV     A,?V0 + 7
   \   000121   3400         ADDC    A,#0x0
   \   000123   F9           MOV     R1,A
   \   000124   85..82       MOV     DPL,?V0 + 0
   \   000127   85..83       MOV     DPH,?V0 + 1
   \   00012A   E8           MOV     A,R0
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   A3           INC     DPTR
   \   00012D   E9           MOV     A,R1
   \   00012E   8016         SJMP    ??PcdComMF522_10
   \                     ??PcdComMF522_9:
   \   000130   75..00       MOV     ?V0 + 7,#0x0
   \   000133   7403         MOV     A,#0x3
   \   000135   78..         MOV     R0,#?V0 + 6
   \   000137   12....       LCALL   ?S_SHL
   \   00013A   85..82       MOV     DPL,?V0 + 0
   \   00013D   85..83       MOV     DPH,?V0 + 1
   \   000140   E5..         MOV     A,?V0 + 6
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   E5..         MOV     A,?V0 + 7
   \                     ??PcdComMF522_10:
   \   000146   F0           MOVX    @DPTR,A
   \   000147   E5..         MOV     A,?V0 + 8
   \   000149   7005         JNZ     ??PcdComMF522_11
   \   00014B   75..01       MOV     ?V0 + 8,#0x1
   \   00014E   8008         SJMP    ??PcdComMF522_12
   \                     ??PcdComMF522_11:
   \   000150   C3           CLR     C
   \   000151   9413         SUBB    A,#0x13
   \   000153   4003         JC      ??PcdComMF522_12
   \   000155   75..12       MOV     ?V0 + 8,#0x12
   \                     ??PcdComMF522_12:
   \   000158   7E00         MOV     R6,#0x0
   \   00015A   7F00         MOV     R7,#0x0
   \   00015C   8019         SJMP    ??PcdComMF522_13
   \                     ??PcdComMF522_14:
   \   00015E                ; Setup parameters for call to function ReadRawRC
   \   00015E   7909         MOV     R1,#0x9
   \   000160   12....       LCALL   ??ReadRawRC?relay
   \   000163   E5..         MOV     A,?V0 + 12
   \   000165   2E           ADD     A,R6
   \   000166   F582         MOV     DPL,A
   \   000168   E5..         MOV     A,?V0 + 13
   \   00016A   3F           ADDC    A,R7
   \   00016B   F583         MOV     DPH,A
   \   00016D   E9           MOV     A,R1
   \   00016E   F0           MOVX    @DPTR,A
   \   00016F   EE           MOV     A,R6
   \   000170   2401         ADD     A,#0x1
   \   000172   0E           INC     R6
   \   000173   EF           MOV     A,R7
   \   000174   3400         ADDC    A,#0x0
   \   000176   FF           MOV     R7,A
   \                     ??PcdComMF522_13:
   \   000177   85....       MOV     ?V0 + 0,?V0 + 8
   \   00017A   C3           CLR     C
   \   00017B   EE           MOV     A,R6
   \   00017C   95..         SUBB    A,?V0 + 0
   \   00017E   EF           MOV     A,R7
   \   00017F   9400         SUBB    A,#0x0
   \   000181   40DB         JC      ??PcdComMF522_14
   \                     ??PcdComMF522_7:
   \   000183                ; Setup parameters for call to function SetBitMask
   \   000183   7A80         MOV     R2,#-0x80
   \   000185   790C         MOV     R1,#0xc
   \   000187   12....       LCALL   ??SetBitMask?relay
   \   00018A                ; Setup parameters for call to function WriteRawRC
   \   00018A   7A00         MOV     R2,#0x0
   \   00018C   7901         MOV     R1,#0x1
   \   00018E   12....       LCALL   ??WriteRawRC?relay
   \   000191   A9..         MOV     R1,?V0 + 3
   \   000193   7F0E         MOV     R7,#0xe
   \   000195   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??ClearBitMask?relay
   \   000003                ; Setup parameters for call to function WriteRawRC
   \   000003                ; Setup parameters for call to function WriteRawRC
   \   000003   7A00         MOV     R2,#0x0
   \   000005   7901         MOV     R1,#0x1
   \   000007   12....       LCALL   ??WriteRawRC?relay
   \   00000A                ; Setup parameters for call to function SetBitMask
   \   00000A                ; Setup parameters for call to function SetBitMask
   \   00000A   7A80         MOV     R2,#-0x80
   \   00000C   790A         MOV     R1,#0xa
   \   00000E   12....       LCALL   ??SetBitMask?relay
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant char PcdRequest(unsigned char, unsigned char *)
   \                     PcdRequest:
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A

     uint i;
          ^
"D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\IC_w_r.c",299  Warning[Pe177]: 
          variable "i" was declared but never referenced
   \   000010                ; Setup parameters for call to function ClearBitMask
   \   000010   7A08         MOV     R2,#0x8
   \   000012   7908         MOV     R1,#0x8
   \   000014   12....       LCALL   ??ClearBitMask?relay
   \   000017                ; Setup parameters for call to function WriteRawRC
   \   000017   7A07         MOV     R2,#0x7
   \   000019   790D         MOV     R1,#0xd
   \   00001B   12....       LCALL   ??WriteRawRC?relay
   \   00001E                ; Setup parameters for call to function SetBitMask
   \   00001E   7A03         MOV     R2,#0x3
   \   000020   7914         MOV     R1,#0x14
   \   000022   12....       LCALL   ??SetBitMask?relay
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E5..         MOV     A,?V0 + 2
   \   00002C   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C01         MOV     R4,#0x1
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   7426         MOV     A,#0x26
   \   000051   69           XRL     A,R1
   \   000052   7028         JNZ     ??PcdRequest_0
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6410         XRL     A,#0x10
   \   00005D   7002         JNZ     ??PcdRequest_1
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \                     ??PcdRequest_1:
   \   000061   7019         JNZ     ??PcdRequest_0
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   E0           MOVX    A,@DPTR
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   A3           INC     DPTR
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   8002         SJMP    ??PcdRequest_2
   \                     ??PcdRequest_0:
   \   00007C   79BB         MOV     R1,#-0x45
   \                     ??PcdRequest_2:
   \   00007E                REQUIRE ?Subroutine3
   \   00007E                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7414         MOV     A,#0x14
   \   000002                REQUIRE ??Subroutine30_0
   \   000002                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function PcdComMF522
   \   000001                ; Setup parameters for call to function PcdComMF522
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   8582..       MOV     ?V0 + 0,DPL
   \   00000A   8583..       MOV     ?V0 + 1,DPH
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   790C         MOV     R1,#0xc
   \   000006                REQUIRE ??Subroutine32_0
   \   000006                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   12....       LCALL   ??PcdComMF522?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant char PcdAnticoll(unsigned char *)
   \                     PcdAnticoll:
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   75..00       MOV     ?V0 + 2,#0x0
   \   000011                ; Setup parameters for call to function ClearBitMask
   \   000011   7A08         MOV     R2,#0x8
   \   000013   7908         MOV     R1,#0x8
   \   000015   12....       LCALL   ??ClearBitMask?relay
   \   000018                ; Setup parameters for call to function WriteRawRC
   \   000018   7A00         MOV     R2,#0x0
   \   00001A   790D         MOV     R1,#0xd
   \   00001C   12....       LCALL   ??WriteRawRC?relay
   \   00001F                ; Setup parameters for call to function ClearBitMask
   \   00001F   7A80         MOV     R2,#-0x80
   \   000021   790E         MOV     R1,#0xe
   \   000023   12....       LCALL   ??ClearBitMask?relay
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   7493         MOV     A,#-0x6d
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7420         MOV     A,#0x20
   \   000035   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   8582..       MOV     ?V0 + 0,DPL
   \   000043   8583..       MOV     ?V0 + 1,DPH
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7C02         MOV     R4,#0x2
   \   00004D   7406         MOV     A,#0x6
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   E9           MOV     A,R1
   \   000059   F5..         MOV     ?V0 + 0,A
   \   00005B   7426         MOV     A,#0x26
   \   00005D   65..         XRL     A,?V0 + 0
   \   00005F   7045         JNZ     ??PcdAnticoll_0
   \   000061   75..00       MOV     ?V0 + 4,#0x0
   \                     ??PcdAnticoll_1:
   \   000064   85..82       MOV     DPL,?V0 + 4
   \   000067   AA82         MOV     R2,DPL
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E582         MOV     A,DPL
   \   000070   2A           ADD     A,R2
   \   000071   F8           MOV     R0,A
   \   000072   E583         MOV     A,DPH
   \   000074   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000077   C0E0         PUSH    A
   \   000079   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00007C   D0E0         POP     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   8882         MOV     DPL,R0
   \   000081   8983         MOV     DPH,R1
   \   000083   E0           MOVX    A,@DPTR
   \   000084   62..         XRL     ?V0 + 2,A
   \   000086   05..         INC     ?V0 + 4
   \   000088   E5..         MOV     A,?V0 + 4
   \   00008A   C3           CLR     C
   \   00008B   9404         SUBB    A,#0x4
   \   00008D   40D5         JC      ??PcdAnticoll_1
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   E582         MOV     A,DPL
   \   000096   25..         ADD     A,?V0 + 4
   \   000098   F582         MOV     DPL,A
   \   00009A   E583         MOV     A,DPH
   \   00009C   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00009F   65..         XRL     A,?V0 + 2
   \   0000A1   6003         JZ      ??PcdAnticoll_0
   \   0000A3   75..BB       MOV     ?V0 + 0,#-0x45
   \                     ??PcdAnticoll_0:
   \   0000A6                ; Setup parameters for call to function SetBitMask
   \   0000A6   7A80         MOV     R2,#-0x80
   \   0000A8   790E         MOV     R1,#0xe
   \   0000AA   12....       LCALL   ??SetBitMask?relay
   \   0000AD   A9..         MOV     R1,?V0 + 0
   \   0000AF   7414         MOV     A,#0x14
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B4                REQUIRE ?Subroutine4
   \   0000B4                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EE           MOV     A,R6
   \   000001   2A           ADD     A,R2
   \   000002   F582         MOV     DPL,A
   \   000004   EF           MOV     A,R7
   \   000005   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void CalulateCRC(unsigned char *, unsigned char, unsigned char *)
   \                     CalulateCRC:
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 5,R1
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F                ; Setup parameters for call to function ClearBitMask
   \   00000F   7A04         MOV     R2,#0x4
   \   000011   7905         MOV     R1,#0x5
   \   000013   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000016   75..00       MOV     ?V0 + 4,#0x0
   \   000019   8014         SJMP    ??CalulateCRC_0
   \                     ??CalulateCRC_1:
   \   00001B                ; Setup parameters for call to function WriteRawRC
   \   00001B   85....       MOV     ?V0 + 2,?V0 + 4
   \   00001E   EE           MOV     A,R6
   \   00001F   25..         ADD     A,?V0 + 2
   \   000021   F582         MOV     DPL,A
   \   000023   EF           MOV     A,R7
   \   000024   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000027   FA           MOV     R2,A
   \   000028   7909         MOV     R1,#0x9
   \   00002A   12....       LCALL   ??WriteRawRC?relay
   \   00002D   05..         INC     ?V0 + 4
   \                     ??CalulateCRC_0:
   \   00002F   E5..         MOV     A,?V0 + 4
   \   000031   C3           CLR     C
   \   000032   95..         SUBB    A,?V0 + 5
   \   000034   40E5         JC      ??CalulateCRC_1
   \   000036                ; Setup parameters for call to function WriteRawRC
   \   000036   7A03         MOV     R2,#0x3
   \   000038   7901         MOV     R1,#0x1
   \   00003A   12....       LCALL   ??WriteRawRC?relay
   \   00003D   75..FF       MOV     ?V0 + 4,#-0x1
   \                     ??CalulateCRC_2:
   \   000040                ; Setup parameters for call to function ReadRawRC
   \   000040   7905         MOV     R1,#0x5
   \   000042   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000045   F8           MOV     R0,A
   \   000046   15..         DEC     ?V0 + 4
   \   000048   E5..         MOV     A,?V0 + 4
   \   00004A   6005         JZ      ??CalulateCRC_3
   \   00004C   E8           MOV     A,R0
   \   00004D   A2E2         MOV     C,0xE0 /* A   */.2
   \   00004F   50EF         JNC     ??CalulateCRC_2
   \                     ??CalulateCRC_3:
   \   000051                ; Setup parameters for call to function ReadRawRC
   \   000051   7922         MOV     R1,#0x22
   \   000053   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000056   F0           MOVX    @DPTR,A
   \   000057                ; Setup parameters for call to function ReadRawRC
   \   000057   7921         MOV     R1,#0x21
   \   000059   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   80..         SJMP    ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ??ReadRawRC?relay
   \   000003   E9           MOV     A,R1
   \   000004   85..82       MOV     DPL,?V0 + 0
   \   000007   85..83       MOV     DPH,?V0 + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant char PcdSelect(unsigned char *)
   \                     PcdSelect:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7493         MOV     A,#-0x6d
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7470         MOV     A,#0x70
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   FE           MOV     R6,A
   \                     ??PcdSelect_0:
   \   000022   8E82         MOV     DPL,R6
   \   000024   AC82         MOV     R4,DPL
   \   000026   EA           MOV     A,R2
   \   000027   2C           ADD     A,R4
   \   000028   F8           MOV     R0,A
   \   000029   EB           MOV     A,R3
   \   00002A   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00002D   C0E0         PUSH    A
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E582         MOV     A,DPL
   \   000036   2C           ADD     A,R4
   \   000037   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00003A   D0E0         POP     A
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   7408         MOV     A,#0x8
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   68           XRL     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   0E           INC     R6
   \   00004C   EE           MOV     A,R6
   \   00004D   C3           CLR     C
   \   00004E   9404         SUBB    A,#0x4
   \   000050   40D0         JC      ??PcdSelect_0
   \   000052                ; Setup parameters for call to function CalulateCRC
   \   000052   7409         MOV     A,#0x9
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   AC82         MOV     R4,DPL
   \   000059   AD83         MOV     R5,DPH
   \   00005B   7907         MOV     R1,#0x7
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   AA82         MOV     R2,DPL
   \   000064   AB83         MOV     R3,DPH
   \   000066   12....       LCALL   ??CalulateCRC?relay
   \   000069                ; Setup parameters for call to function ClearBitMask
   \   000069   7A08         MOV     R2,#0x8
   \   00006B   7908         MOV     R1,#0x8
   \   00006D   12....       LCALL   ??ClearBitMask?relay
   \   000070                ; Setup parameters for call to function PcdComMF522
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   8582..       MOV     ?V0 + 0,DPL
   \   000079   8583..       MOV     ?V0 + 1,DPH
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   8582..       MOV     ?V0 + 0,DPL
   \   000089   8583..       MOV     ?V0 + 1,DPH
   \   00008C   78..         MOV     R0,#?V0 + 0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   7C09         MOV     R4,#0x9
   \   000093   7406         MOV     A,#0x6
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   7426         MOV     A,#0x26
   \   0000A0   69           XRL     A,R1
   \   0000A1   700F         JNZ     ??PcdSelect_1
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   6418         XRL     A,#0x18
   \   0000AC   7002         JNZ     ??PcdSelect_2
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \                     ??PcdSelect_2:
   \   0000B0   6002         JZ      ??PcdSelect_3
   \                     ??PcdSelect_1:
   \   0000B2   79BB         MOV     R1,#-0x45
   \                     ??PcdSelect_3:
   \   0000B4   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7414         MOV     A,#0x14
   \   000002                REQUIRE ??Subroutine36_0
   \   000002                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine37_0
   \   000003                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004                REQUIRE ??Subroutine39_0
   \   000004                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant char PcdAuthState(unsigned char, unsigned char, unsigned char *, unsigned char *)
   \                     PcdAuthState:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   741E         MOV     A,#0x1e
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EE           MOV     A,R6
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   7403         MOV     A,#0x3
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   EA           MOV     A,R2
   \   000023   F0           MOVX    @DPTR,A
   \   000024   75..00       MOV     ?V0 + 0,#0x0
   \                     ??PcdAuthState_0:
   \   000027   85..82       MOV     DPL,?V0 + 0
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   EC           MOV     A,R4
   \   00002D   2A           ADD     A,R2
   \   00002E   F582         MOV     DPL,A
   \   000030   ED           MOV     A,R5
   \   000031   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000034   C0E0         PUSH    A
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00003E   D0E0         POP     A
   \   000040   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000043   40E2         JC      ??PcdAuthState_0
   \   000045   75..00       MOV     ?V0 + 0,#0x0
   \                     ??PcdAuthState_1:
   \   000048   85..82       MOV     DPL,?V0 + 0
   \   00004B   AA82         MOV     R2,DPL
   \   00004D   E8           MOV     A,R0
   \   00004E   2A           ADD     A,R2
   \   00004F   F582         MOV     DPL,A
   \   000051   E9           MOV     A,R1
   \   000052   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000055   C0E0         PUSH    A
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00006A   40DC         JC      ??PcdAuthState_1
   \   00006C                ; Setup parameters for call to function PcdComMF522
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   8582..       MOV     ?V0 + 0,DPL
   \   000075   8583..       MOV     ?V0 + 1,DPH
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   8582..       MOV     ?V0 + 0,DPL
   \   000085   8583..       MOV     ?V0 + 1,DPH
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   7C0C         MOV     R4,#0xc
   \   00008F   7406         MOV     A,#0x6
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   AA82         MOV     R2,DPL
   \   000096   AB83         MOV     R3,DPH
   \   000098   790E         MOV     R1,#0xe
   \   00009A   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV     A,R1
   \   0000A1   F5..         MOV     ?V0 + 0,A
   \   0000A3   7426         MOV     A,#0x26
   \   0000A5   65..         XRL     A,?V0 + 0
   \   0000A7   7009         JNZ     ??PcdAuthState_2
   \   0000A9                ; Setup parameters for call to function ReadRawRC
   \   0000A9   7908         MOV     R1,#0x8
   \   0000AB   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000AE   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000B0   4003         JC      ??PcdAuthState_3
   \                     ??PcdAuthState_2:
   \   0000B2   75..BB       MOV     ?V0 + 0,#-0x45
   \                     ??PcdAuthState_3:
   \   0000B5   A9..         MOV     R1,?V0 + 0
   \   0000B7   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   05..         INC     ?V0 + 0
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   C3           CLR     C
   \   000006   9406         SUBB    A,#0x6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E582         MOV     A,DPL
   \   000002   2A           ADD     A,R2
   \   000003                REQUIRE ??Subroutine33_0
   \   000003                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant char PcdWrite(unsigned char, unsigned char *)
   \                     PcdWrite:
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   74A0         MOV     A,#-0x60
   \   000015   F0           MOVX    @DPTR,A
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D                ; Setup parameters for call to function CalulateCRC
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   AC82         MOV     R4,DPL
   \   000024   AD83         MOV     R5,DPH
   \   000026   7902         MOV     R1,#0x2
   \   000028   E9           MOV     A,R1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 2,DPL
   \   00003A   8583..       MOV     ?V0 + 3,DPH
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C04         MOV     R4,#0x4
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   E9           MOV     A,R1
   \   000050   6426         XRL     A,#0x26
   \   000052   701B         JNZ     ??PcdWrite_0
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6404         XRL     A,#0x4
   \   00005D   7002         JNZ     ??PcdWrite_1
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \                     ??PcdWrite_1:
   \   000061   700C         JNZ     ??PcdWrite_0
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   540F         ANL     A,#0xf
   \   00006B   640A         XRL     A,#0xa
   \   00006D   6004         JZ      ??PcdWrite_2
   \                     ??PcdWrite_0:
   \   00006F   79BB         MOV     R1,#-0x45
   \   000071   8078         SJMP    ??PcdWrite_3
   \                     ??PcdWrite_2:
   \   000073   7A00         MOV     R2,#0x0
   \                     ??PcdWrite_4:
   \   000075   8A82         MOV     DPL,R2
   \   000077   A882         MOV     R0,DPL
   \   000079   EE           MOV     A,R6
   \   00007A   28           ADD     A,R0
   \   00007B   F582         MOV     DPL,A
   \   00007D   EF           MOV     A,R7
   \   00007E   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000081   C0E0         PUSH    A
   \   000083   7402         MOV     A,#0x2
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   E582         MOV     A,DPL
   \   00008A   28           ADD     A,R0
   \   00008B   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00008E   D0E0         POP     A
   \   000090   F0           MOVX    @DPTR,A
   \   000091   0A           INC     R2
   \   000092   EA           MOV     A,R2
   \   000093   C3           CLR     C
   \   000094   9410         SUBB    A,#0x10
   \   000096   40DD         JC      ??PcdWrite_4
   \   000098                ; Setup parameters for call to function CalulateCRC
   \   000098   7412         MOV     A,#0x12
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   AC82         MOV     R4,DPL
   \   00009F   AD83         MOV     R5,DPH
   \   0000A1   7910         MOV     R1,#0x10
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   7404         MOV     A,#0x4
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   8582..       MOV     ?V0 + 2,DPL
   \   0000B6   8583..       MOV     ?V0 + 3,DPH
   \   0000B9   78..         MOV     R0,#?V0 + 2
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   7C12         MOV     R4,#0x12
   \   0000C0   7406         MOV     A,#0x6
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CB   7426         MOV     A,#0x26
   \   0000CD   69           XRL     A,R1
   \   0000CE   709F         JNZ     ??PcdWrite_0
   \   0000D0   85..82       MOV     DPL,?XSP + 0
   \   0000D3   85..83       MOV     DPH,?XSP + 1
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   6404         XRL     A,#0x4
   \   0000D9   7002         JNZ     ??PcdWrite_5
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \                     ??PcdWrite_5:
   \   0000DD   7090         JNZ     ??PcdWrite_0
   \   0000DF   7402         MOV     A,#0x2
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   540F         ANL     A,#0xf
   \   0000E7   640A         XRL     A,#0xa
   \   0000E9   7084         JNZ     ??PcdWrite_0
   \                     ??PcdWrite_3:
   \   0000EB   7414         MOV     A,#0x14
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F0                REQUIRE ?Subroutine6
   \   0000F0                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   78..         MOV     R0,#?V0 + 2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??CalulateCRC?relay
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007   85..82       MOV     DPL,?XSP + 0
   \   00000A   85..83       MOV     DPH,?XSP + 1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant char PcdRead(unsigned char, unsigned char *)
   \                     PcdRead:
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7430         MOV     A,#0x30
   \   000015   F0           MOVX    @DPTR,A
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D                ; Setup parameters for call to function CalulateCRC
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   AC82         MOV     R4,DPL
   \   000024   AD83         MOV     R5,DPH
   \   000026   7902         MOV     R1,#0x2
   \   000028   E9           MOV     A,R1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C04         MOV     R4,#0x4
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   7426         MOV     A,#0x26
   \   000051   69           XRL     A,R1
   \   000052   7035         JNZ     ??PcdRead_0
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6490         XRL     A,#0x90
   \   00005D   7002         JNZ     ??PcdRead_1
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \                     ??PcdRead_1:
   \   000061   7026         JNZ     ??PcdRead_0
   \   000063   7800         MOV     R0,#0x0
   \                     ??PcdRead_2:
   \   000065   8882         MOV     DPL,R0
   \   000067   AA82         MOV     R2,DPL
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E582         MOV     A,DPL
   \   000070   2A           ADD     A,R2
   \   000071   F582         MOV     DPL,A
   \   000073   E583         MOV     A,DPH
   \   000075   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000078   C0E0         PUSH    A
   \   00007A   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   08           INC     R0
   \   000081   E8           MOV     A,R0
   \   000082   C3           CLR     C
   \   000083   9410         SUBB    A,#0x10
   \   000085   5004         JNC     ??PcdRead_3
   \   000087   80DC         SJMP    ??PcdRead_2
   \                     ??PcdRead_0:
   \   000089   79BB         MOV     R1,#-0x45
   \                     ??PcdRead_3:
   \   00008B   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   8582..       MOV     ?V0 + 0,DPL
   \   000006   8583..       MOV     ?V0 + 1,DPH
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant char PcdHalt(void)
   \                     PcdHalt:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7450         MOV     A,#0x50
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   \   000019                ; Setup parameters for call to function CalulateCRC
   \   000019   7404         MOV     A,#0x4
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7902         MOV     R1,#0x2
   \   000024   E9           MOV     A,R1
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   8582..       MOV     ?V0 + 0,DPL
   \   000036   8583..       MOV     ?V0 + 1,DPH
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7C04         MOV     R4,#0x4
   \   000040   7406         MOV     A,#0x6
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   7926         MOV     R1,#0x26
   \   00004D                REQUIRE ?Subroutine5
   \   00004D                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void IC_CMT(unsigned char *, unsigned char *, unsigned char, char *)
   \                     IC_CMT:
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   89..         MOV     ?V0 + 4,R1
   \   000014   742D         MOV     A,#0x2d
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FF           MOV     R7,A

    uchar qq[16]=0;//IC卡的类型
                 ^
"D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\IC_w_r.c",536  Warning[Pe520]: 
          initialization with "{...}" expected for aggregate object
   \   00001E   7410         MOV     A,#0x10
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   AC82         MOV     R4,DPL
   \   000025   AD83         MOV     R5,DPH
   \   000027   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00002A   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00002D   7410         MOV     A,#0x10
   \   00002F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA

    uchar IC_uid[16]=0;//IC卡的UID
                     ^
"D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\IC_w_r.c",537  Warning[Pe520]: 
          initialization with "{...}" expected for aggregate object
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   AC82         MOV     R4,DPL
   \   00003A   AD83         MOV     R5,DPH
   \   00003C   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00003F   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   000042   7410         MOV     A,#0x10
   \   000044   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000047                ; Setup parameters for call to function UartSend
   \   000047                ; Setup parameters for call to function PcdRequest
   \   000047   7410         MOV     A,#0x10
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   7952         MOV     R1,#0x52
   \   000052   12....       LCALL   ??PcdRequest?relay
   \   000055   12....       LCALL   ??UartSend?relay
   \   000058                ; Setup parameters for call to function UartSend
   \   000058                ; Setup parameters for call to function PcdAnticoll
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   12....       LCALL   ??PcdAnticoll?relay
   \   000065   12....       LCALL   ??UartSend?relay
   \   000068                ; Setup parameters for call to function UartSend
   \   000068                ; Setup parameters for call to function PcdSelect
   \   000068   AA..         MOV     R2,?V0 + 2
   \   00006A   AB..         MOV     R3,?V0 + 3
   \   00006C   12....       LCALL   ??PcdSelect?relay
   \   00006F   12....       LCALL   ??UartSend?relay
   \   000072                ; Setup parameters for call to function UartSend
   \   000072                ; Setup parameters for call to function PcdAuthState
   \   000072   78..         MOV     R0,#?V0 + 2
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   AC..         MOV     R4,?V0 + 0
   \   000079   AD..         MOV     R5,?V0 + 1
   \   00007B   7A10         MOV     R2,#0x10
   \   00007D   7960         MOV     R1,#0x60
   \   00007F   12....       LCALL   ??PcdAuthState?relay
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   \   000087   12....       LCALL   ??UartSend?relay
   \   00008A   E5..         MOV     A,?V0 + 4
   \   00008C   600B         JZ      ??IC_CMT_0

       UartSend (PcdRead(0x10,Dat));
                              ^
"D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\IC_w_r.c",547  Warning[Pe167]: 
          argument of type "char *" is incompatible with parameter of type
          "unsigned char *"
   \   00008E                ; Setup parameters for call to function UartSend
   \   00008E                ; Setup parameters for call to function PcdRead
   \   00008E   EE           MOV     A,R6
   \   00008F   FA           MOV     R2,A
   \   000090   EF           MOV     A,R7
   \   000091   FB           MOV     R3,A
   \   000092   7910         MOV     R1,#0x10
   \   000094   12....       LCALL   ??PcdRead?relay
   \   000097   8009         SJMP    ??IC_CMT_1

      UartSend(PcdWrite(0x10,Dat));
                             ^
"D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\IC_w_r.c",551  Warning[Pe167]: 
          argument of type "char *" is incompatible with parameter of type
          "unsigned char *"

    uchar status = 0xab;
          ^
"D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\IC_w_r.c",535  Warning[Pe177]: 
          variable "status" was declared but never referenced
   \                     ??IC_CMT_0:
   \   000099                ; Setup parameters for call to function UartSend
   \   000099                ; Setup parameters for call to function PcdWrite
   \   000099   EE           MOV     A,R6
   \   00009A   FA           MOV     R2,A
   \   00009B   EF           MOV     A,R7
   \   00009C   FB           MOV     R3,A
   \   00009D   7910         MOV     R1,#0x10
   \   00009F   12....       LCALL   ??PcdWrite?relay
   \                     ??IC_CMT_1:
   \   0000A2   12....       LCALL   ??UartSend?relay
   \   0000A5                ; Setup parameters for call to function UartSend
   \   0000A5                ; Setup parameters for call to function PcdHalt
   \   0000A5   12....       LCALL   ??PcdHalt?relay
   \   0000A8   12....       LCALL   ??UartSend?relay
   \   0000AB   7420         MOV     A,#0x20
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   7F05         MOV     R7,#0x5
   \   0000B2   02....       LJMP    ?BANKED_LEAVE_XDATA
     27          #include "IC_w_r.h"
     28          #include "UART.c"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void UartInitial()
   \                     UartInitial:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003                REQUIRE ?Subroutine1
   \   000003                REQUIRE PERCFG
   \   000003                REQUIRE P0SEL
   \   000003                REQUIRE P2DIR
   \   000003                REQUIRE U0CSR
   \   000003                REQUIRE U0GCR
   \   000003                REQUIRE U0BAUD
   \   000003                REQUIRE _A_IRCON2
   \   000003                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   C2E9         CLR     0xe8.1
   \   000002   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   75F100       MOV     0xf1,#0x0
   \   000003   75F30C       MOV     0xf3,#0xc
   \   000006   53FF3F       ANL     0xff,#0x3f
   \   000009   438680       ORL     0x86,#0x80
   \   00000C   43C50B       ORL     0xc5,#0xb
   \   00000F   43C2D8       ORL     0xc2,#0xd8
   \   000012   438640       ORL     0x86,#0x40
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void UartSend(unsigned char)
   \                     UartSend:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   89C1         MOV     0xc1,R1
   \                     ??UartSend_0:
   \   000002   A2E9         MOV     C,0xe8.1
   \   000004   50FC         JNC     ??UartSend_0
   \   000006   80..         SJMP    ?Subroutine1
   \   000008                REQUIRE U0DBUF
   \   000008                REQUIRE _A_IRCON2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void UartSend_String(char *, int)
   \                     UartSend_String:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   801A         SJMP    ??UartSend_String_0
   \                     ??UartSend_String_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5C1         MOV     0xc1,A
   \   000012   A3           INC     DPTR
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \                     ??UartSend_String_2:
   \   000017   A2E9         MOV     C,0xe8.1
   \   000019   50FC         JNC     ??UartSend_String_2
   \   00001B   C2E9         CLR     0xe8.1
   \   00001D   E8           MOV     A,R0
   \   00001E   2401         ADD     A,#0x1
   \   000020   08           INC     R0
   \   000021   E9           MOV     A,R1
   \   000022   3400         ADDC    A,#0x0
   \   000024   F9           MOV     R1,A
   \                     ??UartSend_String_0:
   \   000025   C3           CLR     C
   \   000026   E8           MOV     A,R0
   \   000027   9C           SUBB    A,R4
   \   000028   E9           MOV     A,R1
   \   000029   9D           SUBB    A,R5
   \   00002A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00002C   65D0         XRL     A,PSW
   \   00002E   33           RLC     A
   \   00002F   40DA         JC      ??UartSend_String_1
   \   000031   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   \   000034                REQUIRE U0DBUF
   \   000034                REQUIRE _A_IRCON2
     29          #include "UART.h"
     30          
     31          
     32          //---------------------------------------------------------------------
     33          //标准版不同的终端需要修改此ID,用于识别协调器发过来的数据，ID相同则处理

   \                                 In  segment XDATA_I, align 1, keep-with-next
     34          static uint16 EndDeviceID = 0x0001 ; //终端ID，重要
   \                     EndDeviceID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for EndDeviceID>`
   \   000002                REQUIRE __INIT_XDATA_I
     35          //---------------------------------------------------------------------
     36          
     37          //定义节点功能用作传感器或气体+蜂鸣器,还是步进电机
     38          #define WSN_SENSOR     //用作4个采集节点
     39          //#define WSN_BEEP     //气体+蜂鸣器 EndDeviceID=5
     40          //#define WSN_STEP     //步进电机    EndDeviceID=6
     41          
     42          
     43          
     44          #define LAMP_PIN     P0_5  //定义P0.5口为继电器输入端
     45          #define GAS_PIN      P0_6  //定义P0.6口为烟雾传感器的输入端  
     46          #define BEEP_PIN     P0_7  //定义P0.7口为蜂鸣器的输出端  
     47          
     48          #define A1 P0_4            //定义步进电机连接端口
     49          #define B1 P0_5
     50          #define C1 P0_6
     51          #define D1 P0_7
     52          
     53          
     54          #define UART0        0x00
     55          #define MAX_NODE     0x04
     56          #define UART_DEBUG   0x00 //调试宏,通过串口输出协调器和终端的IEEE、短地址
     57          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
     58          
     59          #define TIMER1_RUN()  T1CTL|=0X03
     60          #define TIMER1_STOP() T1CTL&=~0X03
     61          /*********************************************************************
     62          * CONSTANTS
     63          */
     64          
     65          #if !defined( SERIAL_APP_PORT )
     66          #define SERIAL_APP_PORT  0
     67          #endif
     68          
     69          #if !defined( SERIAL_APP_BAUD )
     70          #define SERIAL_APP_BAUD  HAL_UART_BR_115200  //HAL_UART_BR_38400
     71          #endif
     72          
     73          // When the Rx buf space is less than this threshold, invoke the Rx callback.
     74          #if !defined( SERIAL_APP_THRESH )
     75          #define SERIAL_APP_THRESH  64
     76          #endif
     77          
     78          #if !defined( SERIAL_APP_RX_SZ )
     79          #define SERIAL_APP_RX_SZ  128
     80          #endif
     81          
     82          #if !defined( SERIAL_APP_TX_SZ )
     83          #define SERIAL_APP_TX_SZ  128
     84          #endif
     85          
     86          // Millisecs of idle time after a byte is received before invoking Rx callback.
     87          #if !defined( SERIAL_APP_IDLE )
     88          #define SERIAL_APP_IDLE  6
     89          #endif
     90          
     91          // Loopback Rx bytes to Tx for throughput testing.
     92          #if !defined( SERIAL_APP_LOOPBACK )
     93          #define SERIAL_APP_LOOPBACK  FALSE
     94          #endif
     95          
     96          // This is the max byte count per OTA message.
     97          #if !defined( SERIAL_APP_TX_MAX )
     98          #define SERIAL_APP_TX_MAX  20
     99          #endif
    100          
    101          #define SERIAL_APP_RSP_CNT  4
    102          
    103          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    104          const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
   \                     SerialApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0000         DW 0
    105          {
    106            SERIALAPP_CLUSTERID
    107          };
    108          

   \                                 In  segment XDATA_ROM_C, align 1
    109          const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
   \                     SerialApp_SimpleDesc:
   \   000000   0B           DB 11
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SerialApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SerialApp_ClusterList
    110          {
    111            SERIALAPP_ENDPOINT,              //  int   Endpoint;
    112            SERIALAPP_PROFID,                //  uint16 AppProfId[2];
    113            SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    114            SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    115            SERIALAPP_FLAGS,                 //  int   AppFlags:4;
    116            SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    117            (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
    118            SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
    119            (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
    120          };
    121          

   \                                 In  segment XDATA_ROM_C, align 1
    122          const endPointDesc_t SerialApp_epDesc =
   \                     SerialApp_epDesc:
   \   000000   0B           DB 11
   \   000001   ....         DW SerialApp_TaskID
   \   000003   ....         DW SerialApp_SimpleDesc
   \   000005   00           DB 0
    123          {
    124            SERIALAPP_ENDPOINT,
    125            &SerialApp_TaskID,
    126            (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
    127            noLatencyReqs
    128          };
    129          
    130          
    131          /*********************************************************************
    132          * GLOBAL VARIABLES
    133          */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    134          uint8 AppTitle[20] = "ALD WSN-system"; //应用程序名称
   \                     AppTitle:
   \   000000                DS 20
   \   000014                REQUIRE `?<Initializer for AppTitle>`
   \   000014                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
   \                     SerialApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          
    137          
    138          /*********************************************************************
    139          * LOCAL VARIABLES
    140          */
    141          #ifdef WSN_SENSOR

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          static bool SendFlag = 0;
   \                     SendFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143          #endif
    144          static uint8 SerialApp_MsgID;
    145          
    146          static afAddrType_t SerialApp_TxAddr;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          static afAddrType_t Broadcast_DstAddr;
   \                     Broadcast_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          static uint8 SerialApp_TxSeq;
   \                     SerialApp_TxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
   \                     SerialApp_TxBuf:
   \   000000                DS 21
   \   000015                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8 SerialApp_TxLen;
   \                     SerialApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          static afAddrType_t SerialApp_RxAddr;
   \                     SerialApp_RxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
   \                     SerialApp_RspBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          static devStates_t SerialApp_NwkState;
   \                     SerialApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static afAddrType_t SerialApp_TxAddr;
   \                     SerialApp_TxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          static uint8 SerialApp_MsgID;
   \                     SerialApp_MsgID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    159          
    160          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 NodeData[MAX_NODE][5];         //终端数据缓冲区 0=温度 1=湿度 2=气体 3=灯
   \                     NodeData:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          uint8 TxBuffer[128];
   \                     TxBuffer:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z
    163          
    164          //电机相关的变量

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 LedState = 0;
   \                     LedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          uint8 ucEdDir = 1;      //终端1为正转  2为反转
   \                     ucEdDir:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ucEdDir>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 ucDirection = 1;  //1为正转  2为反转
   \                     ucDirection:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ucDirection>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    168          uint8 ucSpeed = 2;      //速度2-10之间
   \                     ucSpeed:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ucSpeed>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          uint8 DataBuf[3];
   \                     DataBuf:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    171          uchar phasecw[4] ={0x80,0x40,0x20,0x10};//正转 电机导通相序 D-C-B-A
   \                     phasecw:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for phasecw>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    172          uchar phaseccw[4]={0x10,0x20,0x40,0x80};//反转 电机导通相序 A-B-C-D
   \                     phaseccw:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for phaseccw>`
   \   000004                REQUIRE __INIT_XDATA_I
    173          /*********************************************************************
    174          * LOCAL FUNCTIONS
    175          */
    176          
    177          static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
    178          static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
    179          static void SerialApp_Send(void);
    180          static void SerialApp_Resp(void);
    181          static void SerialApp_CallBack(uint8 port, uint8 event);
    182          
    183          #if UART_DEBUG  
    184          static void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
    185          static void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr);
    186          #endif
    187          static void AfSendAddrInfo(void);
    188          static void SerialApp_SendPeriodicMessage( void );
    189          static uint8 GetDataLen(uint8 fc);
    190          static uint8 GetLamp( void );
    191          static uint8 GetGas( void );
    192          static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
    193          uint8 SendData(uint8 addr, uint8 FC);
    194          
    195          //WSN_BEEP
    196          void init_timer(void);
    197          void init_port(void);
    198          void start_pwm(void) ;
    199          __interrupt void _IRQ_timer1(void);
    200          
    201          //WSN_STEP
    202          static void MotorData(uchar data);
    203          static void MotorCW(void);
    204          static void MotorCCW(void);
    205          static void MotorStop(void);
    206          
    207          //RFID
    208          static void RFID(void);
    209          //GPS
    210          
    211          #define SIZE 100

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          char GPSRxData[SIZE]; 
   \                     GPSRxData:
   \   000000                DS 100
   \   000064                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    213          char CompareString[6] = "$GNRMC";
   \                     CompareString:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for CompareString>`
   \   000006                REQUIRE __INIT_XDATA_I
    214          static void GPS( void );

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          int GPScount = 0;
   \                     GPScount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    216          
    217          static void Delay_MS(unsigned int Time);
    218          #ifdef WSN_STEP
    219          static void InitStepMotor(void);
    220          #endif
    221          /*********************************************************************
    222          * @fn      SerialApp_Init
    223          *
    224          * @brief   This is called during OSAL tasks' initialization.
    225          *
    226          * @param   task_id - the Task ID assigned by OSAL.
    227          *
    228          * @return  none
    229          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          void SerialApp_Init( uint8 task_id )
   \                     SerialApp_Init:
    231          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
    232            halUARTCfg_t uartConfig;
    233            
    234          #ifdef WSN_SENSOR
    235            P0SEL &= ~0x20;         //设置P0.5口为普通IO
   \   00000C   53F3DF       ANL     0xf3,#0xdf
    236            P0DIR |= 0x20;          //设置P0.5为输出
   \   00000F   43FD20       ORL     0xfd,#0x20
    237            LAMP_PIN = 1;           //高电平继电器断开;低电平继电器吸合
   \   000012   D285         SETB    0x80.5
    238            P0SEL &= ~0x40;         //设置P0.6为普通IO口
   \   000014   53F3BF       ANL     0xf3,#0xbf
    239            P0DIR &= ~0x40;         //P0.6定义为输入口
   \   000017   53FDBF       ANL     0xfd,#0xbf
    240            P0SEL &= ~0x80;         //P0_7配置成通用io
   \   00001A   53F37F       ANL     0xf3,#0x7f
    241          #elif defined WSN_BEEP
    242            P0SEL &= ~0x40;         //设置P0.6为普通IO口
    243            P0DIR &= ~0x40;         //P0.6定义为输入口
    244            start_pwm();            //配置T1输出PWM
    245            TIMER1_STOP();          //默认关闭蜂鸣器
    246            EndDeviceID = 0x0005;   //终端5的内部编号  
    247          #elif defined WSN_STEP
    248            InitStepMotor();        //初始化电机IO引脚
    249            EndDeviceID = 0x0006;   //终端6的内部编号  
    250          #endif
    251          
    252          #if defined(ZDO_COORDINATOR) 
    253            EndDeviceID = 0x0000; 
   \   00001D   90....       MOV     DPTR,#EndDeviceID
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   F0           MOVX    @DPTR,A
    254          #endif
    255            
    256            Color    = BLACK; //前景色
   \   000024   90....       MOV     DPTR,#Color
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   F0           MOVX    @DPTR,A
    257            Color_BK = GREEN; //背景色
   \   00002A   90....       MOV     DPTR,#Color_BK
   \   00002D   74E0         MOV     A,#-0x20
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   7407         MOV     A,#0x7
   \   000033   F0           MOVX    @DPTR,A
    258            osal_memset(AppTitle, 0, 20);
   \   000034                ; Setup parameters for call to function osal_memset
   \   000034   7C14         MOV     R4,#0x14
   \   000036   7D00         MOV     R5,#0x0
   \   000038   7900         MOV     R1,#0x0
   \   00003A   7A..         MOV     R2,#AppTitle & 0xff
   \   00003C   7B..         MOV     R3,#(AppTitle >> 8) & 0xff
   \   00003E   12....       LCALL   ??osal_memset?relay
    259            //LCD上显示应用程序的标题
    260            if(EndDeviceID == 0x0001)
   \   000041   90....       MOV     DPTR,#EndDeviceID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   6401         XRL     A,#0x1
   \   000047   7002         JNZ     ??SerialApp_Init_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_0:
   \   00004B   7015         JNZ     ??SerialApp_Init_1
    261              osal_memcpy(AppTitle, "ALD WSN-Node01", osal_strlen("ALD WSN-Node01"));
   \   00004D                ; Setup parameters for call to function osal_memcpy
   \   00004D   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node01">` & 0xff
   \   000050   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
   \   000053   75..00       MOV     ?V0 + 6,#0x0
   \   000056   78..         MOV     R0,#?V0 + 4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005B                ; Setup parameters for call to function osal_strlen
   \   00005B   7A..         MOV     R2,#`?<Constant "ALD WSN-Node01">` & 0xff
   \   00005D   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
   \   00005F   02....       LJMP    ??SerialApp_Init_2 & 0xFFFF
    262            else if(EndDeviceID == 0x0002)
   \                     ??SerialApp_Init_1:
   \   000062   90....       MOV     DPTR,#EndDeviceID
   \   000065   E0           MOVX    A,@DPTR
   \   000066   6402         XRL     A,#0x2
   \   000068   7002         JNZ     ??SerialApp_Init_3
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_3:
   \   00006C   7015         JNZ     ??SerialApp_Init_4
    263              osal_memcpy(AppTitle, "ALD WSN-Node02", osal_strlen("ALD WSN-Node02"));
   \   00006E                ; Setup parameters for call to function osal_memcpy
   \   00006E   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node02">` & 0xff
   \   000071   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
   \   000074   75..00       MOV     ?V0 + 6,#0x0
   \   000077   78..         MOV     R0,#?V0 + 4
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007C                ; Setup parameters for call to function osal_strlen
   \   00007C   7A..         MOV     R2,#`?<Constant "ALD WSN-Node02">` & 0xff
   \   00007E   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
   \   000080   02....       LJMP    ??SerialApp_Init_2 & 0xFFFF
    264            else if(EndDeviceID == 0x0003)
   \                     ??SerialApp_Init_4:
   \   000083   90....       MOV     DPTR,#EndDeviceID
   \   000086   E0           MOVX    A,@DPTR
   \   000087   6403         XRL     A,#0x3
   \   000089   7002         JNZ     ??SerialApp_Init_5
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_5:
   \   00008D   7014         JNZ     ??SerialApp_Init_6
    265              osal_memcpy(AppTitle, "ALD WSN-Node03", osal_strlen("ALD WSN-Node03"));
   \   00008F                ; Setup parameters for call to function osal_memcpy
   \   00008F   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node03">` & 0xff
   \   000092   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
   \   000095   75..00       MOV     ?V0 + 6,#0x0
   \   000098   78..         MOV     R0,#?V0 + 4
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009D                ; Setup parameters for call to function osal_strlen
   \   00009D   7A..         MOV     R2,#`?<Constant "ALD WSN-Node03">` & 0xff
   \   00009F   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
   \   0000A1   8072         SJMP    ??SerialApp_Init_2
    266            else if(EndDeviceID == 0x0004)
   \                     ??SerialApp_Init_6:
   \   0000A3   90....       MOV     DPTR,#EndDeviceID
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   6404         XRL     A,#0x4
   \   0000A9   7002         JNZ     ??SerialApp_Init_7
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_7:
   \   0000AD   7014         JNZ     ??SerialApp_Init_8
    267              osal_memcpy(AppTitle, "ALD WSN-Node04", osal_strlen("ALD WSN-Node04"));
   \   0000AF                ; Setup parameters for call to function osal_memcpy
   \   0000AF   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node04">` & 0xff
   \   0000B2   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
   \   0000B5   75..00       MOV     ?V0 + 6,#0x0
   \   0000B8   78..         MOV     R0,#?V0 + 4
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BD                ; Setup parameters for call to function osal_strlen
   \   0000BD   7A..         MOV     R2,#`?<Constant "ALD WSN-Node04">` & 0xff
   \   0000BF   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
   \   0000C1   8052         SJMP    ??SerialApp_Init_2
    268            else if(EndDeviceID == 0x0005)
   \                     ??SerialApp_Init_8:
   \   0000C3   90....       MOV     DPTR,#EndDeviceID
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   6405         XRL     A,#0x5
   \   0000C9   7002         JNZ     ??SerialApp_Init_9
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_9:
   \   0000CD   7014         JNZ     ??SerialApp_Init_10
    269              osal_memcpy(AppTitle, "ALD WSN-BEEP05", osal_strlen("ALD WSN-BEEP05"));    
   \   0000CF                ; Setup parameters for call to function osal_memcpy
   \   0000CF   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-BEEP05">` & 0xff
   \   0000D2   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
   \   0000D5   75..00       MOV     ?V0 + 6,#0x0
   \   0000D8   78..         MOV     R0,#?V0 + 4
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DD                ; Setup parameters for call to function osal_strlen
   \   0000DD   7A..         MOV     R2,#`?<Constant "ALD WSN-BEEP05">` & 0xff
   \   0000DF   7B..         MOV     R3,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
   \   0000E1   8032         SJMP    ??SerialApp_Init_2
    270            else if(EndDeviceID == 0x0006)
   \                     ??SerialApp_Init_10:
   \   0000E3   90....       MOV     DPTR,#EndDeviceID
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   6406         XRL     A,#0x6
   \   0000E9   7002         JNZ     ??SerialApp_Init_11
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_11:
   \   0000ED   7014         JNZ     ??SerialApp_Init_12
    271              osal_memcpy(AppTitle, "stepping motor", osal_strlen("stepping motor")); 
   \   0000EF                ; Setup parameters for call to function osal_memcpy
   \   0000EF   75....       MOV     ?V0 + 4,#`?<Constant "stepping motor">` & 0xff
   \   0000F2   75....       MOV     ?V0 + 5,#(`?<Constant "stepping motor">` >> 8) & 0xff
   \   0000F5   75..00       MOV     ?V0 + 6,#0x0
   \   0000F8   78..         MOV     R0,#?V0 + 4
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FD                ; Setup parameters for call to function osal_strlen
   \   0000FD   7A..         MOV     R2,#`?<Constant "stepping motor">` & 0xff
   \   0000FF   7B..         MOV     R3,#(`?<Constant "stepping motor">` >> 8) & 0xff
   \   000101   8012         SJMP    ??SerialApp_Init_2
    272            else
    273              osal_memcpy(AppTitle, "ALD WSN-system", osal_strlen("ALD WSN-system")); 
   \                     ??SerialApp_Init_12:
   \   000103                ; Setup parameters for call to function osal_memcpy
   \   000103   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-system">` & 0xff
   \   000106   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
   \   000109   75..00       MOV     ?V0 + 6,#0x0
   \   00010C   78..         MOV     R0,#?V0 + 4
   \   00010E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000111                ; Setup parameters for call to function osal_strlen
   \   000111   7A..         MOV     R2,#`?<Constant "ALD WSN-system">` & 0xff
   \   000113   7B..         MOV     R3,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
   \                     ??SerialApp_Init_2:
   \   000115   12....       LCALL   ??osal_strlen?relay
   \   000118   EA           MOV     A,R2
   \   000119   FC           MOV     R4,A
   \   00011A   EB           MOV     A,R3
   \   00011B   FD           MOV     R5,A
   \   00011C   7A..         MOV     R2,#AppTitle & 0xff
   \   00011E   7B..         MOV     R3,#(AppTitle >> 8) & 0xff
   \   000120   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000123   12....       LCALL   ?DEALLOC_XSTACK8
    274            
    275            LCD_write_EN_string(64-7*osal_strlen((char *)AppTitle)/2,3,AppTitle); //显示标题
   \   000126                ; Setup parameters for call to function LCD_write_EN_string
   \   000126   7A03         MOV     R2,#0x3
   \   000128   EA           MOV     A,R2
   \   000129   C0E0         PUSH    A
   \   00012B                ; Setup parameters for call to function osal_strlen
   \   00012B   7A..         MOV     R2,#AppTitle & 0xff
   \   00012D   7B..         MOV     R3,#(AppTitle >> 8) & 0xff
   \   00012F   12....       LCALL   ??osal_strlen?relay
   \   000132   EA           MOV     A,R2
   \   000133   75F007       MOV     B,#0x7
   \   000136   A4           MUL     AB
   \   000137   FA           MOV     R2,A
   \   000138   A8F0         MOV     R0,B
   \   00013A   75F007       MOV     B,#0x7
   \   00013D   EB           MOV     A,R3
   \   00013E   A4           MUL     AB
   \   00013F   28           ADD     A,R0
   \   000140   FB           MOV     R3,A
   \   000141   EA           MOV     A,R2
   \   000142   F8           MOV     R0,A
   \   000143   EB           MOV     A,R3
   \   000144   F9           MOV     R1,A
   \   000145   7A02         MOV     R2,#0x2
   \   000147   7B00         MOV     R3,#0x0
   \   000149   12....       LCALL   ?S_DIV_MOD
   \   00014C   7440         MOV     A,#0x40
   \   00014E   C3           CLR     C
   \   00014F   98           SUBB    A,R0
   \   000150   F9           MOV     R1,A
   \   000151   7C..         MOV     R4,#AppTitle & 0xff
   \   000153   74..         MOV     A,#(AppTitle >> 8) & 0xff
   \   000155   FD           MOV     R5,A
   \   000156   D0E0         POP     A
   \   000158   FA           MOV     R2,A
   \   000159   12....       LCALL   ??LCD_write_EN_string?relay
    276            
    277            SerialApp_TaskID = task_id;
   \   00015C   E5..         MOV     A,?V0 + 0
   \   00015E   90....       MOV     DPTR,#SerialApp_TaskID
   \   000161   F0           MOVX    @DPTR,A
    278            //SerialApp_RxSeq = 0xC3;
    279            afRegister( (endPointDesc_t *)&SerialApp_epDesc );
   \   000162                ; Setup parameters for call to function afRegister
   \   000162   7A..         MOV     R2,#SerialApp_epDesc & 0xff
   \   000164   7B..         MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
   \   000166   12....       LCALL   ??afRegister?relay
    280            RegisterForKeys( task_id );
   \   000169                ; Setup parameters for call to function RegisterForKeys
   \   000169   A9..         MOV     R1,?V0 + 0
   \   00016B   12....       LCALL   ??RegisterForKeys?relay
    281            
    282            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   00016E   85..82       MOV     DPL,?XSP + 0
   \   000171   85..83       MOV     DPH,?XSP + 1
   \   000174   7401         MOV     A,#0x1
   \   000176   F0           MOVX    @DPTR,A
    283            uartConfig.baudRate             = SERIAL_APP_BAUD;
   \   000177   12....       LCALL   ?XSTACK_DISP0_8
   \   00017A   7404         MOV     A,#0x4
   \   00017C   F0           MOVX    @DPTR,A
    284            uartConfig.flowControl          = FALSE;
   \   00017D   7402         MOV     A,#0x2
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   E4           CLR     A
   \   000183   F0           MOVX    @DPTR,A
    285            uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
   \   000184   7403         MOV     A,#0x3
   \   000186   12....       LCALL   ?XSTACK_DISP0_8
   \   000189   7440         MOV     A,#0x40
   \   00018B   F0           MOVX    @DPTR,A
   \   00018C   A3           INC     DPTR
   \   00018D   E4           CLR     A
   \   00018E   F0           MOVX    @DPTR,A
    286            uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
   \   00018F   740A         MOV     A,#0xa
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   7480         MOV     A,#-0x80
   \   000196   F0           MOVX    @DPTR,A
   \   000197   A3           INC     DPTR
   \   000198   E4           CLR     A
   \   000199   F0           MOVX    @DPTR,A
    287            uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
   \   00019A   7412         MOV     A,#0x12
   \   00019C   12....       LCALL   ?XSTACK_DISP0_8
   \   00019F   7480         MOV     A,#-0x80
   \   0001A1   F0           MOVX    @DPTR,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   E4           CLR     A
   \   0001A4   F0           MOVX    @DPTR,A
    288            uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
   \   0001A5   7405         MOV     A,#0x5
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   7406         MOV     A,#0x6
   \   0001AC   F0           MOVX    @DPTR,A
    289            uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
   \   0001AD   7416         MOV     A,#0x16
   \   0001AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B2   7401         MOV     A,#0x1
   \   0001B4   F0           MOVX    @DPTR,A
    290            uartConfig.callBackFunc         = SerialApp_CallBack;
   \   0001B5   741B         MOV     A,#0x1b
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   74..         MOV     A,#??SerialApp_CallBack?relay & 0xff
   \   0001BC   F0           MOVX    @DPTR,A
   \   0001BD   A3           INC     DPTR
   \   0001BE   74..         MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
   \   0001C0   F0           MOVX    @DPTR,A
    291            HalUARTOpen (UART0, &uartConfig);
   \   0001C1                ; Setup parameters for call to function HalUARTOpen
   \   0001C1   85..82       MOV     DPL,?XSP + 0
   \   0001C4   85..83       MOV     DPH,?XSP + 1
   \   0001C7   AA82         MOV     R2,DPL
   \   0001C9   AB83         MOV     R3,DPH
   \   0001CB   7900         MOV     R1,#0x0
   \   0001CD   12....       LCALL   ??HalUARTOpen?relay
    292            
    293            //#if defined ( LCD_SUPPORTED )
    294            //  HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
    295            //#endif
    296            //HalUARTWrite(UART0, "Init", 4);
    297            //ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
    298            //ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
    299          }
   \   0001D0   741D         MOV     A,#0x1d
   \   0001D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D5   7F07         MOV     R7,#0x7
   \   0001D7   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001DA                REQUIRE P0SEL
   \   0001DA                REQUIRE P0DIR
   \   0001DA                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    300          
    301          /*********************************************************************
    302          * @fn      SerialApp_ProcessEvent
    303          *
    304          * @brief   Generic Application Task event processor.
    305          *
    306          * @param   task_id  - The OSAL assigned task ID.
    307          * @param   events   - Bit map of events to process.
    308          *
    309          * @return  Event flags of all unprocessed events.
    310          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    311          UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
   \                     SerialApp_ProcessEvent:
    312          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    313            (void)task_id;  // Intentionally unreferenced parameter
    314            
    315            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7061         JNZ     ??SerialApp_ProcessEvent_0
    316            {
    317              afIncomingMSGPacket_t *MSGpkt;
    318              
    319              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
    320              {
    321                switch ( MSGpkt->hdr.event )
    322                {
    323                case ZDO_CB_MSG:
    324                  //SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    325                  break;
    326                  
    327                case KEY_CHANGE:
    328                  SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    329                  break;
    330                  
    331                case AF_INCOMING_MSG_CMD:
    332                  SerialApp_ProcessMSGCmd( MSGpkt );
    333                  break;
    334                  
    335                case ZDO_STATE_CHANGE:
    336                  SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    337                  if ( (SerialApp_NwkState == DEV_ZB_COORD)
    338                      || (SerialApp_NwkState == DEV_ROUTER)
    339                        || (SerialApp_NwkState == DEV_END_DEVICE) )
    340                  {
    341          #if defined(ZDO_COORDINATOR) //协调器通过串口输出自身短地址、IEEE  
    342                    Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    343                    Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
    344                    Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
    345          #if UART_DEBUG           
    346                    PrintAddrInfo( NLME_GetShortAddr(), aExtendedAddress + Z_EXTADDR_LEN - 1);
    347          #endif 
    348                    //初始化灯的状态，1为熄灭状态，0为点亮
    349                    NodeData[0][3] = 1;
    350                    NodeData[1][3] = 1;
    351                    NodeData[2][3] = 1;
    352                    NodeData[3][3] = 1;
    353          #else                        //终端无线发送短地址、IEEE   
    354                    AfSendAddrInfo();
    355          #ifdef WSN_BEEP              //蜂鸣器和气体实验时自动检测气体发现异常就报警
    356                    osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
    357                                       SERIALAPP_SEND_PERIODIC_TIMEOUT );
    358                    //(SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
    359          #endif
    360                    
    361          #endif
    362                  }
    363                  break;				
    364                default:
    365                  break;
    366                }
    367                
    368                osal_msg_deallocate( (uint8 *)MSGpkt );
    369              }
    370              
    371              return ( events ^ SYS_EVENT_MSG );
    372            }
    373            
    374            //在此事件中可以定时向协调器发送节点传感器参数信息
    375            if ( events & SERIALAPP_SEND_PERIODIC_EVT )
   \   00000D   EE           MOV     A,R6
   \   00000E   5403         ANL     A,#0x3
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
    376            {
    377              SerialApp_SendPeriodicMessage();
   \   000015                ; Setup parameters for call to function SerialApp_SendPeriodicMessage
   \   000015   12....       LCALL   ??SerialApp_SendPeriodicMessage?relay
    378              
    379              osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
    380                                 (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000018                ; Setup parameters for call to function osal_rand
   \   000018   12....       LCALL   ??osal_rand?relay
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   EA           MOV     A,R2
   \   00001C   2474         ADD     A,#0x74
   \   00001E   FC           MOV     R4,A
   \   00001F   E4           CLR     A
   \   000020   3404         ADDC    A,#0x4
   \   000022   FD           MOV     R5,A
   \   000023   12....       LCALL   ?Subroutine18 & 0xFFFF
    381              
    382              return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
   \                     ??CrossCallReturnLabel_64:
   \   000026   EE           MOV     A,R6
   \   000027   6403         XRL     A,#0x3
   \                     ??SerialApp_ProcessEvent_2:
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \                     ??SerialApp_ProcessEvent_3:
   \   00002B   FB           MOV     R3,A
   \   00002C   02....       LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
    383            }
   \                     ??SerialApp_ProcessEvent_5:
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   90....       MOV     DPTR,#SerialApp_NwkState
   \   000034   F0           MOVX    @DPTR,A
   \   000035   6409         XRL     A,#0x9
   \   000037   600A         JZ      ??SerialApp_ProcessEvent_6
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6407         XRL     A,#0x7
   \   00003C   6005         JZ      ??SerialApp_ProcessEvent_6
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6406         XRL     A,#0x6
   \   000041   7024         JNZ     ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_6:
   \   000043   90....       MOV     DPTR,#Broadcast_DstAddr + 8
   \   000046   740F         MOV     A,#0xf
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   740B         MOV     A,#0xb
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   90....       MOV     DPTR,#Broadcast_DstAddr
   \   000050   74FF         MOV     A,#-0x1
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   F0           MOVX    @DPTR,A
   \   000055   90....       MOV     DPTR,#NodeData + 3
   \   000058   7401         MOV     A,#0x1
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   90....       MOV     DPTR,#NodeData + 8
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   90....       MOV     DPTR,#NodeData + 13
   \   000062   F0           MOVX    @DPTR,A
   \   000063   90....       MOV     DPTR,#NodeData + 18
   \   000066   F0           MOVX    @DPTR,A
   \                     ??SerialApp_ProcessEvent_7:
   \   000067                ; Setup parameters for call to function osal_msg_deallocate
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??SerialApp_ProcessEvent_0:
   \   00006E                ; Setup parameters for call to function osal_msg_receive
   \   00006E   90....       MOV     DPTR,#SerialApp_TaskID
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   12....       LCALL   ??osal_msg_receive?relay
   \   000076   8A..         MOV     ?V0 + 0,R2
   \   000078   8B..         MOV     ?V0 + 1,R3
   \   00007A   EA           MOV     A,R2
   \   00007B   45..         ORL     A,?V0 + 1
   \   00007D   605F         JZ      ??SerialApp_ProcessEvent_8
   \   00007F   8A82         MOV     DPL,R2
   \   000081   8B83         MOV     DPH,R3
   \   000083   E0           MOVX    A,@DPTR
   \   000084   24E6         ADD     A,#-0x1a
   \   000086   6051         JZ      ??SerialApp_ProcessEvent_9
   \   000088   245A         ADD     A,#0x5a
   \   00008A   6006         JZ      ??SerialApp_ProcessEvent_10
   \   00008C   24EF         ADD     A,#-0x11
   \   00008E   609F         JZ      ??SerialApp_ProcessEvent_5
   \   000090   80D5         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_10:
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F5..         MOV     ?V0 + 2,A
   \   000098   A2E5         MOV     C,0xE0 /* A   */.5
   \   00009A   502B         JNC     ??SerialApp_ProcessEvent_11
   \   00009C   90....       MOV     DPTR,#SendFlag
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   7011         JNZ     ??SerialApp_ProcessEvent_12
   \   0000A2   7401         MOV     A,#0x1
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5                ; Setup parameters for call to function HalLedSet
   \   0000A5   FA           MOV     R2,A
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   ??HalLedSet?relay
   \   0000AA                ; Setup parameters for call to function osal_start_timerEx
   \   0000AA   7C74         MOV     R4,#0x74
   \   0000AC   7D04         MOV     R5,#0x4
   \   0000AE   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000B1   8014         SJMP    ??SerialApp_ProcessEvent_11
   \                     ??SerialApp_ProcessEvent_12:
   \   0000B3   E4           CLR     A
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5                ; Setup parameters for call to function HalLedSet
   \   0000B5   FA           MOV     R2,A
   \   0000B6   7901         MOV     R1,#0x1
   \   0000B8   12....       LCALL   ??HalLedSet?relay
   \   0000BB                ; Setup parameters for call to function osal_stop_timerEx
   \   0000BB   7A03         MOV     R2,#0x3
   \   0000BD   7B00         MOV     R3,#0x0
   \   0000BF   90....       MOV     DPTR,#SerialApp_TaskID
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F9           MOV     R1,A
   \   0000C4   12....       LCALL   ??osal_stop_timerEx?relay
   \                     ??SerialApp_ProcessEvent_11:
   \   0000C7   E5..         MOV     A,?V0 + 2
   \   0000C9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000CB   509A         JNC     ??SerialApp_ProcessEvent_7
   \   0000CD   D2F0         SETB    B.0
   \   0000CF   A285         MOV     C,0x80.5
   \   0000D1   30F001       JNB     B.0,??SerialApp_ProcessEvent_13
   \   0000D4   B3           CPL     C
   \                     ??SerialApp_ProcessEvent_13:
   \   0000D5   9285         MOV     0x80.5,C
   \   0000D7   808E         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_9:
   \   0000D9                ; Setup parameters for call to function SerialApp_ProcessMSGCmd
   \   0000D9   12....       LCALL   ??SerialApp_ProcessMSGCmd?relay
   \   0000DC   8089         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_8:
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FA           MOV     R2,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   6480         XRL     A,#0x80
   \   0000E3   02....       LJMP    ??SerialApp_ProcessEvent_3 & 0xFFFF
    384            
    385            if ( events & SERIALAPP_SEND_EVT )
   \                     ??SerialApp_ProcessEvent_1:
   \   0000E6   EE           MOV     A,R6
   \   0000E7   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000E9   5009         JNC     ??SerialApp_ProcessEvent_14
    386            {
    387              SerialApp_Send();
   \   0000EB                ; Setup parameters for call to function SerialApp_Send
   \   0000EB   12....       LCALL   ??SerialApp_Send?relay
    388              return ( events ^ SERIALAPP_SEND_EVT );
   \   0000EE   EE           MOV     A,R6
   \   0000EF   6401         XRL     A,#0x1
   \   0000F1   02....       LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
    389            }
    390            
    391            if ( events & SERIALAPP_RESP_EVT )
   \                     ??SerialApp_ProcessEvent_14:
   \   0000F4   5402         ANL     A,#0x2
   \   0000F6   6058         JZ      ??SerialApp_ProcessEvent_15
    392            {
    393              SerialApp_Resp();
   \   0000F8                ; Setup parameters for call to function AF_DataRequest
   \   0000F8   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000FB   78..         MOV     R0,#?V0 + 0
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000100   75....       MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
   \   000103   75....       MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
   \   000106   78..         MOV     R0,#?V0 + 0
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   75....       MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
   \   00010E   75....       MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
   \   000111   78..         MOV     R0,#?V0 + 0
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000116   75..04       MOV     ?V0 + 0,#0x4
   \   000119   75..00       MOV     ?V0 + 1,#0x0
   \   00011C   78..         MOV     R0,#?V0 + 0
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000121   75..02       MOV     ?V0 + 0,#0x2
   \   000124   78..         MOV     R0,#?V0 + 0
   \   000126   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000129   7900         MOV     R1,#0x0
   \   00012B   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   00012D   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   00012F   7A..         MOV     R2,#SerialApp_RxAddr & 0xff
   \   000131   7B..         MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
   \   000133   12....       LCALL   ??AF_DataRequest?relay
   \   000136   7409         MOV     A,#0x9
   \   000138   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013B   E9           MOV     A,R1
   \   00013C   600C         JZ      ??SerialApp_ProcessEvent_16
   \   00013E                ; Setup parameters for call to function osal_set_event
   \   00013E   7A02         MOV     R2,#0x2
   \   000140   7B00         MOV     R3,#0x0
   \   000142   90....       MOV     DPTR,#SerialApp_TaskID
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F9           MOV     R1,A
   \   000147   12....       LCALL   ??osal_set_event?relay
    394              return ( events ^ SERIALAPP_RESP_EVT );
   \                     ??SerialApp_ProcessEvent_16:
   \   00014A   EE           MOV     A,R6
   \   00014B   6402         XRL     A,#0x2
   \   00014D   02....       LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
    395            }
    396            
    397            return ( 0 ); 
   \                     ??SerialApp_ProcessEvent_15:
   \   000150   7A00         MOV     R2,#0x0
   \   000152   7B00         MOV     R3,#0x0
   \                     ??SerialApp_ProcessEvent_4:
   \   000154   02....       LJMP    ?Subroutine6 & 0xFFFF
   \   000157                REQUIRE _A_P0
    398          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7A03         MOV     R2,#0x3
   \   000002                REQUIRE ??Subroutine38_0
   \   000002                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#SerialApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET
    399          
    400          /*********************************************************************
    401          * @fn      SerialApp_HandleKeys
    402          *
    403          * @brief   Handles all key events for this device.
    404          *
    405          * @param   shift - true if in shift/alt.
    406          * @param   keys  - bit field for key events.
    407          *
    408          * @return  none
    409          */
    410          void SerialApp_HandleKeys( uint8 shift, uint8 keys )
    411          { 
    412            if ( keys & HAL_KEY_SW_6 ) //按S1键启动或停止终端定时上报数据 
    413            {
    414          #ifdef WSN_SENSOR
    415              if(SendFlag == 0)
    416              {
    417                SendFlag = 1;
    418                HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    419                osal_start_timerEx( SerialApp_TaskID,
    420                                   SERIALAPP_SEND_PERIODIC_EVT,
    421                                   SERIALAPP_SEND_PERIODIC_TIMEOUT );
    422              }
    423              else
    424              {      
    425                SendFlag = 0;
    426                HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    427                osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
    428              }
    429          #endif
    430            }
    431            
    432            if ( keys & HAL_KEY_SW_1 ) //按S2
    433            {
    434              LAMP_PIN = ~LAMP_PIN;
    435            }
    436            
    437          }
    438          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003                REQUIRE ??Subroutine34_0
   \   000003                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
   \                     SerialApp_ProcessMSGCmd:
    440          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    441            uint16 i, shortAddr;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced

    uint16 i, shortAddr;
              ^
"D:\安连德\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",441  Warning[Pe550]: 
          variable "shortAddr" was set but never used
    442            uint8 *pIeeeAddr; 
                          ^
Warning[Pe550]: variable "pIeeeAddr" was set but never used
    443            uint8 delay;
    444            uint8 afRxData[30]={0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>_2` & 0xff
   \   00001A   741E         MOV     A,#0x1e
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    445            //RFID();
    446            
    447            //查询单个终端上所有传感器的数据 3A 00 01 02 39 23  响应：3A 00 01 02 00 00 00 00 xor 23
    448            switch ( pkt->clusterId )
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 1,A
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
   \   000033   0100         DW        1
   \   000035   01           DB        1
   \   000036   ....         DW        ??CrossCallReturnLabel_65
   \   000038   ....         DW        ??SerialApp_ProcessMSGCmd_0
   \   00003A   ....         DW        ??SerialApp_ProcessMSGCmd_1
    449            {
    450              // A message with a serial data block to be transmitted on the serial port.
    451            case SERIALAPP_CLUSTERID:
    452              osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
   \                     ??SerialApp_ProcessMSGCmd_0:
   \   00003C                ; Setup parameters for call to function osal_memcpy
   \   00003C   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00003F   F5..         MOV     ?V0 + 0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V0 + 1,A
   \   000045   75..00       MOV     ?V0 + 2,#0x0
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004D   EA           MOV     A,R2
   \   00004E   2420         ADD     A,#0x20
   \   000050   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000053   FC           MOV     R4,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FD           MOV     R5,A
   \   000057   7403         MOV     A,#0x3
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   AA82         MOV     R2,DPL
   \   00005E   AB83         MOV     R3,DPH
   \   000060   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
    453              switch(afRxData[0]) //简单协议命令字解析
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   643A         XRL     A,#0x3a
   \   00006F   6003         JZ      $+5
   \   000071   02....       LJMP    ??CrossCallReturnLabel_65 & 0xFFFF
    454              {
    455          #if defined(ZDO_COORDINATOR)
    456              case 0x3B:  //收到终端无线发过来的短地址和IEEE地址,通过串口输出显示      
    457                shortAddr=(afRxData[1]<<8)|afRxData[2];
    458                pIeeeAddr = &afRxData[3];
    459          #if UART_DEBUG
    460                PrintAddrInfo(shortAddr, pIeeeAddr + Z_EXTADDR_LEN - 1);
    461          #endif   
    462                break;
    463              case 0x3A:	
    464                if(afRxData[3] == 0x02) //收到终端传过来的传感器数据并保存
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   6402         XRL     A,#0x2
   \   00007C   6003         JZ      $+5
   \   00007E   02....       LJMP    ??CrossCallReturnLabel_65 & 0xFFFF
    465                {  
    466                  NodeData[afRxData[2]-1][0] = afRxData[4];
   \   000081   7402         MOV     A,#0x2
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   E0           MOVX    A,@DPTR
   \   000087   75F005       MOV     B,#0x5
   \   00008A   A4           MUL     AB
   \   00008B   F8           MOV     R0,A
   \   00008C   A9F0         MOV     R1,B
   \   00008E   74..         MOV     A,#NodeData & 0xff
   \   000090   28           ADD     A,R0
   \   000091   F8           MOV     R0,A
   \   000092   74..         MOV     A,#(NodeData >> 8) & 0xff
   \   000094   39           ADDC    A,R1
   \   000095   F9           MOV     R1,A
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   C0E0         PUSH    A
   \   00009E   E8           MOV     A,R0
   \   00009F   24FB         ADD     A,#-0x5
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E9           MOV     A,R1
   \   0000A4   34FF         ADDC    A,#-0x1
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   D0E0         POP     A
   \   0000AA   F0           MOVX    @DPTR,A
    467                  NodeData[afRxData[2]-1][1] = afRxData[5];
   \   0000AB   7405         MOV     A,#0x5
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   C0E0         PUSH    A
   \   0000B3   E8           MOV     A,R0
   \   0000B4   24FC         ADD     A,#-0x4
   \   0000B6   F582         MOV     DPL,A
   \   0000B8   E9           MOV     A,R1
   \   0000B9   34FF         ADDC    A,#-0x1
   \   0000BB   F583         MOV     DPH,A
   \   0000BD   D0E0         POP     A
   \   0000BF   F0           MOVX    @DPTR,A
    468                  NodeData[afRxData[2]-1][2] = afRxData[6];
   \   0000C0   7406         MOV     A,#0x6
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C0E0         PUSH    A
   \   0000C8   E8           MOV     A,R0
   \   0000C9   24FD         ADD     A,#-0x3
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   E9           MOV     A,R1
   \   0000CE   34FF         ADDC    A,#-0x1
   \   0000D0   F583         MOV     DPH,A
   \   0000D2   D0E0         POP     A
   \   0000D4   F0           MOVX    @DPTR,A
    469                  NodeData[afRxData[2]-1][3] = afRxData[7];
   \   0000D5   7407         MOV     A,#0x7
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   C0E0         PUSH    A
   \   0000DD   E8           MOV     A,R0
   \   0000DE   24FE         ADD     A,#-0x2
   \   0000E0   F582         MOV     DPL,A
   \   0000E2   E9           MOV     A,R1
   \   0000E3   34FF         ADDC    A,#-0x1
   \   0000E5   F583         MOV     DPH,A
   \   0000E7   D0E0         POP     A
   \   0000E9   F0           MOVX    @DPTR,A
    470                  NodeData[afRxData[2]-1][4] = 0x00;
   \   0000EA   E8           MOV     A,R0
   \   0000EB   24FF         ADD     A,#-0x1
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E9           MOV     A,R1
   \   0000F0   34FF         ADDC    A,#-0x1
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   E4           CLR     A
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   804C         SJMP    ??CrossCallReturnLabel_65
    471                }
    472                
    473          #if UART_DEBUG
    474                HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4); //调试时通过串口输出
    475                HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4); //调试时通过串口输出
    476                HalUARTWrite (UART0, "\n", 1);
    477          #endif            
    478                break;
    479          #else  
    480              case 0x3A:  //开关灯设备          
    481                if(afRxData[3] == 0x0A || afRxData[3] == 0x0B || afRxData[3] == 0x0C) //控制终端          
    482                {  
    483                  if(EndDeviceID == afRxData[2] || afRxData[2]==0xFF)
    484                  {
    485                    if(afRxData[4] == 0)
    486                    {
    487                      LAMP_PIN = 0;
    488                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
    489                    }
    490                    else
    491                    {
    492                      LAMP_PIN = 1;
    493                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    494                    }
    495                  }
    496                  break;
    497                }	
    498                else if(afRxData[3] == 0x07)      //蜂鸣器 功能码为07
    499                {
    500                  if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)  //蜂鸣器 EndDeviceID为05
    501                  {
    502                    if(afRxData[4] == 0)
    503                    {
    504                      TIMER1_STOP();               //收到协调发出的蜂鸣器不响的指令
    505                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
    506                    }
    507                    else
    508                    {
    509                      TIMER1_RUN();               //收到协调发出的蜂鸣器响的指令
    510                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    511                    }
    512                  } 
    513                }
    514                else if(afRxData[3] == 0x08)    //电机 功能码为08
    515                {
    516                  if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)//电机 EndDeviceID为06
    517                  {
    518                    ucEdDir = afRxData[4];      //保存旋转方向给调速用
    519                    MotorStop();                //停止转动
    520                    if(afRxData[4] == 0x02)   
    521                    {
    522                      for(i=0;i<2000;i++)
    523                        MotorCW();              //顺时针转动
    524                    }
    525                    else if(afRxData[4] == 0x01)//左转标记 
    526                    {
    527                      for(i=0;i<2000;i++)
    528                        MotorCCW();             //逆时针转动
    529                    }
    530                  }
    531                }
    532          #endif
    533                default :
    534                  break;
    535                }
    536                break;
    537                // A response to a received serial data block.
    538              case SERIALAPP_CLUSTERID2:
    539                if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
    540                    ((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
   \                     ??SerialApp_ProcessMSGCmd_1:
   \   0000F8   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   90....       MOV     DPTR,#SerialApp_TxSeq
   \   000100   E0           MOVX    A,@DPTR
   \   000101   68           XRL     A,R0
   \   000102   7033         JNZ     ??SerialApp_ProcessMSGCmd_2
   \   000104   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000107   F8           MOV     R0,A
   \   000108   A3           INC     DPTR
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F583         MOV     DPH,A
   \   00010C   8882         MOV     DPL,R0
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   6014         JZ      ??SerialApp_ProcessMSGCmd_3
   \   000111   EA           MOV     A,R2
   \   000112   2422         ADD     A,#0x22
   \   000114   F582         MOV     DPL,A
   \   000116   EB           MOV     A,R3
   \   000117   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F583         MOV     DPH,A
   \   00011E   8882         MOV     DPL,R0
   \   000120   E0           MOVX    A,@DPTR
   \   000121   6401         XRL     A,#0x1
   \   000123   7012         JNZ     ??SerialApp_ProcessMSGCmd_2
    541                {
    542                  SerialApp_TxLen = 0;
   \                     ??SerialApp_ProcessMSGCmd_3:
   \   000125   90....       MOV     DPTR,#SerialApp_TxLen
   \   000128   E4           CLR     A
   \   000129   F0           MOVX    @DPTR,A
    543                  osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
   \   00012A                ; Setup parameters for call to function osal_stop_timerEx
   \   00012A   7A01         MOV     R2,#0x1
   \   00012C   FB           MOV     R3,A
   \   00012D   90....       MOV     DPTR,#SerialApp_TaskID
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F9           MOV     R1,A
   \   000132   12....       LCALL   ??osal_stop_timerEx?relay
   \   000135   800D         SJMP    ??CrossCallReturnLabel_65
    544                }
    545                else
    546                {
    547                  // Re-start timeout according to delay sent from other device.
    548                  delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
    549                  osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
   \                     ??SerialApp_ProcessMSGCmd_2:
   \   000137                ; Setup parameters for call to function osal_start_timerEx
   \   000137   12....       LCALL   ?Subroutine9 & 0xFFFF
    550                }
    551                break;
    552                
    553              default:
    554                break;
    555              }
   \                     ??CrossCallReturnLabel_3:
   \   00013A   A3           INC     DPTR
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   FC           MOV     R4,A
   \   00013D   7D00         MOV     R5,#0x0
   \   00013F   7A01         MOV     R2,#0x1
   \   000141   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    556            }
   \                     ??CrossCallReturnLabel_65:
   \   000144   741E         MOV     A,#0x1e
   \   000146   02....       LJMP    ??Subroutine30_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F583         MOV     DPH,A
   \   00000F   8882         MOV     DPL,R0
   \   000011   A3           INC     DPTR
   \   000012   22           RET
    557            

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    558          uint8 SendData(uint8 addr, uint8 FC)
   \                     SendData:
    559          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
    560            uint8 ret, i, index=4;
   \   000005   75..04       MOV     ?V0 + 4,#0x4
    561            
    562            TxBuffer[0] = 0x3A;
   \   000008   90....       MOV     DPTR,#TxBuffer
   \   00000B   743A         MOV     A,#0x3a
   \   00000D   F0           MOVX    @DPTR,A
    563            TxBuffer[1] = 0x00;
   \   00000E   A3           INC     DPTR
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
    564            TxBuffer[2] = addr;
   \   000011   E9           MOV     A,R1
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
    565            TxBuffer[3] = FC;
   \   000014   EA           MOV     A,R2
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    566            
    567            switch(FC)
   \   000017   14           DEC     A
   \   000018   601C         JZ      ??SendData_0
   \   00001A   14           DEC     A
   \   00001B   7003         JNZ     $+5
   \   00001D   02....       LJMP    ??SendData_1 & 0xFFFF
   \   000020   24F5         ADD     A,#-0xb
   \   000022   7003         JNZ     $+5
   \   000024   02....       LJMP    ??SendData_2 & 0xFFFF
   \   000027   14           DEC     A
   \   000028   7003         JNZ     $+5
   \   00002A   02....       LJMP    ??SendData_3 & 0xFFFF
   \   00002D   14           DEC     A
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??SendData_4 & 0xFFFF
   \   000033   02....       LJMP    ??SendData_5 & 0xFFFF
    568            {
    569            case 0x01: //查询所有终端传感器的数据
    570              for (i=0; i<MAX_NODE; i++)
   \                     ??SendData_0:
   \   000036   7E00         MOV     R6,#0x0
    571              {
    572                osal_memcpy(&TxBuffer[index], NodeData[i], 4);
   \                     ??SendData_6:
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   EE           MOV     A,R6
   \   000039   75F005       MOV     B,#0x5
   \   00003C   A4           MUL     AB
   \   00003D   F8           MOV     R0,A
   \   00003E   A9F0         MOV     R1,B
   \   000040   74..         MOV     A,#NodeData & 0xff
   \   000042   28           ADD     A,R0
   \   000043   F5..         MOV     ?V0 + 0,A
   \   000045   74..         MOV     A,#(NodeData >> 8) & 0xff
   \   000047   39           ADDC    A,R1
   \   000048   85....       MOV     ?V0 + 8,?V0 + 0
   \   00004B   F5..         MOV     ?V0 + 9,A
   \   00004D   75..00       MOV     ?V0 + 10,#0x0
   \   000050   78..         MOV     R0,#?V0 + 8
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000055   7C04         MOV     R4,#0x4
   \   000057   7D00         MOV     R5,#0x0
   \   000059   85....       MOV     ?V0 + 0,?V0 + 4
   \   00005C   74..         MOV     A,#TxBuffer & 0xff
   \   00005E   25..         ADD     A,?V0 + 0
   \   000060   FA           MOV     R2,A
   \   000061   74..         MOV     A,#(TxBuffer >> 8) & 0xff
   \   000063   3400         ADDC    A,#0x0
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    573                index += 4;
   \   00006C   7404         MOV     A,#0x4
   \   00006E   25..         ADD     A,?V0 + 4
   \   000070   F5..         MOV     ?V0 + 4,A
    574              }
   \   000072   0E           INC     R6
   \   000073   EE           MOV     A,R6
   \   000074   C3           CLR     C
   \   000075   9404         SUBB    A,#0x4
   \   000077   40BF         JC      ??SendData_6
    575              TxBuffer[index] = XorCheckSum(TxBuffer, index);
   \   000079   85..82       MOV     DPL,?V0 + 4
   \   00007C   8582..       MOV     ?V0 + 0,DPL
   \   00007F   74..         MOV     A,#TxBuffer & 0xff
   \   000081   25..         ADD     A,?V0 + 0
   \   000083   FE           MOV     R6,A
   \   000084   74..         MOV     A,#(TxBuffer >> 8) & 0xff
   \   000086   3400         ADDC    A,#0x0
   \   000088   FF           MOV     R7,A
   \   000089                ; Setup parameters for call to function XorCheckSum
   \   000089   A9..         MOV     R1,?V0 + 4
   \   00008B   7A..         MOV     R2,#TxBuffer & 0xff
   \   00008D   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   00008F   12....       LCALL   ??XorCheckSum?relay
   \   000092   E9           MOV     A,R1
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   F0           MOVX    @DPTR,A
    576              TxBuffer[index+1] = 0x23; 
   \   000098   A3           INC     DPTR
   \   000099   7423         MOV     A,#0x23
   \   00009B   F0           MOVX    @DPTR,A
    577              
    578              HalUARTWrite(UART0, TxBuffer, index+2);
   \   00009C                ; Setup parameters for call to function HalUARTWrite
   \   00009C   E5..         MOV     A,?V0 + 0
   \   00009E   2402         ADD     A,#0x2
   \   0000A0   FC           MOV     R4,A
   \   0000A1   E4           CLR     A
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   FD           MOV     R5,A
   \                     ??SendData_7:
   \   0000A5   7A..         MOV     R2,#TxBuffer & 0xff
   \   0000A7   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   0000A9   7900         MOV     R1,#0x0
   \   0000AB   12....       LCALL   ??HalUARTWrite?relay
    579              ret = 1;
   \   0000AE   7E01         MOV     R6,#0x1
    580              break;
   \   0000B0   02....       LJMP    ??SendData_8 & 0xFFFF
    581            case 0x02: //查询单个终端上所有传感器的数据
    582              osal_memcpy(&TxBuffer[index], NodeData[addr-1], 4);
   \                     ??SendData_1:
   \   0000B3                ; Setup parameters for call to function osal_memcpy
   \   0000B3   E9           MOV     A,R1
   \   0000B4   75F005       MOV     B,#0x5
   \   0000B7   A4           MUL     AB
   \   0000B8   F8           MOV     R0,A
   \   0000B9   A9F0         MOV     R1,B
   \   0000BB   74..         MOV     A,#(NodeData + 251) & 0xff
   \   0000BD   28           ADD     A,R0
   \   0000BE   F5..         MOV     ?V0 + 0,A
   \   0000C0   74..         MOV     A,#((NodeData - 5) >> 8) & 0xff
   \   0000C2   39           ADDC    A,R1
   \   0000C3   85....       MOV     ?V0 + 4,?V0 + 0
   \   0000C6   F5..         MOV     ?V0 + 5,A
   \   0000C8   75..00       MOV     ?V0 + 6,#0x0
   \   0000CB   78..         MOV     R0,#?V0 + 4
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D0   7C04         MOV     R4,#0x4
   \   0000D2   7D00         MOV     R5,#0x0
   \   0000D4   7A..         MOV     R2,#(TxBuffer + 4) & 0xff
   \   0000D6   7B..         MOV     R3,#((TxBuffer + 4) >> 8) & 0xff
   \   0000D8   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
    583              index += 4;
    584              TxBuffer[index] = XorCheckSum(TxBuffer, index);
   \   0000DE                ; Setup parameters for call to function XorCheckSum
   \   0000DE   7908         MOV     R1,#0x8
   \   0000E0   7A..         MOV     R2,#TxBuffer & 0xff
   \   0000E2   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   0000E4   12....       LCALL   ??XorCheckSum?relay
   \   0000E7   E9           MOV     A,R1
   \   0000E8   90....       MOV     DPTR,#TxBuffer + 8
   \   0000EB   F0           MOVX    @DPTR,A
    585              TxBuffer[index+1] = 0x23; 
   \   0000EC   A3           INC     DPTR
   \   0000ED   7423         MOV     A,#0x23
   \   0000EF   F0           MOVX    @DPTR,A
    586              HalUARTWrite(UART0, TxBuffer, index+2);		
   \   0000F0                ; Setup parameters for call to function HalUARTWrite
   \   0000F0   7C0A         MOV     R4,#0xa
   \   0000F2   7D00         MOV     R5,#0x0
   \   0000F4   80AF         SJMP    ??SendData_7
    587              ret = 1;
    588              break;
    589            case 0x0D: 
    590              RFID();
   \                     ??SendData_2:
   \   0000F6                ; Setup parameters for call to function RFID
   \   0000F6   12....       LCALL   ??RFID?relay
    591              break;
   \   0000F9   8042         SJMP    ??SendData_8
    592            case 0x0E:
    593              memset(GPSRxData, 0, SIZE);
   \                     ??SendData_3:
   \   0000FB                ; Setup parameters for call to function memset
   \   0000FB   75..64       MOV     ?V0 + 0,#0x64
   \   0000FE   75..00       MOV     ?V0 + 1,#0x0
   \   000101   78..         MOV     R0,#?V0 + 0
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   7C00         MOV     R4,#0x0
   \   000108   7D00         MOV     R5,#0x0
   \   00010A   7A..         MOV     R2,#GPSRxData & 0xff
   \   00010C   7B..         MOV     R3,#(GPSRxData >> 8) & 0xff
   \   00010E   12....       LCALL   ??memset?relay
   \   000111   7402         MOV     A,#0x2
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
    594              GPS();  
   \   000116                ; Setup parameters for call to function UartSend_String
   \   000116   7C0F         MOV     R4,#0xf
   \   000118   7D00         MOV     R5,#0x0
   \   00011A   7A..         MOV     R2,#`?<Constant "The GPS ID is: ">` & 0xff
   \   00011C   7B..         MOV     R3,#(`?<Constant "The GPS ID is: ">` >> 8) & 0xff
   \   00011E   12....       LCALL   ??UartSend_String?relay
   \   000121   75F102       MOV     0xf1,#0x2
   \   000124   75F4C0       MOV     0xf4,#-0x40
   \   000127   43F8C0       ORL     0xf8,#0xc0
   \   00012A   43FC0A       ORL     0xfc,#0xa
   \   00012D   43FA3B       ORL     0xfa,#0x3b
   \   000130   C2EA         CLR     0xe8.2
   \   000132   75A888       MOV     0xa8,#-0x78
    595              break;
   \   000135   8006         SJMP    ??SendData_8
    596            case 0x0F:
    597              IEN0 &= 0xF7; 
   \                     ??SendData_4:
   \   000137   C2AB         CLR     0xa8.3
    598              break;
   \   000139   8002         SJMP    ??SendData_8
    599            default:
    600              ret = 0;
   \                     ??SendData_5:
   \   00013B   7E00         MOV     R6,#0x0
    601              break;
    602            }
    603            
    604            return ret;
   \                     ??SendData_8:
   \   00013D   EE           MOV     A,R6
   \   00013E   F9           MOV     R1,A
   \   00013F   7F0B         MOV     R7,#0xb
   \   000141   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000144                REQUIRE _A_IEN0
   \   000144                REQUIRE PERCFG
   \   000144                REQUIRE P1SEL
   \   000144                REQUIRE _A_U1CSR
   \   000144                REQUIRE U1GCR
   \   000144                REQUIRE U1BAUD
   \   000144                REQUIRE _A_IRCON2
    605          }
    606          
    607          /*********************************************************************
    608          * @fn      SerialApp_Send
    609          *
    610          * @brief   Send data OTA.
    611          *
    612          * @param   none
    613          *  3A000507013923    3A 00 01 01 3A 23
    614          * @return  none
    615          */
    616          #pragma optimize=none  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    617          static void SerialApp_Send(void)
   \                     SerialApp_Send:
    618          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    619            uint8 len=0, addr, FC;
   \   000005   7F00         MOV     R7,#0x0
    620            uint8 checksum=0;
   \   000007   75..00       MOV     ?V0 + 0,#0x0
    621          
    622            if (!SerialApp_TxLen && 
    623                (SerialApp_TxLen = HalUARTRead(UART0, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
   \   00000A   90....       MOV     DPTR,#SerialApp_TxLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      $+5
   \   000010   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
   \   000013                ; Setup parameters for call to function HalUARTRead
   \   000013   7C14         MOV     R4,#0x14
   \   000015   7D00         MOV     R5,#0x0
   \   000017   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000019   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   ??HalUARTRead?relay
   \   000020   EA           MOV     A,R2
   \   000021   90....       MOV     DPTR,#SerialApp_TxLen
   \   000024   F0           MOVX    @DPTR,A
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    624            {
    625              if (SerialApp_TxLen)
   \   00002A   90....       MOV     DPTR,#SerialApp_TxLen
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    626              {
    627                SerialApp_TxLen = 0;
   \   000033   90....       MOV     DPTR,#SerialApp_TxLen
   \   000036   7400         MOV     A,#0x0
   \   000038   F0           MOVX    @DPTR,A
    628                if(SerialApp_TxBuf[0] == 0x3A)
   \   000039   90....       MOV     DPTR,#SerialApp_TxBuf
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   643A         XRL     A,#0x3a
   \   00003F   6003         JZ      $+5
   \   000041   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    629                {
    630                  addr = SerialApp_TxBuf[2];
   \   000044   90....       MOV     DPTR,#SerialApp_TxBuf + 2
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0 + 1,A
    631                  FC = SerialApp_TxBuf[3];
   \   00004A   90....       MOV     DPTR,#SerialApp_TxBuf + 3
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FE           MOV     R6,A
    632                  len = GetDataLen(FC); 
   \   00004F                ; Setup parameters for call to function GetDataLen
   \   00004F   EE           MOV     A,R6
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??GetDataLen?relay
   \   000054   E9           MOV     A,R1
   \   000055   FF           MOV     R7,A
    633                  len += 4;
   \   000056   7404         MOV     A,#0x4
   \   000058   2F           ADD     A,R7
   \   000059   FF           MOV     R7,A
    634                  checksum = XorCheckSum(SerialApp_TxBuf, len);
   \   00005A                ; Setup parameters for call to function XorCheckSum
   \   00005A   EF           MOV     A,R7
   \   00005B   F9           MOV     R1,A
   \   00005C   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   00005E   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000060   12....       LCALL   ??XorCheckSum?relay
   \   000063   E9           MOV     A,R1
   \   000064   F5..         MOV     ?V0 + 0,A
    635          
    636                  //接收数据正确返回相应数据
    637                  if(checksum == SerialApp_TxBuf[len] && SerialApp_TxBuf[len+1] == 0x23)
   \   000066   8F..         MOV     ?V0 + 2,R7
   \   000068   75..00       MOV     ?V0 + 3,#0x0
   \   00006B   74..         MOV     A,#SerialApp_TxBuf & 0xff
   \   00006D   25..         ADD     A,?V0 + 2
   \   00006F   F582         MOV     DPL,A
   \   000071   74..         MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
   \   000073   35..         ADDC    A,?V0 + 3
   \   000075   F583         MOV     DPH,A
   \   000077   E0           MOVX    A,@DPTR
   \   000078   65..         XRL     A,?V0 + 0
   \   00007A   6003         JZ      $+5
   \   00007C   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
   \   00007F   8F..         MOV     ?V0 + 2,R7
   \   000081   75..00       MOV     ?V0 + 3,#0x0
   \   000084   74..         MOV     A,#(SerialApp_TxBuf + 1) & 0xff
   \   000086   25..         ADD     A,?V0 + 2
   \   000088   F582         MOV     DPL,A
   \   00008A   74..         MOV     A,#((SerialApp_TxBuf + 1) >> 8) & 0xff
   \   00008C   35..         ADDC    A,?V0 + 3
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   6423         XRL     A,#0x23
   \   000093   6003         JZ      $+5
   \   000095   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    638                  {
    639                    if(FC == 7 || FC == 8 || FC == 0x0A || FC == 0x0B || FC == 0x0C) //控制终端
   \   000098   7407         MOV     A,#0x7
   \   00009A   6E           XRL     A,R6
   \   00009B   6017         JZ      ??SerialApp_Send_1
   \   00009D   7408         MOV     A,#0x8
   \   00009F   6E           XRL     A,R6
   \   0000A0   6012         JZ      ??SerialApp_Send_1
   \   0000A2   740A         MOV     A,#0xa
   \   0000A4   6E           XRL     A,R6
   \   0000A5   600D         JZ      ??SerialApp_Send_1
   \   0000A7   740B         MOV     A,#0xb
   \   0000A9   6E           XRL     A,R6
   \   0000AA   6008         JZ      ??SerialApp_Send_1
   \   0000AC   740C         MOV     A,#0xc
   \   0000AE   6E           XRL     A,R6
   \   0000AF   6003         JZ      $+5
   \   0000B1   02....       LJMP    ??SerialApp_Send_2 & 0xFFFF
    640                    {                            
    641                      if(afStatus_SUCCESS == AF_DataRequest(&Broadcast_DstAddr,
    642                                                             (endPointDesc_t *)&SerialApp_epDesc,
    643                                                             SERIALAPP_CLUSTERID,
    644                                                             len+2, SerialApp_TxBuf,
    645                                                             &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
   \                     ??SerialApp_Send_1:
   \   0000B4                ; Setup parameters for call to function AF_DataRequest
   \   0000B4   75..1E       MOV     ?V0 + 2,#0x1e
   \   0000B7   78..         MOV     R0,#?V0 + 2
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BC   75....       MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
   \   0000BF   75....       MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
   \   0000C2   78..         MOV     R0,#?V0 + 2
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   75....       MOV     ?V0 + 2,#SerialApp_TxBuf & 0xff
   \   0000CA   75....       MOV     ?V0 + 3,#(SerialApp_TxBuf >> 8) & 0xff
   \   0000CD   78..         MOV     R0,#?V0 + 2
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   8F..         MOV     ?V0 + 2,R7
   \   0000D4   75..00       MOV     ?V0 + 3,#0x0
   \   0000D7   E5..         MOV     A,?V0 + 2
   \   0000D9   2402         ADD     A,#0x2
   \   0000DB   F5..         MOV     ?V0 + 2,A
   \   0000DD   E5..         MOV     A,?V0 + 3
   \   0000DF   3400         ADDC    A,#0x0
   \   0000E1   F5..         MOV     ?V0 + 3,A
   \   0000E3   78..         MOV     R0,#?V0 + 2
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   75..01       MOV     ?V0 + 2,#0x1
   \   0000EB   75..00       MOV     ?V0 + 3,#0x0
   \   0000EE   78..         MOV     R0,#?V0 + 2
   \   0000F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F3   7900         MOV     R1,#0x0
   \   0000F5   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   0000F7   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   0000F9   7A..         MOV     R2,#Broadcast_DstAddr & 0xff
   \   0000FB   7B..         MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
   \   0000FD   12....       LCALL   ??AF_DataRequest?relay
   \   000100   7409         MOV     A,#0x9
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   E9           MOV     A,R1
   \   000106   705B         JNZ     ??SerialApp_Send_3
    646                      {
    647                      if(FC == 0x0A) //如果开启自动刷新则不需要这步操作
   \   000108   740A         MOV     A,#0xa
   \   00010A   6E           XRL     A,R6
   \   00010B   703C         JNZ     ??SerialApp_Send_4
    648                          NodeData[addr-1][3] = SerialApp_TxBuf[len-1];  //更新缓冲区灯的状态
   \   00010D   8F..         MOV     ?V0 + 2,R7
   \   00010F   75..00       MOV     ?V0 + 3,#0x0
   \   000112   74..         MOV     A,#(SerialApp_TxBuf + 255) & 0xff
   \   000114   25..         ADD     A,?V0 + 2
   \   000116   F582         MOV     DPL,A
   \   000118   74..         MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
   \   00011A   35..         ADDC    A,?V0 + 3
   \   00011C   F583         MOV     DPH,A
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   C0E0         PUSH    A
   \   000121   E5..         MOV     A,?V0 + 1
   \   000123   A8..         MOV     R0,?V0 + 1
   \   000125   7900         MOV     R1,#0x0
   \   000127   E8           MOV     A,R0
   \   000128   75F005       MOV     B,#0x5
   \   00012B   A4           MUL     AB
   \   00012C   C8           XCH     A,R0
   \   00012D   AAF0         MOV     R2,B
   \   00012F   75F000       MOV     B,#0x0
   \   000132   A4           MUL     AB
   \   000133   2A           ADD     A,R2
   \   000134   FA           MOV     R2,A
   \   000135   75F005       MOV     B,#0x5
   \   000138   E9           MOV     A,R1
   \   000139   A4           MUL     AB
   \   00013A   2A           ADD     A,R2
   \   00013B   F9           MOV     R1,A
   \   00013C   74..         MOV     A,#(NodeData + 254) & 0xff
   \   00013E   28           ADD     A,R0
   \   00013F   F582         MOV     DPL,A
   \   000141   74..         MOV     A,#((NodeData - 2) >> 8) & 0xff
   \   000143   39           ADDC    A,R1
   \   000144   F583         MOV     DPH,A
   \   000146   D0E0         POP     A
   \   000148   F0           MOVX    @DPTR,A
    649                        
    650                        HalUARTWrite(UART0, SerialApp_TxBuf, len+2); //无线发送成功后原样返回给上位机	
   \                     ??SerialApp_Send_4:
   \   000149                ; Setup parameters for call to function HalUARTWrite
   \   000149   8F..         MOV     ?V0 + 2,R7
   \   00014B   75..00       MOV     ?V0 + 3,#0x0
   \   00014E   E5..         MOV     A,?V0 + 2
   \   000150   2402         ADD     A,#0x2
   \   000152   FC           MOV     R4,A
   \   000153   E5..         MOV     A,?V0 + 3
   \   000155   3400         ADDC    A,#0x0
   \   000157   FD           MOV     R5,A
   \   000158   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   00015A   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   00015C   7900         MOV     R1,#0x0
   \   00015E   12....       LCALL   ??HalUARTWrite?relay
   \   000161   804A         SJMP    ??SerialApp_Send_0
    651                        //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
    652                      }
    653                      else  //暂时没发现错误，关闭终端发送也正常。无线发送失败后将数据位和校验位置0返给上位机	
    654                      {
    655                        SerialApp_TxBuf[len-1] = 0x00;
   \                     ??SerialApp_Send_3:
   \   000163   8F..         MOV     ?V0 + 2,R7
   \   000165   75..00       MOV     ?V0 + 3,#0x0
   \   000168   74..         MOV     A,#(SerialApp_TxBuf + 255) & 0xff
   \   00016A   25..         ADD     A,?V0 + 2
   \   00016C   F582         MOV     DPL,A
   \   00016E   74..         MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
   \   000170   35..         ADDC    A,?V0 + 3
   \   000172   F583         MOV     DPH,A
   \   000174   7400         MOV     A,#0x0
   \   000176   F0           MOVX    @DPTR,A
    656                        SerialApp_TxBuf[len] = 0x00;
   \   000177   8F..         MOV     ?V0 + 2,R7
   \   000179   75..00       MOV     ?V0 + 3,#0x0
   \   00017C   74..         MOV     A,#SerialApp_TxBuf & 0xff
   \   00017E   25..         ADD     A,?V0 + 2
   \   000180   F582         MOV     DPL,A
   \   000182   74..         MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
   \   000184   35..         ADDC    A,?V0 + 3
   \   000186   F583         MOV     DPH,A
   \   000188   7400         MOV     A,#0x0
   \   00018A   F0           MOVX    @DPTR,A
    657                        HalUARTWrite(UART0, SerialApp_TxBuf, len+2);
   \   00018B                ; Setup parameters for call to function HalUARTWrite
   \   00018B   8F..         MOV     ?V0 + 2,R7
   \   00018D   75..00       MOV     ?V0 + 3,#0x0
   \   000190   E5..         MOV     A,?V0 + 2
   \   000192   2402         ADD     A,#0x2
   \   000194   FC           MOV     R4,A
   \   000195   E5..         MOV     A,?V0 + 3
   \   000197   3400         ADDC    A,#0x0
   \   000199   FD           MOV     R5,A
   \   00019A   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   00019C   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   00019E   7900         MOV     R1,#0x0
   \   0001A0   12....       LCALL   ??HalUARTWrite?relay
   \   0001A3   8008         SJMP    ??SerialApp_Send_0
    658                      }
    659                    }
    660                    else
    661                    {
    662                      SendData(addr, FC);   //查询操作
   \                     ??SerialApp_Send_2:
   \   0001A5                ; Setup parameters for call to function SendData
   \   0001A5   EE           MOV     A,R6
   \   0001A6   FA           MOV     R2,A
   \   0001A7   A9..         MOV     R1,?V0 + 1
   \   0001A9   12....       LCALL   ??SendData?relay
   \   0001AC   E9           MOV     A,R1
    663                    }
    664                  }
    665                }
    666              }
    667            }
    668          }
   \                     ??SerialApp_Send_0:
   \   0001AD   7F04         MOV     R7,#0x4
   \   0001AF   02....       LJMP    ?BANKED_LEAVE_XDATA
    669          
    670          /*********************************************************************
    671          * @fn      SerialApp_Resp
    672          *
    673          * @brief   Send data OTA.
    674          *
    675          * @param   none
    676          *
    677          * @return  none
    678          */
    679          static void SerialApp_Resp(void)
    680          {
    681            if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
    682                                                   (endPointDesc_t *)&SerialApp_epDesc,
    683                                                   SERIALAPP_CLUSTERID2,
    684                                                   SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
    685                                                   &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
    686            {
    687              osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
    688            }
    689          }
    690          
    691          /*********************************************************************
    692          * @fn      SerialApp_CallBack
    693          *
    694          * @brief   Send data OTA.
    695          *
    696          * @param   port - UART port.
    697          * @param   event - the UART port event flag.
    698          *
    699          * @return  none
    700          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    701          static void SerialApp_CallBack(uint8 port, uint8 event)
   \                     SerialApp_CallBack:
    702          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    703            (void)port;
    704            
    705            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    706          #if SERIAL_APP_LOOPBACK
    707                (SerialApp_TxLen < SERIAL_APP_TX_MAX))
    708          #else
    709              !SerialApp_TxLen)
   \   000007   7407         MOV     A,#0x7
   \   000009   5E           ANL     A,R6
   \   00000A   6009         JZ      ??SerialApp_CallBack_0
   \   00000C   90....       MOV     DPTR,#SerialApp_TxLen
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7003         JNZ     ??SerialApp_CallBack_0
    710          #endif
    711            {
    712              SerialApp_Send();
   \   000012                ; Setup parameters for call to function SerialApp_Send
   \   000012   12....       LCALL   ??SerialApp_Send?relay
    713            }
    714          }
   \                     ??SerialApp_CallBack_0:
   \   000015   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    715          
    716          
    717          //--------------------------------------------------------------------------------------
    718          //查询单个终端上所有传感器的数据 3A 00 01 02 XX 23  响应：3A 00 01 02 00 00 00 00 xor 23

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    719          void SerialApp_SendPeriodicMessage( void )
   \                     SerialApp_SendPeriodicMessage:
    720          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    721            uint8 SendBuf[11]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>_3`
   \   00000D   C082         PUSH    DPL
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {0}>_3` >> 8) & 0xff
   \   00001C   D082         POP     DPL
   \   00001E   740B         MOV     A,#0xb
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    722          
    723          #ifdef WSN_SENSOR  
    724            SendBuf[0] = 0x3A;                          
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   743A         MOV     A,#0x3a
   \   00002B   F0           MOVX    @DPTR,A
    725            SendBuf[1] = HI_UINT16( EndDeviceID );
   \   00002C   90....       MOV     DPTR,#EndDeviceID + 1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   C0E0         PUSH    A
   \   000032   7401         MOV     A,#0x1
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
    726            SendBuf[2] = LO_UINT16( EndDeviceID );
   \   00003A   90....       MOV     DPTR,#EndDeviceID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    727            SendBuf[3] = 0x02;                       //FC
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7402         MOV     A,#0x2
   \   00004F   F0           MOVX    @DPTR,A
    728            
    729            DHT11();                //获取温湿度
   \   000050                ; Setup parameters for call to function DHT11
   \   000050   12....       LCALL   ??DHT11?relay
    730            SendBuf[4] = wendu;  
   \   000053   90....       MOV     DPTR,#wendu
   \   000056   E0           MOVX    A,@DPTR
   \   000057   C0E0         PUSH    A
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
    731            SendBuf[5] = shidu;  
   \   000061   90....       MOV     DPTR,#shidu
   \   000064   E0           MOVX    A,@DPTR
   \   000065   C0E0         PUSH    A
   \   000067   7405         MOV     A,#0x5
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   D0E0         POP     A
   \   00006E   F0           MOVX    @DPTR,A
    732            SendBuf[6] = GetGas();  //获取气体传感器的状态  
   \   00006F   A286         MOV     C,0x80.6
   \   000071   E4           CLR     A
   \   000072   33           RLC     A
   \   000073   C0E0         PUSH    A
   \   000075   7406         MOV     A,#0x6
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   D0E0         POP     A
   \   00007C   F0           MOVX    @DPTR,A
    733            SendBuf[7] = GetLamp(); //获得灯的状态
   \   00007D   A285         MOV     C,0x80.5
   \   00007F   E4           CLR     A
   \   000080   33           RLC     A
   \   000081   C0E0         PUSH    A
   \   000083   7407         MOV     A,#0x7
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   D0E0         POP     A
   \   00008A   F0           MOVX    @DPTR,A
    734            SendBuf[8] = XorCheckSum(SendBuf, 9);
   \   00008B                ; Setup parameters for call to function XorCheckSum
   \   00008B   7909         MOV     R1,#0x9
   \   00008D   85..82       MOV     DPL,?XSP + 0
   \   000090   85..83       MOV     DPH,?XSP + 1
   \   000093   AA82         MOV     R2,DPL
   \   000095   AB83         MOV     R3,DPH
   \   000097   12....       LCALL   ??XorCheckSum?relay
   \   00009A   7408         MOV     A,#0x8
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   E9           MOV     A,R1
   \   0000A0   F0           MOVX    @DPTR,A
    735            SendBuf[9] = 0x23;
   \   0000A1   7409         MOV     A,#0x9
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   7423         MOV     A,#0x23
   \   0000A8   F0           MOVX    @DPTR,A
    736            
    737            SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000A9   90....       MOV     DPTR,#SerialApp_TxAddr + 8
   \   0000AC   7402         MOV     A,#0x2
   \   0000AE   F0           MOVX    @DPTR,A
    738            SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
   \   0000AF   A3           INC     DPTR
   \   0000B0   740B         MOV     A,#0xb
   \   0000B2   F0           MOVX    @DPTR,A
    739            SerialApp_TxAddr.addr.shortAddr = 0x00;  
   \   0000B3   90....       MOV     DPTR,#SerialApp_TxAddr
   \   0000B6   E4           CLR     A
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   F0           MOVX    @DPTR,A
    740            if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
    741                                SERIALAPP_CLUSTERID,
    742                                10,
    743                                SendBuf,
    744                                &SerialApp_MsgID, 
    745                                0, 
    746                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0000BA                ; Setup parameters for call to function AF_DataRequest
   \   0000BA   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C2   75....       MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
   \   0000C5   75....       MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
   \   0000C8   78..         MOV     R0,#?V0 + 0
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CD   7403         MOV     A,#0x3
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   8582..       MOV     ?V0 + 0,DPL
   \   0000D5   8583..       MOV     ?V0 + 1,DPH
   \   0000D8   78..         MOV     R0,#?V0 + 0
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DD   75..0A       MOV     ?V0 + 0,#0xa
   \   0000E0   75..00       MOV     ?V0 + 1,#0x0
   \   0000E3   78..         MOV     R0,#?V0 + 0
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   75..01       MOV     ?V0 + 0,#0x1
   \   0000EB   78..         MOV     R0,#?V0 + 0
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F0   7900         MOV     R1,#0x0
   \   0000F2   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   0000F4   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   0000F6   7A..         MOV     R2,#SerialApp_TxAddr & 0xff
   \   0000F8   7B..         MOV     R3,#(SerialApp_TxAddr >> 8) & 0xff
   \   0000FA   12....       LCALL   ??AF_DataRequest?relay
   \   0000FD   7409         MOV     A,#0x9
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
    747            {
    748              // Successfully requested to be sent.
    749            }
    750            else
    751            {
    752              // Error occurred in request to send.
    753            }
    754          #endif
    755            
    756          #ifdef WSN_BEEP
    757            SendBuf[0] = GetGas();  //获取气体传感器的状态 0为有害气体   1为正常
    758            
    759            //终端5执行蜂鸣器操作   蜂鸣器动作电平 1: 响 ，0: 不响
    760            if(SendBuf[0] == 0 && EndDeviceID == 5)
    761            {
    762              TIMER1_RUN();      //检测到异常气体时蜂鸣器响
    763            }
    764            else
    765            {
    766              TIMER1_STOP();    //气体正常不响
    767            }    
    768          #endif
    769          }
   \   000102   740B         MOV     A,#0xb
   \   000104   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   \   000107                REQUIRE _A_P0
    770          
    771          
    772          #if UART_DEBUG   
    773          //通过串口输出短地址 IEEE
    774          void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
    775          {
    776            uint8 strIeeeAddr[17] = {0};
    777            char  buff[30] = {0};    
    778            
    779            //获得短地址   
    780            sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);  
    781            
    782            //获得IEEE地址
    783            GetIeeeAddr(pIeeeAddr, strIeeeAddr);
    784            
    785            HalUARTWrite (UART0, (uint8 *)buff, strlen(buff));
    786            Delay_ms(10);
    787            HalUARTWrite (UART0, strIeeeAddr, 16); 
    788            HalUARTWrite (UART0, "\n", 1);
    789          }
    790          
    791          void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
    792          {
    793            uint8 i;
    794            uint8 *xad = pIeeeAddr;
    795            
    796            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    797            {
    798              uint8 ch;
    799              ch = (*xad >> 4) & 0x0F;
    800              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    801              i++;
    802              ch = *xad & 0x0F;
    803              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    804              i++;
    805            }
    806          }
    807          #endif  
    808          
    809          void AfSendAddrInfo(void)
                      ^
Warning[Pe177]: function "AfSendAddrInfo" was declared but never referenced
    810          {
    811            uint16 shortAddr;
    812            uint8 strBuf[11]={0};  
    813            
    814            SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
    815            SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
    816            SerialApp_TxAddr.addr.shortAddr = 0x00;   
    817            
    818            shortAddr=NLME_GetShortAddr();
    819            
    820            strBuf[0] = 0x3B;                          //发送地址给协调器 可用于点播
    821            strBuf[1] = HI_UINT16( shortAddr );        //存放短地址高8位
    822            strBuf[2] = LO_UINT16( shortAddr );        //存放短地址低8位
    823            
    824            osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
    825            
    826            if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
    827                                SERIALAPP_CLUSTERID,
    828                                11,
    829                                strBuf,
    830                                &SerialApp_MsgID, 
    831                                0, 
    832                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    833            {
    834            }
    835            else
    836            {
    837              // Error occurred in request to send.
    838            }   
    839          }
    840          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    841          uint8 XorCheckSum(uint8 * pBuf, uint8 len)
   \                     XorCheckSum:
    842          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
    843            uint8 i;
    844            uint8 byRet=0;
    845            
    846            if(len == 0)
   \   000007   7004         JNZ     ??XorCheckSum_0
    847              return byRet;
   \   000009   7900         MOV     R1,#0x0
   \   00000B   801B         SJMP    ??XorCheckSum_1
    848            else
    849              byRet = pBuf[0];
   \                     ??XorCheckSum_0:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
    850            
    851            for(i = 1; i < len; i ++)
   \   000013   7801         MOV     R0,#0x1
   \   000015   800C         SJMP    ??XorCheckSum_2
    852              byRet = byRet ^ pBuf[i];
   \                     ??XorCheckSum_3:
   \   000017   88..         MOV     ?V0 + 0,R0
   \   000019   EA           MOV     A,R2
   \   00001A   25..         ADD     A,?V0 + 0
   \   00001C   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00001F   C9           XCH     A,R1
   \   000020   69           XRL     A,R1
   \   000021   F9           MOV     R1,A
   \   000022   08           INC     R0
   \                     ??XorCheckSum_2:
   \   000023   E8           MOV     A,R0
   \   000024   C3           CLR     C
   \   000025   9C           SUBB    A,R4
   \   000026   40EF         JC      ??XorCheckSum_3
    853            
    854            return byRet;
   \                     ??XorCheckSum_1:
   \   000028   02....       LJMP    ??Subroutine37_0 & 0xFFFF
    855          }
    856          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    857          uint8 GetDataLen(uint8 fc)
   \                     GetDataLen:
    858          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
    859            uint8 len=0;
   \   000001   7900         MOV     R1,#0x0
    860            switch(fc)
   \   000003   24F9         ADD     A,#-0x7
   \   000005   600D         JZ      ??GetDataLen_0
   \   000007   14           DEC     A
   \   000008   600A         JZ      ??GetDataLen_0
   \   00000A   24FE         ADD     A,#-0x2
   \   00000C   6006         JZ      ??GetDataLen_0
   \   00000E   14           DEC     A
   \   00000F   6003         JZ      ??GetDataLen_0
   \   000011   14           DEC     A
   \   000012   7001         JNZ     ??GetDataLen_1
    861            {
    862            case 0x07:
    863            case 0x08:
    864            case 0x0A:
    865            case 0x0B:
    866            case 0x0C:
    867              len = 1;
   \                     ??GetDataLen_0:
   \   000014   09           INC     R1
    868              break;
    869            }
    870            
    871            return len;
   \                     ??GetDataLen_1:
   \   000015   02....       LJMP    ?BRET
    872          }
    873          
    874          //获得P0_5 继电器引脚的电平
    875          uint8 GetLamp( void )
    876          {
    877            uint8 ret;
    878            
    879            if(LAMP_PIN == 0)
    880              ret = 0;
    881            else
    882              ret = 1;
    883            
    884            return ret;
    885          }
    886          
    887          //获得P0_6 MQ-2气体传感器的数据 0为有害气体   1为正常
    888          uint8 GetGas( void )
    889          {
    890            uint8 ret;
    891            
    892            if(GAS_PIN == 0)
    893            {
    894              ret = 0;
    895            }
    896            else
    897            {
    898              ret = 1;
    899            }
    900            
    901            return ret;
    902          }
    903          //-------------------------------------------------------------------

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    904          static void RFID(){
   \                     RFID:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV     A,#-0x1c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    905            PERCFG = 0x00;
   \   00000A   12....       LCALL   ?Subroutine24 & 0xFFFF
    906            P0SEL = 0x0c;
    907            P2DIR &= ~0xc0;
    908            U0CSR |= 0x80;
    909           // U0UCR = 0x00;
    910            U0GCR |= 11;
    911            U0BAUD |= 216;
    912            U0CSR |= 0x40;
    913            UTX0IF = 0;
   \                     ??CrossCallReturnLabel_23:
   \   00000D   C2E9         CLR     0xe8.1
    914            
    915            // IC_SDA P2_0
    916            P2DIR |= 1<<0;
   \   00000F   43FF01       ORL     0xff,#0x1
    917            P2INP |= 1<<0;
   \   000012   43F701       ORL     0xf7,#0x1
    918            P2SEL &= ~(1<<0);
   \   000015   53F5FE       ANL     0xf5,#0xfe
    919            
    920            // IC_SCK  P0_7
    921            P0DIR |= 1<<7;
   \   000018   43FD80       ORL     0xfd,#0x80
    922            P0INP |= 1<<7;
   \   00001B   438F80       ORL     0x8f,#0x80
    923            P0SEL &= ~(1<<7);
   \   00001E   53F37F       ANL     0xf3,#0x7f
    924            
    925            // IC_MOSI P0_6
    926            P0DIR |= 1<<6;
   \   000021   43FD40       ORL     0xfd,#0x40
    927            P0INP |= 1<<6;
   \   000024   438F40       ORL     0x8f,#0x40
    928            P0SEL &= ~(1<<6);
   \   000027   53F3BF       ANL     0xf3,#0xbf
    929            
    930            // IC_MISO P0_5
    931            P0DIR |= 1<<5;
   \   00002A   43FD20       ORL     0xfd,#0x20
    932            P0INP |= 1<<5;
   \   00002D   438F20       ORL     0x8f,#0x20
    933            P0SEL &= ~(1<<5);  
   \   000030   53F3DF       ANL     0xf3,#0xdf
    934          
    935            // IC_RST P0_4
    936            P0DIR &= ~(1<<4);
   \   000033   53FDEF       ANL     0xfd,#0xef
    937            P0INP &= ~(1<<4);
   \   000036   538FEF       ANL     0x8f,#0xef
    938            P0SEL &= ~(1<<4);
   \   000039   53F3EF       ANL     0xf3,#0xef
    939            
    940            IC_SCK = 1;
   \   00003C   D287         SETB    0x80.7
    941            IC_SDA = 1;
   \   00003E   D2A0         SETB    0xa0.0
    942            PcdReset();
   \   000040                ; Setup parameters for call to function PcdReset
   \   000040   12....       LCALL   ??PcdReset?relay
    943            M500PcdConfigISOType('A');//设置工作方式
   \   000043                ; Setup parameters for call to function M500PcdConfigISOType
   \   000043   7941         MOV     R1,#0x41
   \   000045   12....       LCALL   ??M500PcdConfigISOType?relay
    944            
    945            uchar ucTagType[4];
    946            uchar find=0xaa;
    947            uchar ret;
    948            
    949            while(1){
    950              //16进制转ASC码
    951              char i;  
    952              char Card_Id[8]; //存放32位卡号
    953              uchar asc_16[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
    954            
    955              ret = PcdRequest(0x52,ucTagType);//寻卡
    956              if(ret != 0x26)
    957                ret = PcdRequest(0x52,ucTagType);
    958              if(ret != 0x26)
    959                find = 0xaa;
   \                     ??RFID_0:
   \   000048   90....       MOV     DPTR,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`
   \   00004B   C082         PUSH    DPL
   \   00004D   740C         MOV     A,#0xc
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   AC82         MOV     R4,DPL
   \   000054   AD83         MOV     R5,DPH
   \   000056   7583..       MOV     DPH,#(`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56` >> 8) & 0xff
   \   000059   D082         POP     DPL
   \   00005B   7410         MOV     A,#0x10
   \   00005D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000060                ; Setup parameters for call to function PcdRequest
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   7952         MOV     R1,#0x52
   \   00006C   12....       LCALL   ??PcdRequest?relay
   \   00006F   E9           MOV     A,R1
   \   000070   6426         XRL     A,#0x26
   \   000072   6014         JZ      ??RFID_1
   \   000074                ; Setup parameters for call to function PcdRequest
   \   000074   85..82       MOV     DPL,?XSP + 0
   \   000077   85..83       MOV     DPH,?XSP + 1
   \   00007A   AA82         MOV     R2,DPL
   \   00007C   AB83         MOV     R3,DPH
   \   00007E   7952         MOV     R1,#0x52
   \   000080   12....       LCALL   ??PcdRequest?relay
   \   000083   E9           MOV     A,R1
   \   000084   6426         XRL     A,#0x26
   \   000086   70C0         JNZ     ??RFID_0
   \                     ??RFID_1:
   \   000088   74AA         MOV     A,#-0x56
   \   00008A   64AA         XRL     A,#0xaa
   \   00008C   70BA         JNZ     ??RFID_0
    960              if((ret == 0x26)&&(find == 0xaa))
    961              {
    962                if(PcdAnticoll(ucTagType) == 0x26);//防冲撞
   \   00008E                ; Setup parameters for call to function PcdAnticoll
   \   00008E   85..82       MOV     DPL,?XSP + 0
   \   000091   85..83       MOV     DPH,?XSP + 1
   \   000094   AA82         MOV     R2,DPL
   \   000096   AB83         MOV     R3,DPH
   \   000098   12....       LCALL   ??PcdAnticoll?relay
    963                {
    964                  UartSend_String("The Card ID is: ",16);   
   \   00009B                ; Setup parameters for call to function UartSend_String
   \   00009B   7C10         MOV     R4,#0x10
   \   00009D   7D00         MOV     R5,#0x0
   \   00009F   7A..         MOV     R2,#`?<Constant "The Card ID is: ">` & 0xff
   \   0000A1   7B..         MOV     R3,#(`?<Constant "The Card ID is: ">` >> 8) & 0xff
   \   0000A3   12....       LCALL   ??UartSend_String?relay
    965                  
    966                  //16进制转ASC码
    967                  for(i=0;i<4;i++)
   \   0000A6   7C00         MOV     R4,#0x0
    968                  {
    969                    Card_Id[i*2]=asc_16[ucTagType[i]/16];
   \                     ??RFID_2:
   \   0000A8   8C82         MOV     DPL,R4
   \   0000AA   AA82         MOV     R2,DPL
   \   0000AC   EA           MOV     A,R2
   \   0000AD   C3           CLR     C
   \   0000AE   33           RLC     A
   \   0000AF   F8           MOV     R0,A
   \   0000B0   E4           CLR     A
   \   0000B1   33           RLC     A
   \   0000B2   F9           MOV     R1,A
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   E582         MOV     A,DPL
   \   0000BA   28           ADD     A,R0
   \   0000BB   F8           MOV     R0,A
   \   0000BC   E583         MOV     A,DPH
   \   0000BE   39           ADDC    A,R1
   \   0000BF   F9           MOV     R1,A
   \   0000C0   85..82       MOV     DPL,?XSP + 0
   \   0000C3   85..83       MOV     DPH,?XSP + 1
   \   0000C6   E582         MOV     A,DPL
   \   0000C8   2A           ADD     A,R2
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   E583         MOV     A,DPH
   \   0000CD   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000D0   FD           MOV     R5,A
   \   0000D1   C4           SWAP    A
   \   0000D2   540F         ANL     A,#0xf
   \   0000D4   FA           MOV     R2,A
   \   0000D5   740C         MOV     A,#0xc
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000DD   F0           MOVX    @DPTR,A
    970                    Card_Id[i*2+1]=asc_16[ucTagType[i]%16];        
   \   0000DE   740F         MOV     A,#0xf
   \   0000E0   5D           ANL     A,R5
   \   0000E1   FA           MOV     R2,A
   \   0000E2   740C         MOV     A,#0xc
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E7   12....       LCALL   ?Subroutine14 & 0xFFFF
    971                  }  
   \                     ??CrossCallReturnLabel_11:
   \   0000EA   A3           INC     DPTR
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   0C           INC     R4
   \   0000ED   EC           MOV     A,R4
   \   0000EE   C3           CLR     C
   \   0000EF   9404         SUBB    A,#0x4
   \   0000F1   40B5         JC      ??RFID_2
    972                  UartSend_String(Card_Id,8); 
   \   0000F3                ; Setup parameters for call to function UartSend_String
   \   0000F3   7C08         MOV     R4,#0x8
   \   0000F5   7D00         MOV     R5,#0x0
   \   0000F7   7404         MOV     A,#0x4
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   AA82         MOV     R2,DPL
   \   0000FE   AB83         MOV     R3,DPH
   \   000100   12....       LCALL   ??UartSend_String?relay
    973                  UartSend_String("\n",1);    
   \   000103                ; Setup parameters for call to function UartSend_String
   \   000103   7C01         MOV     R4,#0x1
   \   000105   7D00         MOV     R5,#0x0
   \   000107   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000109   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00010B   12....       LCALL   ??UartSend_String?relay
    974                  find = 0x00;
    975                  break;
    976                }
    977              }
    978            }
    979          }
   \   00010E   741C         MOV     A,#0x1c
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   \   000113   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   \   000116                REQUIRE PERCFG
   \   000116                REQUIRE P0SEL
   \   000116                REQUIRE P2DIR
   \   000116                REQUIRE U0CSR
   \   000116                REQUIRE U0GCR
   \   000116                REQUIRE U0BAUD
   \   000116                REQUIRE _A_IRCON2
   \   000116                REQUIRE P2INP
   \   000116                REQUIRE P2SEL
   \   000116                REQUIRE P0DIR
   \   000116                REQUIRE P0INP
   \   000116                REQUIRE _A_P0
   \   000116                REQUIRE _A_P2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E582         MOV     A,DPL
   \   000002   2A           ADD     A,R2
   \   000003   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   22           RET
    980          
    981          static void GPS(void){
    982            UartSend_String("The GPS ID is: ",15); 
    983            PERCFG = 0x02;           //PERCFG UART1选择备用地址2 UART1选择备用地址1 
    984                
    985            P1SEL = 0xc0;            //设置P1_7,P1_6用作外设功能
    986            U1CSR |= 0xc0;           //设置为UART方式 并允许接收数据 
    987            U1GCR |= 10;			       
    988            U1BAUD |= 59;           //波特率设为38400
    989            UTX1IF = 0;              //UART1 TX中断标志初始置位0 
    990              
    991            IEN0 = 0x88;            //开总中断允许接收中断  
    992          }
    993          
    994          
    995          
    996          
    997          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    998          //#ifdef WSN_BEEP
    999          //步进电机驱动部分
   1000          static void MotorData(uchar data)
   1001          {
   1002            A1 = 1&(data>>4);
   1003            B1 = 1&(data>>5);
   1004            C1 = 1&(data>>6);
   1005            D1 = 1&(data>>7);
   1006          }
   1007          
   1008          //顺时针转动
   1009          static void MotorCW(void)
                             ^
Warning[Pe177]: function "MotorCW" was declared but never referenced
   1010          {
   1011            uchar i;
   1012            for(i=0;i<4;i++)
   1013            {
   1014              MotorData(phasecw[i]);
   1015              Delay_MS(ucSpeed);//转速调节
   1016            }
   1017          }
   1018          //逆时针转动
   1019          static void MotorCCW(void)
                             ^
Warning[Pe177]: function "MotorCCW" was declared but never referenced
   1020          {
   1021            uchar i;
   1022            for(i=0;i<4;i++)
   1023            {
   1024              MotorData(phaseccw[i]);
   1025              Delay_MS(ucSpeed);//转速调节
   1026            }
   1027          }
   1028          
   1029          //停止转动
   1030          static void MotorStop(void)
                             ^
Warning[Pe177]: function "MotorStop" was declared but never referenced
   1031          {
   1032            MotorData(0x00);
   1033          }
   1034          
   1035          #ifdef WSN_STEP
   1036          //初始化IO口程序
   1037          static void InitStepMotor(void)
   1038          {
   1039            P0SEL &= 0x0F;  //P04 05 06 07定义为普通IO
   1040            P0DIR |= 0xF0;  //P04 05 06 07定义为输出
   1041            
   1042            MotorData(0x00);//停止转动
   1043          }
   1044          #endif
   1045          
   1046          static void Delay_MS(unsigned int Time)// 1ms延时
   1047          {
   1048            char i;
   1049            
   1050            while(Time--)
   1051            {
   1052              for(i=0;i<100;i++)
   1053                MicroWait(10);
   1054            }
   1055          }
   1056          //#endif
   1057          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   1058          
   1059          
   1060          //-------------------------------------------------------------------
   1061          //协议栈里使用timer 1输出PWM，使用的是正计数/倒计数模式，占空比可调整

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1062          void init_port(void)
   \                     init_port:
   1063          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1064            P0SEL |= 0x80;         //设置P0.7口为外设
   \   000000   43F380       ORL     0xf3,#0x80
   1065            P0DIR |= 0x80;         //设置P0.7为输出
   \   000003   43FD80       ORL     0xfd,#0x80
   1066            PERCFG |= 0x40;        //设置定时器1 的I / O 位置   1： 备用位置2
   \   000006   43F140       ORL     0xf1,#0x40
   1067            
   1068            return ;
   \   000009   02....       LJMP    ?BRET
   \   00000C                REQUIRE P0SEL
   \   00000C                REQUIRE P0DIR
   \   00000C                REQUIRE PERCFG
   1069          }
   1070          
   1071          // 将基准值放入T1CC0 寄存器, 将被比较值放入T1CC3寄存器
   1072          // 当T1CC3中的值与T1CC0中的值相等时，则T1CC3 设置or清除

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1073          void init_timer(void)
   \                     init_timer:
   1074          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1075            T1CC0L = 0xff;         //PWM duty cycle  周期
   \   000004   75DAFF       MOV     0xda,#-0x1
   1076            T1CC0H = 0x0;
   \   000007   75DB00       MOV     0xdb,#0x0
   1077            
   1078            T1CC3L = 0x00;        //PWM signal period 占空比
   \   00000A   9062AC       MOV     DPTR,#0x62ac
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
   1079            T1CC3H = 0x00;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
   1080            
   1081            //等于T1CC0中的数值时候，输出高电平 1； 等于T1CC3中的数值时候，输出低电平 0 
   1082            //其实整个占空比就为50%  为了蜂鸣器输出连续的响声修改了占空比
   1083            T1CCTL3 = 0x34;       
   \   000011   9062A3       MOV     DPTR,#0x62a3
   \   000014   7434         MOV     A,#0x34
   \   000016   F0           MOVX    @DPTR,A
   1084            T1CTL |= 0x0f;         // divide with 128 and to do i up-down mode
   \   000017   43E40F       ORL     0xe4,#0xf
   1085            return ;
   \   00001A   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00001D                REQUIRE T1CC0L
   \   00001D                REQUIRE T1CC0H
   \   00001D                REQUIRE T1CTL
   1086          }
   1087          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1088          void start_pwm(void) 
   \                     start_pwm:
   1089          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1090            init_port();
   \   000004                ; Setup parameters for call to function init_port
   \   000004   12....       LCALL   ??init_port?relay
   1091            init_timer();
   \   000007                ; Setup parameters for call to function init_timer
   \   000007   12....       LCALL   ??init_timer?relay
   1092            // IEN1 |=0x02;     //Timer 1 中断使能
   1093            // EA = 1;          //全局中断使能
   1094            // while(1) {;}
   1095            return ;
   \   00000A   02....       LJMP    ?Subroutine0 & 0xFFFF
   1096          }
   1097          
   1098          //volatile unsigned char count = 0;
   1099          
   1100          #pragma vector=T1_VECTOR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1101          __interrupt void _IRQ_timer1(void)
   \                     _IRQ_timer1:
   1102          {
   \   000000                ; Saved register size: 1
   \   000000                ; Auto size: 0
   1103            //TODO....
   1104          }
   \   000000   32           RETI
   1105          #pragma vector = URX1_VECTOR 

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1106          __interrupt void UART1_ISR(void) 
   \                     UART1_ISR:
   1107          { 
   \   000000   C0E0         PUSH    A
   \   000002   74F1         MOV     A,#-0xf
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
   1108              //URX1IF = 0;       // 清中断标志 
   1109              //char GPSRxBuf = U1DBUF; 
   1110             
   1111              
   1112              //HalUARTWrite (UART0, U1DBUF, 3); 
   1113             //if((GPSRxBuf == '$') && (strncmp(GPSRxData, CompareString, 5) == 0)){
   1114               // UartSend_String(GPSRxData,102); 
   1115                //memset(GPSRxData, 0, SIZE);
   1116              //}
   1117              if(U1DBUF != 0x00 && U1DBUF != 0x0A){
   \   000007   E5F9         MOV     A,0xf9
   \   000009   6029         JZ      ??UART1_ISR_0
   \   00000B   740A         MOV     A,#0xa
   \   00000D   65F9         XRL     A,0xf9
   \   00000F   6023         JZ      ??UART1_ISR_0
   1118                 GPSRxData[GPScount++] = U1DBUF; 
   \   000011   E5F9         MOV     A,0xf9
   \   000013   C0E0         PUSH    A
   \   000015   90....       MOV     DPTR,#GPScount
   \   000018   E0           MOVX    A,@DPTR
   \   000019   24..         ADD     A,#GPSRxData & 0xff
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   34..         ADDC    A,#(GPSRxData >> 8) & 0xff
   \   000020   F9           MOV     R1,A
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   D0E0         POP     A
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#GPScount
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   2401         ADD     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   3400         ADDC    A,#0x0
   \   000033   F0           MOVX    @DPTR,A
   1119              }
   1120              if((U1DBUF == '$')){
   \                     ??UART1_ISR_0:
   \   000034   7424         MOV     A,#0x24
   \   000036   65F9         XRL     A,0xf9
   \   000038   7030         JNZ     ??UART1_ISR_1
   1121                 UartSend_String(GPSRxData,GPScount);
   \   00003A                ; Setup parameters for call to function UartSend_String
   \   00003A   90....       MOV     DPTR,#GPScount
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FC           MOV     R4,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FD           MOV     R5,A
   \   000042   7A..         MOV     R2,#GPSRxData & 0xff
   \   000044   7B..         MOV     R3,#(GPSRxData >> 8) & 0xff
   \   000046   12....       LCALL   ??UartSend_String?relay
   1122                 GPScount = 0;
   \   000049   90....       MOV     DPTR,#GPScount
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
   1123                 memset(GPSRxData, 0, SIZE);
   \   000050                ; Setup parameters for call to function memset
   \   000050   75..64       MOV     ?V0 + 0,#0x64
   \   000053   F5..         MOV     ?V0 + 1,A
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV     R4,#0x0
   \   00005C   7D00         MOV     R5,#0x0
   \   00005E   7A..         MOV     R2,#GPSRxData & 0xff
   \   000060   7B..         MOV     R3,#(GPSRxData >> 8) & 0xff
   \   000062   12....       LCALL   ??memset?relay
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   1124              }
   1125              /*if((GPSRxBuf == '$') && (strncmp(GPSRxData, CompareString, 5) == 0)){
   1126                //发送数据
   1127              }else{
   1128              	memset(GPSRxData, 0, SIZE);
   1129              }*/
   1130            
   1131          }
   \                     ??UART1_ISR_1:
   \   00006A   7F02         MOV     R7,#0x2
   \   00006C   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   00006F                REQUIRE U1DBUF

   \                                 In  segment INTVEC, offset 0x1b, root
   \                     `??UART1_ISR??INTVEC 27`:
   \   00001B   02....       LJMP       (UART1_ISR)

   \                                 In  segment INTVEC, offset 0x4b, root
   \                     `??_IRQ_timer1??INTVEC 75`:
   \   00004B   02....       LJMP       (_IRQ_timer1)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for EndDeviceID>`:
   \   000000   0100         DW 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4420     DB "ALD WSN-system"
   \            57534E2D
   \            73797374
   \            656D00  
   \   00000F   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ucEdDir>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ucDirection>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ucSpeed>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for phasecw>`:
   \   000000   80           DB 128
   \   000001   40           DB 64
   \   000002   20           DB 32
   \   000003   10           DB 16

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for phaseccw>`:
   \   000000   10           DB 16
   \   000001   20           DB 32
   \   000002   40           DB 64
   \   000003   80           DB 128

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CompareString>`:
   \   000000   24474E52     DB 24H, 47H, 4EH, 52H, 4DH, 43H
   \            4D43    

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_I_1us?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_I_1us

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SPIWriteByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SPIWriteByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SPIReadByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SPIReadByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadRawRC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadRawRC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??WriteRawRC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WriteRawRC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetBitMask?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetBitMask

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ClearBitMask?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ClearBitMask

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAntennaOn?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAntennaOn

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAntennaOff?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAntennaOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??M500PcdConfigISOType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    M500PcdConfigISOType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdComMF522?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdComMF522

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAnticoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAnticoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CalulateCRC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CalulateCRC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdSelect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdSelect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAuthState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAuthState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdWrite?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdHalt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdHalt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??IC_CMT?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    IC_CMT

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??UartInitial?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UartInitial

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??UartSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UartSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??UartSend_String?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UartSend_String

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessMSGCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessMSGCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??XorCheckSum?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    XorCheckSum

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetDataLen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetDataLen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RFID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RFID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??init_port?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    init_port

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??init_timer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    init_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??start_pwm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    start_pwm

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node01">`:
   \   000000   414C4420     DB "ALD WSN-Node01"
   \            57534E2D
   \            4E6F6465
   \            303100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node02">`:
   \   000000   414C4420     DB "ALD WSN-Node02"
   \            57534E2D
   \            4E6F6465
   \            303200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node03">`:
   \   000000   414C4420     DB "ALD WSN-Node03"
   \            57534E2D
   \            4E6F6465
   \            303300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node04">`:
   \   000000   414C4420     DB "ALD WSN-Node04"
   \            57534E2D
   \            4E6F6465
   \            303400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-BEEP05">`:
   \   000000   414C4420     DB "ALD WSN-BEEP05"
   \            57534E2D
   \            42454550
   \            303500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "stepping motor">`:
   \   000000   73746570     DB "stepping motor"
   \            70696E67
   \            206D6F74
   \            6F7200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-system">`:
   \   000000   414C4420     DB "ALD WSN-system"
   \            57534E2D
   \            73797374
   \            656D00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_3`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   0000         DB 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57
   \   00000A   41           DB 65
   \   00000B   42           DB 66
   \   00000C   43           DB 67
   \   00000D   44           DB 68
   \   00000E   45           DB 69
   \   00000F   46           DB 70

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "The Card ID is: ">`:
   \   000000   54686520     DB "The Card ID is: "
   \            43617264
   \            20494420
   \            69733A20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "The GPS ID is: ">`:
   \   000000   54686520     DB "The GPS ID is: "
   \            47505320
   \            49442069
   \            733A2000
   1132          //-------------------------------------------------------------------
   1133          
   1134          
   1135          /*********************************************************************
   1136          *********************************************************************/
   1137            

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     CalulateCRC                        1      0     46
       -> ClearBitMask                  0      0     28
       -> WriteRawRC                    0      0     28
       -> SetBitMask                    0      0     28
       -> WriteRawRC                    0      0     28
       -> WriteRawRC                    0      0     28
       -> ReadRawRC                     0      0     28
       -> ReadRawRC                     0      0     28
       -> ReadRawRC                     0      0     28
     ClearBitMask                       0      0     43
       -> ReadRawRC                     0      0     18
       -> WriteRawRC                    0      0     18
     Delay_I_1us                        0      0      9
     GetDataLen                         0      0     12
     IC_CMT                             2      0     49
       -> PcdRequest                    0      0     90
       -> UartSend                      0      0     90
       -> PcdAnticoll                   0      0     90
       -> UartSend                      0      0     90
       -> PcdSelect                     0      0     90
       -> UartSend                      0      0     90
       -> PcdAuthState                  0      0     94
       -> UartSend                      0      0     90
       -> PcdRead                       0      0     90
       -> UartSend                      0      0     90
       -> PcdWrite                      0      0     90
       -> UartSend                      0      0     90
       -> PcdHalt                       0      0     90
       -> UartSend                      0      0     90
     M500PcdConfigISOType               0      0     46
       -> ClearBitMask                  0      0     18
       -> WriteRawRC                    0      0     18
       -> WriteRawRC                    0      0     18
       -> WriteRawRC                    0      0     18
       -> WriteRawRC                    0      0     18
       -> WriteRawRC                    0      0     18
       -> WriteRawRC                    0      0     18
       -> WriteRawRC                    0      0     18
       -> Delay_I_1us                   0      0     18
       -> PcdAntennaOn                  0      0     18
     PcdAntennaOff                      2      0      0
       -> ClearBitMask                  4      0      0
     PcdAntennaOn                       2      0      9
       -> ReadRawRC                     4      0      0
       -> SetBitMask                    4      0      0
     PcdAnticoll                        1      0     83
       -> ClearBitMask                  0      0     68
       -> WriteRawRC                    0      0     68
       -> ClearBitMask                  0      0     68
       -> PcdComMF522                   0      0     76
       -> SetBitMask                    0      0     68
     PcdAuthState                       1      0     81
       -> PcdComMF522                   0      0     68
       -> ReadRawRC                     0      0     60
     PcdComMF522                        1      0     60
       -> WriteRawRC                    0      0     44
       -> ClearBitMask                  0      0     44
       -> WriteRawRC                    0      0     44
       -> SetBitMask                    0      0     44
       -> WriteRawRC                    0      0     44
       -> WriteRawRC                    0      0     44
       -> SetBitMask                    0      0     44
       -> ReadRawRC                     0      0     44
       -> ClearBitMask                  0      0     44
       -> ReadRawRC                     0      0     44
       -> ReadRawRC                     0      0     44
       -> ReadRawRC                     0      0     44
       -> ReadRawRC                     0      0     44
       -> SetBitMask                    0      0     44
       -> WriteRawRC                    0      0     44
     PcdHalt                            0      0     79
       -> CalulateCRC                   0      0     60
       -> PcdComMF522                   0      0     68
     PcdRead                            1      0     80
       -> CalulateCRC                   0      0     62
       -> PcdComMF522                   0      0     70
     PcdRequest                         1      0     80
       -> ClearBitMask                  0      0     62
       -> WriteRawRC                    0      0     62
       -> SetBitMask                    0      0     62
       -> PcdComMF522                   0      0     70
     PcdReset                           2      0     37
       -> Delay_I_1us                   4      0      0
       -> Delay_I_1us                   4      0      0
       -> Delay_I_1us                   4      0      0
       -> WriteRawRC                    4      0      0
       -> ReadRawRC                     4      0      0
       -> Delay_I_1us                   4      0      0
       -> WriteRawRC                    4      0      0
       -> WriteRawRC                    4      0      0
       -> WriteRawRC                    4      0      0
       -> WriteRawRC                    4      0      0
       -> WriteRawRC                    4      0      0
       -> WriteRawRC                    4      0      0
     PcdSelect                          1      0     79
       -> CalulateCRC                   0      0     60
       -> ClearBitMask                  0      0     60
       -> PcdComMF522                   0      0     68
     PcdWrite                           1      0     81
       -> CalulateCRC                   0      0     64
       -> PcdComMF522                   0      0     72
       -> CalulateCRC                   0      0     64
       -> PcdComMF522                   0      0     72
     RFID                               2      0     56
       -> PcdReset                      0      0     74
       -> M500PcdConfigISOType          0      0     74
       -> PcdRequest                    0      0     74
       -> PcdRequest                    0      0     74
       -> PcdAnticoll                   0      0     74
       -> UartSend_String               0      0     74
       -> UartSend_String               0      0     74
       -> UartSend_String               0      0     74
     ReadRawRC                          0      0     39
       -> SPIWriteByte                  0      0     18
       -> SPIReadByte                   0      0     18
     SPIReadByte                        0      0     18
       -> Delay_I_1us                   0      0     18
       -> Delay_I_1us                   0      0     18
       -> Delay_I_1us                   0      0     18
     SPIWriteByte                       0      0     18
       -> Delay_I_1us                   0      0     18
       -> Delay_I_1us                   0      0     18
       -> Delay_I_1us                   0      0     18
     SendData                           1      0     34
       -> osal_memcpy                   0      0     44
       -> XorCheckSum                   0      0     38
       -> HalUARTWrite                  0      0     38
       -> osal_memcpy                   0      0     44
       -> XorCheckSum                   0      0     38
       -> HalUARTWrite                  0      0     38
       -> RFID                          0      0     38
       -> memset                        0      0     42
       -> UartSend_String               0      0     38
     SerialApp_CallBack                 0      0      9
       -> SerialApp_Send                0      0     18
     SerialApp_Init                     1      0     47
       -> osal_memset                   0      0     88
       -> osal_strlen                   0      0     94
       -> osal_memcpy                   0      0     94
       -> osal_strlen                   0      0     94
       -> osal_memcpy                   0      0     94
       -> osal_strlen                   0      0     94
       -> osal_memcpy                   0      0     94
       -> osal_strlen                   0      0     94
       -> osal_memcpy                   0      0     94
       -> osal_strlen                   0      0     94
       -> osal_memcpy                   0      0     94
       -> osal_strlen                   0      0     94
       -> osal_memcpy                   0      0     94
       -> osal_strlen                   0      0     94
       -> osal_memcpy                   0      0     94
       -> osal_strlen                   2      0     88
       -> LCD_write_EN_string           0      0     88
       -> afRegister                    0      0     88
       -> RegisterForKeys               0      0     88
       -> HalUARTOpen                   0      0     88
     SerialApp_ProcessEvent             0      0     21
       -> SerialApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> HalLedSet                     0      0     24
       -> osal_start_timerEx            0      0     24
       -> HalLedSet                     0      0     24
       -> osal_stop_timerEx             0      0     24
       -> SerialApp_ProcessMSGCmd       0      0     24
       -> SerialApp_Send                0      0     24
       -> AF_DataRequest                0      0     42
       -> osal_set_event                0      0     24
     SerialApp_ProcessMSGCmd            2      0     56
       -> osal_memcpy                   0      0     88
       -> osal_stop_timerEx             0      0     82
       -> osal_start_timerEx            0      0     82
     SerialApp_Send                     1      0     33
       -> HalUARTRead                   0      0     24
       -> GetDataLen                    0      0     24
       -> XorCheckSum                   0      0     24
       -> AF_DataRequest                0      0     42
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> SendData                      0      0     24
     SerialApp_SendPeriodicMessage      2      0     42
       -> DHT11                         0      0     42
       -> XorCheckSum                   0      0     42
       -> AF_DataRequest                0      0     60
     SetBitMask                         0      0     43
       -> ReadRawRC                     0      0     18
       -> WriteRawRC                    0      0     18
     UART1_ISR                          1      0     17
       -> UartSend_String               0      0     30
       -> memset                        0      0     34
     UartInitial                        0      0      0
     UartSend                           0      0     45
     UartSend_String                    0      0     46
     WriteRawRC                         0      0     43
       -> SPIWriteByte                  0      0     18
       -> SPIWriteByte                  0      0     18
     XorCheckSum                        0      0     31
     _IRQ_timer1                        1      0      0
     init_port                          0      0      0
     init_timer                         2      0      0
     start_pwm                          2      0      0
       -> init_port                     4      0      0
       -> init_timer                    4      0      0


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     _A_P0                                             1
     U0CSR                                             1
     P0INP                                             1
     _A_P2                                             1
     _A_IEN0                                           1
     U0DBUF                                            1
     U0BAUD                                            1
     U0GCR                                             1
     T1CC0L                                            1
     T1CC0H                                            1
     T1CTL                                             1
     _A_IRCON2                                         1
     PERCFG                                            1
     P0SEL                                             1
     P1SEL                                             1
     P2SEL                                             1
     P2INP                                             1
     _A_U1CSR                                          1
     U1DBUF                                            1
     U1BAUD                                            1
     U1GCR                                             1
     P0DIR                                             1
     P2DIR                                             1
     Delay_I_1us                                      24
     SPIWriteByte                                     44
     ?Subroutine10                                    15
     ??Subroutine29_0                                  5
     SPIReadByte                                      41
     ReadRawRC                                        19
     ?Subroutine7                                      4
     WriteRawRC                                       27
     ?Subroutine2                                      6
     SetBitMask                                       14
     ?Subroutine13                                     1
     ??Subroutine31_0                                  5
     ClearBitMask                                     15
     PcdAntennaOn                                     22
     ?Subroutine0                                      7
     PcdAntennaOff                                    13
     PcdReset                                         68
     ?Subroutine8                                     32
     M500PcdConfigISOType                             53
     PcdComMF522                                     408
     ?Subroutine11                                    18
     PcdRequest                                      126
     ?Subroutine3                                      2
     ??Subroutine30_0                                  8
     ?Subroutine19                                    16
     ?Subroutine21                                     6
     ??Subroutine32_0                                  6
     PcdAnticoll                                     180
     ?Subroutine4                                      5
     ?Subroutine17                                     9
     ?Subroutine25                                     9
     ??Subroutine35_0                                  5
     ??Subroutine39_0                                  5
     CalulateCRC                                      96
     ?Subroutine12                                    11
     PcdSelect                                       183
     ??Subroutine33_0                                  6
     ?Subroutine5                                      2
     ??Subroutine36_0                                  3
     ??Subroutine37_0                                  5
     ?Subroutine27                                     4
     PcdAuthState                                    186
     ?Subroutine20                                     9
     ?Subroutine16                                     3
     PcdWrite                                        240
     ?Subroutine6                                      5
     ?Subroutine22                                    12
     ?Subroutine28                                    14
     PcdRead                                         142
     ?Subroutine23                                    12
     PcdHalt                                          77
     IC_CMT                                          181
     UartInitial                                       3
     ?Subroutine1                                      5
     ?Subroutine24                                    22
     UartSend                                          8
     UartSend_String                                  52
     EndDeviceID                                       2
     SerialApp_ClusterList                             4
     SerialApp_SimpleDesc                             12
     SerialApp_epDesc                                  6
     AppTitle                                         20
     SerialApp_TaskID                                  1
     SendFlag                                          1
     Broadcast_DstAddr                                12
     SerialApp_TxSeq                                   1
     SerialApp_TxBuf                                  21
     SerialApp_TxLen                                   1
     SerialApp_RxAddr                                 12
     SerialApp_RspBuf                                  4
     SerialApp_NwkState                                1
     SerialApp_TxAddr                                 12
     SerialApp_MsgID                                   1
     NodeData                                         20
     TxBuffer                                        128
     LedState                                          1
     ucEdDir                                           1
     ucDirection                                       1
     ucSpeed                                           1
     DataBuf                                           3
     phasecw                                           4
     phaseccw                                          4
     GPSRxData                                       100
     CompareString                                     6
     GPScount                                          2
     SerialApp_Init                                  474
     ?Subroutine26                                     6
     SerialApp_ProcessEvent                          343
     ?Subroutine18                                     2
     ??Subroutine38_0                                 11
     ?Subroutine15                                     3
     ??Subroutine34_0                                  3
     SerialApp_ProcessMSGCmd                         329
     ?Subroutine9                                     19
     SendData                                        324
     SerialApp_Send                                  434
     SerialApp_CallBack                               24
     SerialApp_SendPeriodicMessage                   263
     XorCheckSum                                      43
     GetDataLen                                       24
     RFID                                            278
     ?Subroutine14                                    12
     init_port                                        12
     init_timer                                       29
     start_pwm                                        13
     _IRQ_timer1                                       1
     UART1_ISR                                       111
     ??UART1_ISR??INTVEC 27                            3
     ??_IRQ_timer1??INTVEC 75                          3
     ?<Initializer for EndDeviceID>                    2
     ?<Initializer for AppTitle>                      20
     ?<Initializer for ucEdDir>                        1
     ?<Initializer for ucDirection>                    1
     ?<Initializer for ucSpeed>                        1
     ?<Initializer for phasecw>                        4
     ?<Initializer for phaseccw>                       4
     ?<Initializer for CompareString>                  6
     ??Delay_I_1us?relay                               6
     ??SPIWriteByte?relay                              6
     ??SPIReadByte?relay                               6
     ??ReadRawRC?relay                                 6
     ??WriteRawRC?relay                                6
     ??SetBitMask?relay                                6
     ??ClearBitMask?relay                              6
     ??PcdAntennaOn?relay                              6
     ??PcdAntennaOff?relay                             6
     ??PcdReset?relay                                  6
     ??M500PcdConfigISOType?relay                      6
     ??PcdComMF522?relay                               6
     ??PcdRequest?relay                                6
     ??PcdAnticoll?relay                               6
     ??CalulateCRC?relay                               6
     ??PcdSelect?relay                                 6
     ??PcdAuthState?relay                              6
     ??PcdWrite?relay                                  6
     ??PcdRead?relay                                   6
     ??PcdHalt?relay                                   6
     ??IC_CMT?relay                                    6
     ??UartInitial?relay                               6
     ??UartSend?relay                                  6
     ??UartSend_String?relay                           6
     ??SerialApp_Init?relay                            6
     ??SerialApp_ProcessEvent?relay                    6
     ??SerialApp_ProcessMSGCmd?relay                   6
     ??SendData?relay                                  6
     ??SerialApp_Send?relay                            6
     ??SerialApp_CallBack?relay                        6
     ??SerialApp_SendPeriodicMessage?relay             6
     ??XorCheckSum?relay                               6
     ??GetDataLen?relay                                6
     ??RFID?relay                                      6
     ??init_port?relay                                 6
     ??init_timer?relay                                6
     ??start_pwm?relay                                 6
     ?<Constant {0}>                                  16
     ?<Constant {0}>_1                                16
     ?<Constant "ALD WSN-Node01">                     15
     ?<Constant "ALD WSN-Node02">                     15
     ?<Constant "ALD WSN-Node03">                     15
     ?<Constant "ALD WSN-Node04">                     15
     ?<Constant "ALD WSN-BEEP05">                     15
     ?<Constant "stepping motor">                     15
     ?<Constant "ALD WSN-system">                     15
     ?<Constant {0}>_2                                30
     ?<Constant {0}>_3                                11
     ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56   16
     ?<Constant "The Card ID is: ">                   17
     ?<Constant "\n">                                  2
     ?<Constant "The GPS ID is: ">                    16

 
 5 145 bytes in segment BANKED_CODE
   222 bytes in segment BANK_RELAYS
     6 bytes in segment INTVEC
   112 bytes in segment NEAR_CODE
    23 bytes in segment SFR_AN
    39 bytes in segment XDATA_I
    39 bytes in segment XDATA_ID
   251 bytes in segment XDATA_ROM_C
   321 bytes in segment XDATA_Z
 
 5 518 bytes of CODE  memory (+  6 bytes shared)
   251 bytes of CONST memory
     0 bytes of DATA  memory (+ 23 bytes shared)
   360 bytes of XDATA memory

Errors: none
Warnings: 13
